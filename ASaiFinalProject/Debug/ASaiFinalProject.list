
ASaiFinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007948  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001284  08007af8  08007af8  00008af8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d7c  08008d7c  0000ae80  2**0
                  CONTENTS
  4 .ARM          00000008  08008d7c  08008d7c  00009d7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d84  08008d84  0000ae80  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d84  08008d84  00009d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008d88  08008d88  00009d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000e80  20000000  08008d8c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000ae80  2**0
                  CONTENTS
 10 .bss          00026638  20000e80  20000e80  0000ae80  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200274b8  200274b8  0000ae80  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000ae80  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e5f8  00000000  00000000  0000aeb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c89  00000000  00000000  000194a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e68  00000000  00000000  0001c138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ae8  00000000  00000000  0001cfa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002655b  00000000  00000000  0001da88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001384a  00000000  00000000  00043fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dfd44  00000000  00000000  0005782d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137571  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046d0  00000000  00000000  001375b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006c  00000000  00000000  0013bc84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000e80 	.word	0x20000e80
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007ae0 	.word	0x08007ae0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000e84 	.word	0x20000e84
 80001ec:	08007ae0 	.word	0x08007ae0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96a 	b.w	800058c <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	460c      	mov	r4, r1
 80002d8:	2b00      	cmp	r3, #0
 80002da:	d14e      	bne.n	800037a <__udivmoddi4+0xaa>
 80002dc:	4694      	mov	ip, r2
 80002de:	458c      	cmp	ip, r1
 80002e0:	4686      	mov	lr, r0
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	d962      	bls.n	80003ae <__udivmoddi4+0xde>
 80002e8:	b14a      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ea:	f1c2 0320 	rsb	r3, r2, #32
 80002ee:	4091      	lsls	r1, r2
 80002f0:	fa20 f303 	lsr.w	r3, r0, r3
 80002f4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002f8:	4319      	orrs	r1, r3
 80002fa:	fa00 fe02 	lsl.w	lr, r0, r2
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f f68c 	uxth.w	r6, ip
 8000306:	fbb1 f4f7 	udiv	r4, r1, r7
 800030a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030e:	fb07 1114 	mls	r1, r7, r4, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb04 f106 	mul.w	r1, r4, r6
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f104 30ff 	add.w	r0, r4, #4294967295
 8000326:	f080 8112 	bcs.w	800054e <__udivmoddi4+0x27e>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 810f 	bls.w	800054e <__udivmoddi4+0x27e>
 8000330:	3c02      	subs	r4, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a59      	subs	r1, r3, r1
 8000336:	fa1f f38e 	uxth.w	r3, lr
 800033a:	fbb1 f0f7 	udiv	r0, r1, r7
 800033e:	fb07 1110 	mls	r1, r7, r0, r1
 8000342:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000346:	fb00 f606 	mul.w	r6, r0, r6
 800034a:	429e      	cmp	r6, r3
 800034c:	d90a      	bls.n	8000364 <__udivmoddi4+0x94>
 800034e:	eb1c 0303 	adds.w	r3, ip, r3
 8000352:	f100 31ff 	add.w	r1, r0, #4294967295
 8000356:	f080 80fc 	bcs.w	8000552 <__udivmoddi4+0x282>
 800035a:	429e      	cmp	r6, r3
 800035c:	f240 80f9 	bls.w	8000552 <__udivmoddi4+0x282>
 8000360:	4463      	add	r3, ip
 8000362:	3802      	subs	r0, #2
 8000364:	1b9b      	subs	r3, r3, r6
 8000366:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800036a:	2100      	movs	r1, #0
 800036c:	b11d      	cbz	r5, 8000376 <__udivmoddi4+0xa6>
 800036e:	40d3      	lsrs	r3, r2
 8000370:	2200      	movs	r2, #0
 8000372:	e9c5 3200 	strd	r3, r2, [r5]
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d905      	bls.n	800038a <__udivmoddi4+0xba>
 800037e:	b10d      	cbz	r5, 8000384 <__udivmoddi4+0xb4>
 8000380:	e9c5 0100 	strd	r0, r1, [r5]
 8000384:	2100      	movs	r1, #0
 8000386:	4608      	mov	r0, r1
 8000388:	e7f5      	b.n	8000376 <__udivmoddi4+0xa6>
 800038a:	fab3 f183 	clz	r1, r3
 800038e:	2900      	cmp	r1, #0
 8000390:	d146      	bne.n	8000420 <__udivmoddi4+0x150>
 8000392:	42a3      	cmp	r3, r4
 8000394:	d302      	bcc.n	800039c <__udivmoddi4+0xcc>
 8000396:	4290      	cmp	r0, r2
 8000398:	f0c0 80f0 	bcc.w	800057c <__udivmoddi4+0x2ac>
 800039c:	1a86      	subs	r6, r0, r2
 800039e:	eb64 0303 	sbc.w	r3, r4, r3
 80003a2:	2001      	movs	r0, #1
 80003a4:	2d00      	cmp	r5, #0
 80003a6:	d0e6      	beq.n	8000376 <__udivmoddi4+0xa6>
 80003a8:	e9c5 6300 	strd	r6, r3, [r5]
 80003ac:	e7e3      	b.n	8000376 <__udivmoddi4+0xa6>
 80003ae:	2a00      	cmp	r2, #0
 80003b0:	f040 8090 	bne.w	80004d4 <__udivmoddi4+0x204>
 80003b4:	eba1 040c 	sub.w	r4, r1, ip
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa1f f78c 	uxth.w	r7, ip
 80003c0:	2101      	movs	r1, #1
 80003c2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ca:	fb08 4416 	mls	r4, r8, r6, r4
 80003ce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003d2:	fb07 f006 	mul.w	r0, r7, r6
 80003d6:	4298      	cmp	r0, r3
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x11c>
 80003da:	eb1c 0303 	adds.w	r3, ip, r3
 80003de:	f106 34ff 	add.w	r4, r6, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x11a>
 80003e4:	4298      	cmp	r0, r3
 80003e6:	f200 80cd 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003ea:	4626      	mov	r6, r4
 80003ec:	1a1c      	subs	r4, r3, r0
 80003ee:	fa1f f38e 	uxth.w	r3, lr
 80003f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003f6:	fb08 4410 	mls	r4, r8, r0, r4
 80003fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003fe:	fb00 f707 	mul.w	r7, r0, r7
 8000402:	429f      	cmp	r7, r3
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x148>
 8000406:	eb1c 0303 	adds.w	r3, ip, r3
 800040a:	f100 34ff 	add.w	r4, r0, #4294967295
 800040e:	d202      	bcs.n	8000416 <__udivmoddi4+0x146>
 8000410:	429f      	cmp	r7, r3
 8000412:	f200 80b0 	bhi.w	8000576 <__udivmoddi4+0x2a6>
 8000416:	4620      	mov	r0, r4
 8000418:	1bdb      	subs	r3, r3, r7
 800041a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800041e:	e7a5      	b.n	800036c <__udivmoddi4+0x9c>
 8000420:	f1c1 0620 	rsb	r6, r1, #32
 8000424:	408b      	lsls	r3, r1
 8000426:	fa22 f706 	lsr.w	r7, r2, r6
 800042a:	431f      	orrs	r7, r3
 800042c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000430:	fa04 f301 	lsl.w	r3, r4, r1
 8000434:	ea43 030c 	orr.w	r3, r3, ip
 8000438:	40f4      	lsrs	r4, r6
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	0c38      	lsrs	r0, r7, #16
 8000440:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000444:	fbb4 fef0 	udiv	lr, r4, r0
 8000448:	fa1f fc87 	uxth.w	ip, r7
 800044c:	fb00 441e 	mls	r4, r0, lr, r4
 8000450:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000454:	fb0e f90c 	mul.w	r9, lr, ip
 8000458:	45a1      	cmp	r9, r4
 800045a:	fa02 f201 	lsl.w	r2, r2, r1
 800045e:	d90a      	bls.n	8000476 <__udivmoddi4+0x1a6>
 8000460:	193c      	adds	r4, r7, r4
 8000462:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000466:	f080 8084 	bcs.w	8000572 <__udivmoddi4+0x2a2>
 800046a:	45a1      	cmp	r9, r4
 800046c:	f240 8081 	bls.w	8000572 <__udivmoddi4+0x2a2>
 8000470:	f1ae 0e02 	sub.w	lr, lr, #2
 8000474:	443c      	add	r4, r7
 8000476:	eba4 0409 	sub.w	r4, r4, r9
 800047a:	fa1f f983 	uxth.w	r9, r3
 800047e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000482:	fb00 4413 	mls	r4, r0, r3, r4
 8000486:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800048a:	fb03 fc0c 	mul.w	ip, r3, ip
 800048e:	45a4      	cmp	ip, r4
 8000490:	d907      	bls.n	80004a2 <__udivmoddi4+0x1d2>
 8000492:	193c      	adds	r4, r7, r4
 8000494:	f103 30ff 	add.w	r0, r3, #4294967295
 8000498:	d267      	bcs.n	800056a <__udivmoddi4+0x29a>
 800049a:	45a4      	cmp	ip, r4
 800049c:	d965      	bls.n	800056a <__udivmoddi4+0x29a>
 800049e:	3b02      	subs	r3, #2
 80004a0:	443c      	add	r4, r7
 80004a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004a6:	fba0 9302 	umull	r9, r3, r0, r2
 80004aa:	eba4 040c 	sub.w	r4, r4, ip
 80004ae:	429c      	cmp	r4, r3
 80004b0:	46ce      	mov	lr, r9
 80004b2:	469c      	mov	ip, r3
 80004b4:	d351      	bcc.n	800055a <__udivmoddi4+0x28a>
 80004b6:	d04e      	beq.n	8000556 <__udivmoddi4+0x286>
 80004b8:	b155      	cbz	r5, 80004d0 <__udivmoddi4+0x200>
 80004ba:	ebb8 030e 	subs.w	r3, r8, lr
 80004be:	eb64 040c 	sbc.w	r4, r4, ip
 80004c2:	fa04 f606 	lsl.w	r6, r4, r6
 80004c6:	40cb      	lsrs	r3, r1
 80004c8:	431e      	orrs	r6, r3
 80004ca:	40cc      	lsrs	r4, r1
 80004cc:	e9c5 6400 	strd	r6, r4, [r5]
 80004d0:	2100      	movs	r1, #0
 80004d2:	e750      	b.n	8000376 <__udivmoddi4+0xa6>
 80004d4:	f1c2 0320 	rsb	r3, r2, #32
 80004d8:	fa20 f103 	lsr.w	r1, r0, r3
 80004dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e0:	fa24 f303 	lsr.w	r3, r4, r3
 80004e4:	4094      	lsls	r4, r2
 80004e6:	430c      	orrs	r4, r1
 80004e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80004f0:	fa1f f78c 	uxth.w	r7, ip
 80004f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004f8:	fb08 3110 	mls	r1, r8, r0, r3
 80004fc:	0c23      	lsrs	r3, r4, #16
 80004fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000502:	fb00 f107 	mul.w	r1, r0, r7
 8000506:	4299      	cmp	r1, r3
 8000508:	d908      	bls.n	800051c <__udivmoddi4+0x24c>
 800050a:	eb1c 0303 	adds.w	r3, ip, r3
 800050e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000512:	d22c      	bcs.n	800056e <__udivmoddi4+0x29e>
 8000514:	4299      	cmp	r1, r3
 8000516:	d92a      	bls.n	800056e <__udivmoddi4+0x29e>
 8000518:	3802      	subs	r0, #2
 800051a:	4463      	add	r3, ip
 800051c:	1a5b      	subs	r3, r3, r1
 800051e:	b2a4      	uxth	r4, r4
 8000520:	fbb3 f1f8 	udiv	r1, r3, r8
 8000524:	fb08 3311 	mls	r3, r8, r1, r3
 8000528:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800052c:	fb01 f307 	mul.w	r3, r1, r7
 8000530:	42a3      	cmp	r3, r4
 8000532:	d908      	bls.n	8000546 <__udivmoddi4+0x276>
 8000534:	eb1c 0404 	adds.w	r4, ip, r4
 8000538:	f101 36ff 	add.w	r6, r1, #4294967295
 800053c:	d213      	bcs.n	8000566 <__udivmoddi4+0x296>
 800053e:	42a3      	cmp	r3, r4
 8000540:	d911      	bls.n	8000566 <__udivmoddi4+0x296>
 8000542:	3902      	subs	r1, #2
 8000544:	4464      	add	r4, ip
 8000546:	1ae4      	subs	r4, r4, r3
 8000548:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800054c:	e739      	b.n	80003c2 <__udivmoddi4+0xf2>
 800054e:	4604      	mov	r4, r0
 8000550:	e6f0      	b.n	8000334 <__udivmoddi4+0x64>
 8000552:	4608      	mov	r0, r1
 8000554:	e706      	b.n	8000364 <__udivmoddi4+0x94>
 8000556:	45c8      	cmp	r8, r9
 8000558:	d2ae      	bcs.n	80004b8 <__udivmoddi4+0x1e8>
 800055a:	ebb9 0e02 	subs.w	lr, r9, r2
 800055e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000562:	3801      	subs	r0, #1
 8000564:	e7a8      	b.n	80004b8 <__udivmoddi4+0x1e8>
 8000566:	4631      	mov	r1, r6
 8000568:	e7ed      	b.n	8000546 <__udivmoddi4+0x276>
 800056a:	4603      	mov	r3, r0
 800056c:	e799      	b.n	80004a2 <__udivmoddi4+0x1d2>
 800056e:	4630      	mov	r0, r6
 8000570:	e7d4      	b.n	800051c <__udivmoddi4+0x24c>
 8000572:	46d6      	mov	lr, sl
 8000574:	e77f      	b.n	8000476 <__udivmoddi4+0x1a6>
 8000576:	4463      	add	r3, ip
 8000578:	3802      	subs	r0, #2
 800057a:	e74d      	b.n	8000418 <__udivmoddi4+0x148>
 800057c:	4606      	mov	r6, r0
 800057e:	4623      	mov	r3, r4
 8000580:	4608      	mov	r0, r1
 8000582:	e70f      	b.n	80003a4 <__udivmoddi4+0xd4>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	e730      	b.n	80003ec <__udivmoddi4+0x11c>
 800058a:	bf00      	nop

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <buttonInterruptInit>:
static EXTI_HandleTypeDef LCDTouchIRQ;
void LCDTouchScreenInterruptGPIOInit(void);
#endif // TOUCH_INTERRUPT_ENABLED
#endif // COMPILE_TOUCH_FUNCTIONS

void buttonInterruptInit(){
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	BUTTON_Interrupt_Init();
 8000594:	f000 f840 	bl	8000618 <BUTTON_Interrupt_Init>
}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}

0800059c <ApplicationInit>:
void generateBlock(){
	Game_GenerateBlock();
}

void ApplicationInit(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
	initialise_monitor_handles(); // Allows printf functionality
 80005a0:	f006 f8bc 	bl	800671c <initialise_monitor_handles>
	printf("HELOOOOOOO\n");
 80005a4:	4810      	ldr	r0, [pc, #64]	@ (80005e8 <ApplicationInit+0x4c>)
 80005a6:	f006 fa61 	bl	8006a6c <puts>
	buttonInterruptInit(); // interrupt
 80005aa:	f7ff fff1 	bl	8000590 <buttonInterruptInit>
    LTCD__Init();
 80005ae:	f000 fbed 	bl	8000d8c <LTCD__Init>
    LTCD_Layer_Init(0);
 80005b2:	2000      	movs	r0, #0
 80005b4:	f000 fbaa 	bl	8000d0c <LTCD_Layer_Init>
    RNG_Init();
 80005b8:	f001 fbd6 	bl	8001d68 <RNG_Init>
    MainMenu();
 80005bc:	f000 fe92 	bl	80012e4 <MainMenu>
    #if COMPILE_TOUCH_FUNCTIONS == 1
	InitializeLCDTouch();
 80005c0:	f000 ff36 	bl	8001430 <InitializeLCDTouch>
    while(returnTouchStateAndLocation(&StaticTouchData) != STMPE811_State_Pressed){
 80005c4:	e002      	b.n	80005cc <ApplicationInit+0x30>
    	HAL_Delay(100);
 80005c6:	2064      	movs	r0, #100	@ 0x64
 80005c8:	f002 fde8 	bl	800319c <HAL_Delay>
    while(returnTouchStateAndLocation(&StaticTouchData) != STMPE811_State_Pressed){
 80005cc:	4807      	ldr	r0, [pc, #28]	@ (80005ec <ApplicationInit+0x50>)
 80005ce:	f000 ff3a 	bl	8001446 <returnTouchStateAndLocation>
 80005d2:	4603      	mov	r3, r0
 80005d4:	2b00      	cmp	r3, #0
 80005d6:	d1f6      	bne.n	80005c6 <ApplicationInit+0x2a>
    }
    Game_Start();
 80005d8:	f000 f9d4 	bl	8000984 <Game_Start>
	// This is the orientation for the board to be direclty up where the buttons are vertically above the screen
	// Top left would be low x value, high y value. Bottom right would be low x value, low y value.
	StaticTouchData.orientation = STMPE811_Orientation_Portrait_2;
 80005dc:	4b03      	ldr	r3, [pc, #12]	@ (80005ec <ApplicationInit+0x50>)
 80005de:	2201      	movs	r2, #1
 80005e0:	719a      	strb	r2, [r3, #6]
	#if TOUCH_INTERRUPT_ENABLED == 1
	LCDTouchScreenInterruptGPIOInit();
	#endif // TOUCH_INTERRUPT_ENABLED

	#endif // COMPILE_TOUCH_FUNCTIONS
}
 80005e2:	bf00      	nop
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08007af8 	.word	0x08007af8
 80005ec:	20000e9c 	.word	0x20000e9c

080005f0 <EXTI0_IRQHandler>:
	WriteDataToTouchModule(STMPE811_INT_STA, clearIRQData);

}
#endif // TOUCH_INTERRUPT_ENABLED

void EXTI0_IRQHandler(){
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
	HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 80005f4:	2006      	movs	r0, #6
 80005f6:	f002 ff1e 	bl	8003436 <HAL_NVIC_DisableIRQ>
	Game_BlockRotate();
 80005fa:	f000 f8c1 	bl	8000780 <Game_BlockRotate>
	__HAL_GPIO_EXTI_CLEAR_IT(EXTI_LINE_1);
 80005fe:	4b04      	ldr	r3, [pc, #16]	@ (8000610 <EXTI0_IRQHandler+0x20>)
 8000600:	4a04      	ldr	r2, [pc, #16]	@ (8000614 <EXTI0_IRQHandler+0x24>)
 8000602:	615a      	str	r2, [r3, #20]
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000604:	2006      	movs	r0, #6
 8000606:	f002 ff08 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 800060a:	bf00      	nop
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	40013c00 	.word	0x40013c00
 8000614:	06000001 	.word	0x06000001

08000618 <BUTTON_Interrupt_Init>:

	BUTTON_Clock_Enable();
	HAL_GPIO_Init(GPIOA, &buttonConfig);
}

void BUTTON_Interrupt_Init(){
 8000618:	b580      	push	{r7, lr}
 800061a:	b086      	sub	sp, #24
 800061c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef buttonConfig = {0};
 800061e:	1d3b      	adds	r3, r7, #4
 8000620:	2200      	movs	r2, #0
 8000622:	601a      	str	r2, [r3, #0]
 8000624:	605a      	str	r2, [r3, #4]
 8000626:	609a      	str	r2, [r3, #8]
 8000628:	60da      	str	r2, [r3, #12]
 800062a:	611a      	str	r2, [r3, #16]

	buttonConfig.Pin = BUTTON_PIN_NUMBER;
 800062c:	2301      	movs	r3, #1
 800062e:	607b      	str	r3, [r7, #4]
	buttonConfig.Mode = GPIO_MODE_IT_RISING;
 8000630:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000634:	60bb      	str	r3, [r7, #8]
	buttonConfig.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	60fb      	str	r3, [r7, #12]
	buttonConfig.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2302      	movs	r3, #2
 800063c:	613b      	str	r3, [r7, #16]

	BUTTON_Clock_Enable();
 800063e:	f000 f80f 	bl	8000660 <BUTTON_Clock_Enable>
	HAL_GPIO_Init(GPIOA, &buttonConfig);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	4619      	mov	r1, r3
 8000646:	4805      	ldr	r0, [pc, #20]	@ (800065c <BUTTON_Interrupt_Init+0x44>)
 8000648:	f002 ff10 	bl	800346c <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800064c:	2006      	movs	r0, #6
 800064e:	f002 fee4 	bl	800341a <HAL_NVIC_EnableIRQ>
}
 8000652:	bf00      	nop
 8000654:	3718      	adds	r7, #24
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40020000 	.word	0x40020000

08000660 <BUTTON_Clock_Enable>:

void BUTTON_Clock_Enable(){
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000666:	2300      	movs	r3, #0
 8000668:	607b      	str	r3, [r7, #4]
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <BUTTON_Clock_Enable+0x30>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066e:	4a08      	ldr	r2, [pc, #32]	@ (8000690 <BUTTON_Clock_Enable+0x30>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	@ 0x30
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <BUTTON_Clock_Enable+0x30>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	607b      	str	r3, [r7, #4]
 8000680:	687b      	ldr	r3, [r7, #4]
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800

08000694 <Game_PlaceBlock>:
uint8_t currentRot = 0;
uint32_t currentBlock[4][4][2];
uint32_t clearBlock[4][4][2] = {0};
uint8_t random_num;

void Game_PlaceBlock(uint32_t grid[10][10][2]) {
 8000694:	b4b0      	push	{r4, r5, r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
    for (uint8_t y = 0; y < 4; y++) {
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]
 80006a0:	e044      	b.n	800072c <Game_PlaceBlock+0x98>
        for (uint8_t x = 0; x < 4; x++) {
 80006a2:	2300      	movs	r3, #0
 80006a4:	73bb      	strb	r3, [r7, #14]
 80006a6:	e03b      	b.n	8000720 <Game_PlaceBlock+0x8c>
            if (currentBlock[y][x][0] == 1) {
 80006a8:	7bfa      	ldrb	r2, [r7, #15]
 80006aa:	7bbb      	ldrb	r3, [r7, #14]
 80006ac:	4924      	ldr	r1, [pc, #144]	@ (8000740 <Game_PlaceBlock+0xac>)
 80006ae:	0092      	lsls	r2, r2, #2
 80006b0:	4413      	add	r3, r2
 80006b2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d12f      	bne.n	800071a <Game_PlaceBlock+0x86>
                uint8_t gridX = locationX + x;
 80006ba:	4b22      	ldr	r3, [pc, #136]	@ (8000744 <Game_PlaceBlock+0xb0>)
 80006bc:	781a      	ldrb	r2, [r3, #0]
 80006be:	7bbb      	ldrb	r3, [r7, #14]
 80006c0:	4413      	add	r3, r2
 80006c2:	737b      	strb	r3, [r7, #13]
                uint8_t gridY = locationY + y;
 80006c4:	4b20      	ldr	r3, [pc, #128]	@ (8000748 <Game_PlaceBlock+0xb4>)
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	4413      	add	r3, r2
 80006cc:	733b      	strb	r3, [r7, #12]
                if (gridX < 10 && gridY < 10) {
 80006ce:	7b7b      	ldrb	r3, [r7, #13]
 80006d0:	2b09      	cmp	r3, #9
 80006d2:	d822      	bhi.n	800071a <Game_PlaceBlock+0x86>
 80006d4:	7b3b      	ldrb	r3, [r7, #12]
 80006d6:	2b09      	cmp	r3, #9
 80006d8:	d81f      	bhi.n	800071a <Game_PlaceBlock+0x86>
                	grid[gridY][gridX][0] = 1;
 80006da:	7b3a      	ldrb	r2, [r7, #12]
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	011b      	lsls	r3, r3, #4
 80006e4:	461a      	mov	r2, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4413      	add	r3, r2
 80006ea:	7b7a      	ldrb	r2, [r7, #13]
 80006ec:	2101      	movs	r1, #1
 80006ee:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
                	grid[gridY][gridX][1] = currentBlock[y][x][1];
 80006f2:	7bfd      	ldrb	r5, [r7, #15]
 80006f4:	7bbc      	ldrb	r4, [r7, #14]
 80006f6:	7b3a      	ldrb	r2, [r7, #12]
 80006f8:	4613      	mov	r3, r2
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	4413      	add	r3, r2
 80006fe:	011b      	lsls	r3, r3, #4
 8000700:	461a      	mov	r2, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	1899      	adds	r1, r3, r2
 8000706:	7b78      	ldrb	r0, [r7, #13]
 8000708:	4a0d      	ldr	r2, [pc, #52]	@ (8000740 <Game_PlaceBlock+0xac>)
 800070a:	00ab      	lsls	r3, r5, #2
 800070c:	4423      	add	r3, r4
 800070e:	00db      	lsls	r3, r3, #3
 8000710:	4413      	add	r3, r2
 8000712:	685a      	ldr	r2, [r3, #4]
 8000714:	00c3      	lsls	r3, r0, #3
 8000716:	440b      	add	r3, r1
 8000718:	605a      	str	r2, [r3, #4]
        for (uint8_t x = 0; x < 4; x++) {
 800071a:	7bbb      	ldrb	r3, [r7, #14]
 800071c:	3301      	adds	r3, #1
 800071e:	73bb      	strb	r3, [r7, #14]
 8000720:	7bbb      	ldrb	r3, [r7, #14]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d9c0      	bls.n	80006a8 <Game_PlaceBlock+0x14>
    for (uint8_t y = 0; y < 4; y++) {
 8000726:	7bfb      	ldrb	r3, [r7, #15]
 8000728:	3301      	adds	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
 800072c:	7bfb      	ldrb	r3, [r7, #15]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9b7      	bls.n	80006a2 <Game_PlaceBlock+0xe>
                }
            }
        }
    }
}
 8000732:	bf00      	nop
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	bcb0      	pop	{r4, r5, r7}
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20001808 	.word	0x20001808
 8000744:	20000e00 	.word	0x20000e00
 8000748:	20001804 	.word	0x20001804

0800074c <Game_GenerateBlock>:

void Game_GenerateBlock(){
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	random_num = RNG_Generate();
 8000750:	f001 fb2c 	bl	8001dac <RNG_Generate>
 8000754:	4603      	mov	r3, r0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <Game_GenerateBlock+0x28>)
 800075a:	701a      	strb	r2, [r3, #0]
    memcpy(currentBlock, blocks[random_num][0], sizeof(blocks[random_num][0]));
 800075c:	4b05      	ldr	r3, [pc, #20]	@ (8000774 <Game_GenerateBlock+0x28>)
 800075e:	781b      	ldrb	r3, [r3, #0]
 8000760:	025b      	lsls	r3, r3, #9
 8000762:	4a05      	ldr	r2, [pc, #20]	@ (8000778 <Game_GenerateBlock+0x2c>)
 8000764:	4413      	add	r3, r2
 8000766:	2280      	movs	r2, #128	@ 0x80
 8000768:	4619      	mov	r1, r3
 800076a:	4804      	ldr	r0, [pc, #16]	@ (800077c <Game_GenerateBlock+0x30>)
 800076c:	f006 faf9 	bl	8006d62 <memcpy>
}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20001908 	.word	0x20001908
 8000778:	20000000 	.word	0x20000000
 800077c:	20001808 	.word	0x20001808

08000780 <Game_BlockRotate>:

void Game_BlockRotate(){
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
	uint8_t previousRot = currentRot;
 8000786:	4b32      	ldr	r3, [pc, #200]	@ (8000850 <Game_BlockRotate+0xd0>)
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	71fb      	strb	r3, [r7, #7]
	currentRot +=1;
 800078c:	4b30      	ldr	r3, [pc, #192]	@ (8000850 <Game_BlockRotate+0xd0>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	3301      	adds	r3, #1
 8000792:	b2da      	uxtb	r2, r3
 8000794:	4b2e      	ldr	r3, [pc, #184]	@ (8000850 <Game_BlockRotate+0xd0>)
 8000796:	701a      	strb	r2, [r3, #0]
	if (currentRot >= 4) {
 8000798:	4b2d      	ldr	r3, [pc, #180]	@ (8000850 <Game_BlockRotate+0xd0>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	2b03      	cmp	r3, #3
 800079e:	d902      	bls.n	80007a6 <Game_BlockRotate+0x26>
	        currentRot = 0;
 80007a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000850 <Game_BlockRotate+0xd0>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	701a      	strb	r2, [r3, #0]
	}
    memcpy(currentBlock, clearBlock, sizeof(blocks[random_num][currentRot]));
 80007a6:	4a2b      	ldr	r2, [pc, #172]	@ (8000854 <Game_BlockRotate+0xd4>)
 80007a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000858 <Game_BlockRotate+0xd8>)
 80007aa:	4610      	mov	r0, r2
 80007ac:	4619      	mov	r1, r3
 80007ae:	2380      	movs	r3, #128	@ 0x80
 80007b0:	461a      	mov	r2, r3
 80007b2:	f006 fad6 	bl	8006d62 <memcpy>
    memcpy(currentBlock, blocks[random_num][currentRot], sizeof(blocks[random_num][currentRot]));
 80007b6:	4b29      	ldr	r3, [pc, #164]	@ (800085c <Game_BlockRotate+0xdc>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4b24      	ldr	r3, [pc, #144]	@ (8000850 <Game_BlockRotate+0xd0>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	461a      	mov	r2, r3
 80007c2:	008b      	lsls	r3, r1, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	01db      	lsls	r3, r3, #7
 80007c8:	4a25      	ldr	r2, [pc, #148]	@ (8000860 <Game_BlockRotate+0xe0>)
 80007ca:	4413      	add	r3, r2
 80007cc:	2280      	movs	r2, #128	@ 0x80
 80007ce:	4619      	mov	r1, r3
 80007d0:	4820      	ldr	r0, [pc, #128]	@ (8000854 <Game_BlockRotate+0xd4>)
 80007d2:	f006 fac6 	bl	8006d62 <memcpy>
	bool collision = Game_CheckCollision();
 80007d6:	f000 f873 	bl	80008c0 <Game_CheckCollision>
 80007da:	4603      	mov	r3, r0
 80007dc:	71bb      	strb	r3, [r7, #6]
	if (!collision){
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	f083 0301 	eor.w	r3, r3, #1
 80007e4:	b2db      	uxtb	r3, r3
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d012      	beq.n	8000810 <Game_BlockRotate+0x90>
		memcpy(nextGrid, currentGrid, sizeof(currentGrid));
 80007ea:	4a1e      	ldr	r2, [pc, #120]	@ (8000864 <Game_BlockRotate+0xe4>)
 80007ec:	4b1e      	ldr	r3, [pc, #120]	@ (8000868 <Game_BlockRotate+0xe8>)
 80007ee:	4610      	mov	r0, r2
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80007f6:	461a      	mov	r2, r3
 80007f8:	f006 fab3 	bl	8006d62 <memcpy>
		Game_PlaceBlock(nextGrid);
 80007fc:	4819      	ldr	r0, [pc, #100]	@ (8000864 <Game_BlockRotate+0xe4>)
 80007fe:	f7ff ff49 	bl	8000694 <Game_PlaceBlock>
		Draw_Grid(currentGrid);
 8000802:	4819      	ldr	r0, [pc, #100]	@ (8000868 <Game_BlockRotate+0xe8>)
 8000804:	f000 fb92 	bl	8000f2c <Draw_Grid>
		Draw_Grid(nextGrid);
 8000808:	4816      	ldr	r0, [pc, #88]	@ (8000864 <Game_BlockRotate+0xe4>)
 800080a:	f000 fb8f 	bl	8000f2c <Draw_Grid>
	} else {
		currentRot = previousRot;
	    memcpy(currentBlock, clearBlock, sizeof(blocks[random_num][currentRot]));
        memcpy(currentBlock, blocks[random_num][currentRot], sizeof(blocks[random_num][currentRot]));
	}
}
 800080e:	e01a      	b.n	8000846 <Game_BlockRotate+0xc6>
		currentRot = previousRot;
 8000810:	4a0f      	ldr	r2, [pc, #60]	@ (8000850 <Game_BlockRotate+0xd0>)
 8000812:	79fb      	ldrb	r3, [r7, #7]
 8000814:	7013      	strb	r3, [r2, #0]
	    memcpy(currentBlock, clearBlock, sizeof(blocks[random_num][currentRot]));
 8000816:	4a0f      	ldr	r2, [pc, #60]	@ (8000854 <Game_BlockRotate+0xd4>)
 8000818:	4b0f      	ldr	r3, [pc, #60]	@ (8000858 <Game_BlockRotate+0xd8>)
 800081a:	4610      	mov	r0, r2
 800081c:	4619      	mov	r1, r3
 800081e:	2380      	movs	r3, #128	@ 0x80
 8000820:	461a      	mov	r2, r3
 8000822:	f006 fa9e 	bl	8006d62 <memcpy>
        memcpy(currentBlock, blocks[random_num][currentRot], sizeof(blocks[random_num][currentRot]));
 8000826:	4b0d      	ldr	r3, [pc, #52]	@ (800085c <Game_BlockRotate+0xdc>)
 8000828:	781b      	ldrb	r3, [r3, #0]
 800082a:	4619      	mov	r1, r3
 800082c:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <Game_BlockRotate+0xd0>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	461a      	mov	r2, r3
 8000832:	008b      	lsls	r3, r1, #2
 8000834:	4413      	add	r3, r2
 8000836:	01db      	lsls	r3, r3, #7
 8000838:	4a09      	ldr	r2, [pc, #36]	@ (8000860 <Game_BlockRotate+0xe0>)
 800083a:	4413      	add	r3, r2
 800083c:	2280      	movs	r2, #128	@ 0x80
 800083e:	4619      	mov	r1, r3
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <Game_BlockRotate+0xd4>)
 8000842:	f006 fa8e 	bl	8006d62 <memcpy>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20001805 	.word	0x20001805
 8000854:	20001808 	.word	0x20001808
 8000858:	20001888 	.word	0x20001888
 800085c:	20001908 	.word	0x20001908
 8000860:	20000000 	.word	0x20000000
 8000864:	20000ea4 	.word	0x20000ea4
 8000868:	200011c4 	.word	0x200011c4

0800086c <Game_BlockMoveDown>:

void Game_BlockMoveDown(){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
	uint8_t previousY = locationY;
 8000872:	4b10      	ldr	r3, [pc, #64]	@ (80008b4 <Game_BlockMoveDown+0x48>)
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	71fb      	strb	r3, [r7, #7]
	locationY +=1;
 8000878:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <Game_BlockMoveDown+0x48>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	3301      	adds	r3, #1
 800087e:	b2da      	uxtb	r2, r3
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <Game_BlockMoveDown+0x48>)
 8000882:	701a      	strb	r2, [r3, #0]
	bool collision = Game_CheckCollision();
 8000884:	f000 f81c 	bl	80008c0 <Game_CheckCollision>
 8000888:	4603      	mov	r3, r0
 800088a:	71bb      	strb	r3, [r7, #6]

	if (!collision){
 800088c:	79bb      	ldrb	r3, [r7, #6]
 800088e:	f083 0301 	eor.w	r3, r3, #1
 8000892:	b2db      	uxtb	r3, r3
 8000894:	2b00      	cmp	r3, #0
 8000896:	d003      	beq.n	80008a0 <Game_BlockMoveDown+0x34>
		Game_PlaceBlock(nextGrid);
 8000898:	4807      	ldr	r0, [pc, #28]	@ (80008b8 <Game_BlockMoveDown+0x4c>)
 800089a:	f7ff fefb 	bl	8000694 <Game_PlaceBlock>
	} else {
		locationY = previousY;
		Game_PlaceBlock(currentGrid);
	}
}
 800089e:	e005      	b.n	80008ac <Game_BlockMoveDown+0x40>
		locationY = previousY;
 80008a0:	4a04      	ldr	r2, [pc, #16]	@ (80008b4 <Game_BlockMoveDown+0x48>)
 80008a2:	79fb      	ldrb	r3, [r7, #7]
 80008a4:	7013      	strb	r3, [r2, #0]
		Game_PlaceBlock(currentGrid);
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <Game_BlockMoveDown+0x50>)
 80008a8:	f7ff fef4 	bl	8000694 <Game_PlaceBlock>
}
 80008ac:	bf00      	nop
 80008ae:	3708      	adds	r7, #8
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	20001804 	.word	0x20001804
 80008b8:	20000ea4 	.word	0x20000ea4
 80008bc:	200011c4 	.word	0x200011c4

080008c0 <Game_CheckCollision>:

bool Game_CheckCollision(){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
	for (uint8_t y = 0; y < 4; y++) {
 80008c6:	2300      	movs	r3, #0
 80008c8:	71fb      	strb	r3, [r7, #7]
 80008ca:	e046      	b.n	800095a <Game_CheckCollision+0x9a>
		for (uint8_t x = 0; x < 4; x++) {
 80008cc:	2300      	movs	r3, #0
 80008ce:	71bb      	strb	r3, [r7, #6]
 80008d0:	e03d      	b.n	800094e <Game_CheckCollision+0x8e>
			if (currentBlock[y][x][0] == 1) {
 80008d2:	79fa      	ldrb	r2, [r7, #7]
 80008d4:	79bb      	ldrb	r3, [r7, #6]
 80008d6:	4925      	ldr	r1, [pc, #148]	@ (800096c <Game_CheckCollision+0xac>)
 80008d8:	0092      	lsls	r2, r2, #2
 80008da:	4413      	add	r3, r2
 80008dc:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d131      	bne.n	8000948 <Game_CheckCollision+0x88>
				uint8_t gridX = locationX + x;
 80008e4:	4b22      	ldr	r3, [pc, #136]	@ (8000970 <Game_CheckCollision+0xb0>)
 80008e6:	781a      	ldrb	r2, [r3, #0]
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	4413      	add	r3, r2
 80008ec:	717b      	strb	r3, [r7, #5]
				uint8_t gridY = locationY + y;
 80008ee:	4b21      	ldr	r3, [pc, #132]	@ (8000974 <Game_CheckCollision+0xb4>)
 80008f0:	781a      	ldrb	r2, [r3, #0]
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	4413      	add	r3, r2
 80008f6:	713b      	strb	r3, [r7, #4]
				if (gridX >= 10 || gridY >= 10) {
 80008f8:	797b      	ldrb	r3, [r7, #5]
 80008fa:	2b09      	cmp	r3, #9
 80008fc:	d802      	bhi.n	8000904 <Game_CheckCollision+0x44>
 80008fe:	793b      	ldrb	r3, [r7, #4]
 8000900:	2b09      	cmp	r3, #9
 8000902:	d913      	bls.n	800092c <Game_CheckCollision+0x6c>
				    memcpy(nextGrid, clearGrid, sizeof(clearGrid));
 8000904:	4a1c      	ldr	r2, [pc, #112]	@ (8000978 <Game_CheckCollision+0xb8>)
 8000906:	4b1d      	ldr	r3, [pc, #116]	@ (800097c <Game_CheckCollision+0xbc>)
 8000908:	4610      	mov	r0, r2
 800090a:	4619      	mov	r1, r3
 800090c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000910:	461a      	mov	r2, r3
 8000912:	f006 fa26 	bl	8006d62 <memcpy>
				    memcpy(currentGrid, clearGrid, sizeof(clearGrid));
 8000916:	4a1a      	ldr	r2, [pc, #104]	@ (8000980 <Game_CheckCollision+0xc0>)
 8000918:	4b18      	ldr	r3, [pc, #96]	@ (800097c <Game_CheckCollision+0xbc>)
 800091a:	4610      	mov	r0, r2
 800091c:	4619      	mov	r1, r3
 800091e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000922:	461a      	mov	r2, r3
 8000924:	f006 fa1d 	bl	8006d62 <memcpy>
					return true;
 8000928:	2301      	movs	r3, #1
 800092a:	e01a      	b.n	8000962 <Game_CheckCollision+0xa2>
				}
				if (currentGrid[gridY][gridX][0] != 0) {
 800092c:	793a      	ldrb	r2, [r7, #4]
 800092e:	7979      	ldrb	r1, [r7, #5]
 8000930:	4813      	ldr	r0, [pc, #76]	@ (8000980 <Game_CheckCollision+0xc0>)
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	005b      	lsls	r3, r3, #1
 800093a:	440b      	add	r3, r1
 800093c:	f850 3033 	ldr.w	r3, [r0, r3, lsl #3]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <Game_CheckCollision+0x88>
					return true;
 8000944:	2301      	movs	r3, #1
 8000946:	e00c      	b.n	8000962 <Game_CheckCollision+0xa2>
		for (uint8_t x = 0; x < 4; x++) {
 8000948:	79bb      	ldrb	r3, [r7, #6]
 800094a:	3301      	adds	r3, #1
 800094c:	71bb      	strb	r3, [r7, #6]
 800094e:	79bb      	ldrb	r3, [r7, #6]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d9be      	bls.n	80008d2 <Game_CheckCollision+0x12>
	for (uint8_t y = 0; y < 4; y++) {
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	3301      	adds	r3, #1
 8000958:	71fb      	strb	r3, [r7, #7]
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b03      	cmp	r3, #3
 800095e:	d9b5      	bls.n	80008cc <Game_CheckCollision+0xc>
				}
			}
		}
	}
    return false;
 8000960:	2300      	movs	r3, #0
}
 8000962:	4618      	mov	r0, r3
 8000964:	3708      	adds	r7, #8
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	20001808 	.word	0x20001808
 8000970:	20000e00 	.word	0x20000e00
 8000974:	20001804 	.word	0x20001804
 8000978:	20000ea4 	.word	0x20000ea4
 800097c:	200014e4 	.word	0x200014e4
 8000980:	200011c4 	.word	0x200011c4

08000984 <Game_Start>:

uint32_t start_time = 0;
uint32_t end_time = 0;
uint32_t elapsed_time = 0;

void Game_Start() {
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0
    start_time = HAL_GetTick();
 800098a:	f002 fbfb 	bl	8003184 <HAL_GetTick>
 800098e:	4603      	mov	r3, r0
 8000990:	4a71      	ldr	r2, [pc, #452]	@ (8000b58 <Game_Start+0x1d4>)
 8000992:	6013      	str	r3, [r2, #0]
    Game_GenerateBlock();
 8000994:	f7ff feda 	bl	800074c <Game_GenerateBlock>
    Game_PlaceBlock(nextGrid);
 8000998:	4870      	ldr	r0, [pc, #448]	@ (8000b5c <Game_Start+0x1d8>)
 800099a:	f7ff fe7b 	bl	8000694 <Game_PlaceBlock>
    Draw_Grid(nextGrid);
 800099e:	486f      	ldr	r0, [pc, #444]	@ (8000b5c <Game_Start+0x1d8>)
 80009a0:	f000 fac4 	bl	8000f2c <Draw_Grid>
    HAL_Delay(1000);
 80009a4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80009a8:	f002 fbf8 	bl	800319c <HAL_Delay>
    while (1) {
    	// check top row
    	for(int i =0; i < 10; i++){
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	e044      	b.n	8000a3c <Game_Start+0xb8>
        	if(currentGrid[0][i][0]){
 80009b2:	4a6b      	ldr	r2, [pc, #428]	@ (8000b60 <Game_Start+0x1dc>)
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d03b      	beq.n	8000a36 <Game_Start+0xb2>
        	    end_time = HAL_GetTick();
 80009be:	f002 fbe1 	bl	8003184 <HAL_GetTick>
 80009c2:	4603      	mov	r3, r0
 80009c4:	4a67      	ldr	r2, [pc, #412]	@ (8000b64 <Game_Start+0x1e0>)
 80009c6:	6013      	str	r3, [r2, #0]
        	    char game_time[4] = {'\0'};
 80009c8:	2300      	movs	r3, #0
 80009ca:	607b      	str	r3, [r7, #4]
        	    if(end_time < start_time){
 80009cc:	4b65      	ldr	r3, [pc, #404]	@ (8000b64 <Game_Start+0x1e0>)
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	4b61      	ldr	r3, [pc, #388]	@ (8000b58 <Game_Start+0x1d4>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	429a      	cmp	r2, r3
 80009d6:	d217      	bcs.n	8000a08 <Game_Start+0x84>
        	    	elapsed_time = (0xFFFFFFFF - start_time)+end_time;
 80009d8:	4b62      	ldr	r3, [pc, #392]	@ (8000b64 <Game_Start+0x1e0>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	4b5e      	ldr	r3, [pc, #376]	@ (8000b58 <Game_Start+0x1d4>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	3b01      	subs	r3, #1
 80009e4:	4a60      	ldr	r2, [pc, #384]	@ (8000b68 <Game_Start+0x1e4>)
 80009e6:	6013      	str	r3, [r2, #0]
        	    	sprintf(game_time, "%d", elapsed_time/1000);
 80009e8:	4b5f      	ldr	r3, [pc, #380]	@ (8000b68 <Game_Start+0x1e4>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a5f      	ldr	r2, [pc, #380]	@ (8000b6c <Game_Start+0x1e8>)
 80009ee:	fba2 2303 	umull	r2, r3, r2, r3
 80009f2:	099a      	lsrs	r2, r3, #6
 80009f4:	1d3b      	adds	r3, r7, #4
 80009f6:	495e      	ldr	r1, [pc, #376]	@ (8000b70 <Game_Start+0x1ec>)
 80009f8:	4618      	mov	r0, r3
 80009fa:	f006 f83f 	bl	8006a7c <siprintf>
        	    	ResultScreen(game_time);
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	4618      	mov	r0, r3
 8000a02:	f000 fbfb 	bl	80011fc <ResultScreen>
 8000a06:	e0a3      	b.n	8000b50 <Game_Start+0x1cc>
        	    } else {
        	    	elapsed_time = end_time - start_time;
 8000a08:	4b56      	ldr	r3, [pc, #344]	@ (8000b64 <Game_Start+0x1e0>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b52      	ldr	r3, [pc, #328]	@ (8000b58 <Game_Start+0x1d4>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	4a55      	ldr	r2, [pc, #340]	@ (8000b68 <Game_Start+0x1e4>)
 8000a14:	6013      	str	r3, [r2, #0]
        	    	sprintf(game_time, "%d", elapsed_time/1000);
 8000a16:	4b54      	ldr	r3, [pc, #336]	@ (8000b68 <Game_Start+0x1e4>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a54      	ldr	r2, [pc, #336]	@ (8000b6c <Game_Start+0x1e8>)
 8000a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a20:	099a      	lsrs	r2, r3, #6
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	4952      	ldr	r1, [pc, #328]	@ (8000b70 <Game_Start+0x1ec>)
 8000a26:	4618      	mov	r0, r3
 8000a28:	f006 f828 	bl	8006a7c <siprintf>
        	    	ResultScreen(game_time);
 8000a2c:	1d3b      	adds	r3, r7, #4
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f000 fbe4 	bl	80011fc <ResultScreen>
 8000a34:	e08c      	b.n	8000b50 <Game_Start+0x1cc>
    	for(int i =0; i < 10; i++){
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	60fb      	str	r3, [r7, #12]
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	2b09      	cmp	r3, #9
 8000a40:	ddb7      	ble.n	80009b2 <Game_Start+0x2e>
        	}

    	}


		if (Game_CheckCollision()) {
 8000a42:	f7ff ff3d 	bl	80008c0 <Game_CheckCollision>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d034      	beq.n	8000ab6 <Game_Start+0x132>
			Game_PlaceBlock(currentGrid);
 8000a4c:	4844      	ldr	r0, [pc, #272]	@ (8000b60 <Game_Start+0x1dc>)
 8000a4e:	f7ff fe21 	bl	8000694 <Game_PlaceBlock>
			memcpy(nextGrid, currentGrid, sizeof(currentGrid));
 8000a52:	4a42      	ldr	r2, [pc, #264]	@ (8000b5c <Game_Start+0x1d8>)
 8000a54:	4b42      	ldr	r3, [pc, #264]	@ (8000b60 <Game_Start+0x1dc>)
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000a5e:	461a      	mov	r2, r3
 8000a60:	f006 f97f 	bl	8006d62 <memcpy>
			locationY = 0;
 8000a64:	4b43      	ldr	r3, [pc, #268]	@ (8000b74 <Game_Start+0x1f0>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	701a      	strb	r2, [r3, #0]
			currentRot = 0;
 8000a6a:	4b43      	ldr	r3, [pc, #268]	@ (8000b78 <Game_Start+0x1f4>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	701a      	strb	r2, [r3, #0]
			Game_GenerateBlock();
 8000a70:	f7ff fe6c 	bl	800074c <Game_GenerateBlock>
			if (Game_CheckCollision()) {
 8000a74:	f7ff ff24 	bl	80008c0 <Game_CheckCollision>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d014      	beq.n	8000aa8 <Game_Start+0x124>
				Game_PlaceBlock(currentGrid);
 8000a7e:	4838      	ldr	r0, [pc, #224]	@ (8000b60 <Game_Start+0x1dc>)
 8000a80:	f7ff fe08 	bl	8000694 <Game_PlaceBlock>
				Draw_Grid(currentGrid);
 8000a84:	4836      	ldr	r0, [pc, #216]	@ (8000b60 <Game_Start+0x1dc>)
 8000a86:	f000 fa51 	bl	8000f2c <Draw_Grid>
				break;
 8000a8a:	bf00      	nop
				Draw_Grid(nextGrid);
			}
		}
		HAL_Delay(1000);
    }
    end_time = HAL_GetTick();
 8000a8c:	f002 fb7a 	bl	8003184 <HAL_GetTick>
 8000a90:	4603      	mov	r3, r0
 8000a92:	4a34      	ldr	r2, [pc, #208]	@ (8000b64 <Game_Start+0x1e0>)
 8000a94:	6013      	str	r3, [r2, #0]

    char game_time[4] = {'\0'};
 8000a96:	2300      	movs	r3, #0
 8000a98:	60bb      	str	r3, [r7, #8]
    if(end_time < start_time){
 8000a9a:	4b32      	ldr	r3, [pc, #200]	@ (8000b64 <Game_Start+0x1e0>)
 8000a9c:	681a      	ldr	r2, [r3, #0]
 8000a9e:	4b2e      	ldr	r3, [pc, #184]	@ (8000b58 <Game_Start+0x1d4>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	429a      	cmp	r2, r3
 8000aa4:	d23c      	bcs.n	8000b20 <Game_Start+0x19c>
 8000aa6:	e021      	b.n	8000aec <Game_Start+0x168>
				Game_PlaceBlock(nextGrid);
 8000aa8:	482c      	ldr	r0, [pc, #176]	@ (8000b5c <Game_Start+0x1d8>)
 8000aaa:	f7ff fdf3 	bl	8000694 <Game_PlaceBlock>
				Draw_Grid(nextGrid);
 8000aae:	482b      	ldr	r0, [pc, #172]	@ (8000b5c <Game_Start+0x1d8>)
 8000ab0:	f000 fa3c 	bl	8000f2c <Draw_Grid>
 8000ab4:	e015      	b.n	8000ae2 <Game_Start+0x15e>
			memcpy(nextGrid, currentGrid, sizeof(currentGrid));
 8000ab6:	4a29      	ldr	r2, [pc, #164]	@ (8000b5c <Game_Start+0x1d8>)
 8000ab8:	4b29      	ldr	r3, [pc, #164]	@ (8000b60 <Game_Start+0x1dc>)
 8000aba:	4610      	mov	r0, r2
 8000abc:	4619      	mov	r1, r3
 8000abe:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ac2:	461a      	mov	r2, r3
 8000ac4:	f006 f94d 	bl	8006d62 <memcpy>
			Game_BlockMoveDown();
 8000ac8:	f7ff fed0 	bl	800086c <Game_BlockMoveDown>
			if (!Game_CheckCollision()) {
 8000acc:	f7ff fef8 	bl	80008c0 <Game_CheckCollision>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f083 0301 	eor.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d002      	beq.n	8000ae2 <Game_Start+0x15e>
				Draw_Grid(nextGrid);
 8000adc:	481f      	ldr	r0, [pc, #124]	@ (8000b5c <Game_Start+0x1d8>)
 8000ade:	f000 fa25 	bl	8000f2c <Draw_Grid>
		HAL_Delay(1000);
 8000ae2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ae6:	f002 fb59 	bl	800319c <HAL_Delay>
    	for(int i =0; i < 10; i++){
 8000aea:	e75f      	b.n	80009ac <Game_Start+0x28>
    	elapsed_time = (0xFFFFFFFF - start_time)+end_time;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	@ (8000b64 <Game_Start+0x1e0>)
 8000aee:	681a      	ldr	r2, [r3, #0]
 8000af0:	4b19      	ldr	r3, [pc, #100]	@ (8000b58 <Game_Start+0x1d4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	1ad3      	subs	r3, r2, r3
 8000af6:	3b01      	subs	r3, #1
 8000af8:	4a1b      	ldr	r2, [pc, #108]	@ (8000b68 <Game_Start+0x1e4>)
 8000afa:	6013      	str	r3, [r2, #0]
    	sprintf(game_time, "%d", elapsed_time/1000);
 8000afc:	4b1a      	ldr	r3, [pc, #104]	@ (8000b68 <Game_Start+0x1e4>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a1a      	ldr	r2, [pc, #104]	@ (8000b6c <Game_Start+0x1e8>)
 8000b02:	fba2 2303 	umull	r2, r3, r2, r3
 8000b06:	099a      	lsrs	r2, r3, #6
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	4918      	ldr	r1, [pc, #96]	@ (8000b70 <Game_Start+0x1ec>)
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f005 ffb4 	bl	8006a7c <siprintf>
    	ResultScreen(game_time);
 8000b14:	f107 0308 	add.w	r3, r7, #8
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f000 fb6f 	bl	80011fc <ResultScreen>
 8000b1e:	e017      	b.n	8000b50 <Game_Start+0x1cc>
    } else {
    	elapsed_time = end_time - start_time;
 8000b20:	4b10      	ldr	r3, [pc, #64]	@ (8000b64 <Game_Start+0x1e0>)
 8000b22:	681a      	ldr	r2, [r3, #0]
 8000b24:	4b0c      	ldr	r3, [pc, #48]	@ (8000b58 <Game_Start+0x1d4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8000b68 <Game_Start+0x1e4>)
 8000b2c:	6013      	str	r3, [r2, #0]
    	sprintf(game_time, "%d", elapsed_time/1000);
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <Game_Start+0x1e4>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <Game_Start+0x1e8>)
 8000b34:	fba2 2303 	umull	r2, r3, r2, r3
 8000b38:	099a      	lsrs	r2, r3, #6
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	490c      	ldr	r1, [pc, #48]	@ (8000b70 <Game_Start+0x1ec>)
 8000b40:	4618      	mov	r0, r3
 8000b42:	f005 ff9b 	bl	8006a7c <siprintf>
    	ResultScreen(game_time);
 8000b46:	f107 0308 	add.w	r3, r7, #8
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fb56 	bl	80011fc <ResultScreen>
    }
}
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	2000190c 	.word	0x2000190c
 8000b5c:	20000ea4 	.word	0x20000ea4
 8000b60:	200011c4 	.word	0x200011c4
 8000b64:	20001910 	.word	0x20001910
 8000b68:	20001914 	.word	0x20001914
 8000b6c:	10624dd3 	.word	0x10624dd3
 8000b70:	08007b28 	.word	0x08007b28
 8000b74:	20001804 	.word	0x20001804
 8000b78:	20001805 	.word	0x20001805

08000b7c <LCD_GPIO_Init>:
//Someone from STM said it was "often accessed" a 1-dim array, and not a 2d array. However you still access it like a 2dim array,  using fb[y*W+x] instead of fb[y][x].
uint16_t frameBuffer[LCD_PIXEL_WIDTH*LCD_PIXEL_HEIGHT] = {0};			//16bpp pixel format.


void LCD_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08c      	sub	sp, #48	@ 0x30
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b8a:	4a59      	ldr	r2, [pc, #356]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000b8c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b92:	4b57      	ldr	r3, [pc, #348]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000b9a:	61bb      	str	r3, [r7, #24]
 8000b9c:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIO clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	4b53      	ldr	r3, [pc, #332]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a52      	ldr	r2, [pc, #328]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b50      	ldr	r3, [pc, #320]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	617b      	str	r3, [r7, #20]
 8000bb8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a4b      	ldr	r2, [pc, #300]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b49      	ldr	r3, [pc, #292]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	613b      	str	r3, [r7, #16]
 8000bd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	4b45      	ldr	r3, [pc, #276]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a44      	ldr	r2, [pc, #272]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b42      	ldr	r3, [pc, #264]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	4b3e      	ldr	r3, [pc, #248]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfa:	4a3d      	ldr	r2, [pc, #244]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000bfc:	f043 0308 	orr.w	r3, r3, #8
 8000c00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c02:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c06:	f003 0308 	and.w	r3, r3, #8
 8000c0a:	60bb      	str	r3, [r7, #8]
 8000c0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c0e:	2300      	movs	r3, #0
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	4b37      	ldr	r3, [pc, #220]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c16:	4a36      	ldr	r2, [pc, #216]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c18:	f043 0320 	orr.w	r3, r3, #32
 8000c1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c1e:	4b34      	ldr	r3, [pc, #208]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	f003 0320 	and.w	r3, r3, #32
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
 8000c2e:	4b30      	ldr	r3, [pc, #192]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c32:	4a2f      	ldr	r2, [pc, #188]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c34:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c3a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf0 <LCD_GPIO_Init+0x174>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000c42:	603b      	str	r3, [r7, #0]
 8000c44:	683b      	ldr	r3, [r7, #0]

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 8000c46:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000c4a:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8000c54:	2302      	movs	r3, #2
 8000c56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 8000c58:	230e      	movs	r3, #14
 8000c5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000c5c:	f107 031c 	add.w	r3, r7, #28
 8000c60:	4619      	mov	r1, r3
 8000c62:	4824      	ldr	r0, [pc, #144]	@ (8000cf4 <LCD_GPIO_Init+0x178>)
 8000c64:	f002 fc02 	bl	800346c <HAL_GPIO_Init>

 /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8000c68:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000c6c:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4820      	ldr	r0, [pc, #128]	@ (8000cf8 <LCD_GPIO_Init+0x17c>)
 8000c76:	f002 fbf9 	bl	800346c <HAL_GPIO_Init>

 /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8000c7a:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000c7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8000c80:	f107 031c 	add.w	r3, r7, #28
 8000c84:	4619      	mov	r1, r3
 8000c86:	481d      	ldr	r0, [pc, #116]	@ (8000cfc <LCD_GPIO_Init+0x180>)
 8000c88:	f002 fbf0 	bl	800346c <HAL_GPIO_Init>

 /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8000c8c:	2348      	movs	r3, #72	@ 0x48
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	481a      	ldr	r0, [pc, #104]	@ (8000d00 <LCD_GPIO_Init+0x184>)
 8000c98:	f002 fbe8 	bl	800346c <HAL_GPIO_Init>

 /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8000c9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ca0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8000ca2:	f107 031c 	add.w	r3, r7, #28
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	4816      	ldr	r0, [pc, #88]	@ (8000d04 <LCD_GPIO_Init+0x188>)
 8000caa:	f002 fbdf 	bl	800346c <HAL_GPIO_Init>

 /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 8000cae:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000cb2:	61fb      	str	r3, [r7, #28]
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4813      	ldr	r0, [pc, #76]	@ (8000d08 <LCD_GPIO_Init+0x18c>)
 8000cbc:	f002 fbd6 	bl	800346c <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 8000cc0:	2303      	movs	r3, #3
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 8000cc4:	2309      	movs	r3, #9
 8000cc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8000cc8:	f107 031c 	add.w	r3, r7, #28
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <LCD_GPIO_Init+0x17c>)
 8000cd0:	f002 fbcc 	bl	800346c <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 8000cd4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000cd8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8000cda:	f107 031c 	add.w	r3, r7, #28
 8000cde:	4619      	mov	r1, r3
 8000ce0:	4809      	ldr	r0, [pc, #36]	@ (8000d08 <LCD_GPIO_Init+0x18c>)
 8000ce2:	f002 fbc3 	bl	800346c <HAL_GPIO_Init>
}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	@ 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40020000 	.word	0x40020000
 8000cf8:	40020400 	.word	0x40020400
 8000cfc:	40020800 	.word	0x40020800
 8000d00:	40020c00 	.word	0x40020c00
 8000d04:	40021400 	.word	0x40021400
 8000d08:	40021800 	.word	0x40021800

08000d0c <LTCD_Layer_Init>:

void LTCD_Layer_Init(uint8_t LayerIndex)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b090      	sub	sp, #64	@ 0x40
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	71fb      	strb	r3, [r7, #7]
	LTDC_LayerCfgTypeDef  pLayerCfg;

	pLayerCfg.WindowX0 = 0;	//Configures the Window HORZ START Position.
 8000d16:	2300      	movs	r3, #0
 8000d18:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowX1 = LCD_PIXEL_WIDTH;	//Configures the Window HORZ Stop Position.
 8000d1a:	23f0      	movs	r3, #240	@ 0xf0
 8000d1c:	613b      	str	r3, [r7, #16]
	pLayerCfg.WindowY0 = 0;	//Configures the Window vertical START Position.
 8000d1e:	2300      	movs	r3, #0
 8000d20:	617b      	str	r3, [r7, #20]
	pLayerCfg.WindowY1 = LCD_PIXEL_HEIGHT;	//Configures the Window vertical Stop Position.
 8000d22:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d26:	61bb      	str	r3, [r7, #24]
	pLayerCfg.PixelFormat = LCD_PIXEL_FORMAT_1;  //INCORRECT PIXEL FORMAT WILL GIVE WEIRD RESULTS!! IT MAY STILL WORK FOR 1/2 THE DISPLAY!!! //This is our buffers pixel format. 2 bytes for each pixel
 8000d28:	2302      	movs	r3, #2
 8000d2a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.Alpha = 255;
 8000d2c:	23ff      	movs	r3, #255	@ 0xff
 8000d2e:	623b      	str	r3, [r7, #32]
	pLayerCfg.Alpha0 = 0;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	@ 0x24
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_CA;
 8000d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d38:	62bb      	str	r3, [r7, #40]	@ 0x28
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_CA;
 8000d3a:	2305      	movs	r3, #5
 8000d3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (LayerIndex == 0){
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <LTCD_Layer_Init+0x3c>
		pLayerCfg.FBStartAdress = (uintptr_t)frameBuffer;
 8000d44:	4b0f      	ldr	r3, [pc, #60]	@ (8000d84 <LTCD_Layer_Init+0x78>)
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
	}
	pLayerCfg.ImageWidth = LCD_PIXEL_WIDTH;
 8000d48:	23f0      	movs	r3, #240	@ 0xf0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
	pLayerCfg.ImageHeight = LCD_PIXEL_HEIGHT;
 8000d4c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000d50:	63bb      	str	r3, [r7, #56]	@ 0x38
	pLayerCfg.Backcolor.Blue = 0;
 8000d52:	2300      	movs	r3, #0
 8000d54:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
	pLayerCfg.Backcolor.Green = 0;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
	pLayerCfg.Backcolor.Red = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, LayerIndex) != HAL_OK)
 8000d64:	79fa      	ldrb	r2, [r7, #7]
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	4806      	ldr	r0, [pc, #24]	@ (8000d88 <LTCD_Layer_Init+0x7c>)
 8000d6e:	f003 ff43 	bl	8004bf8 <HAL_LTDC_ConfigLayer>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <LTCD_Layer_Init+0x70>
	{
		LCD_Error_Handler();
 8000d78:	f000 fb54 	bl	8001424 <LCD_Error_Handler>
	}
}
 8000d7c:	bf00      	nop
 8000d7e:	3740      	adds	r7, #64	@ 0x40
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	200019f4 	.word	0x200019f4
 8000d88:	20001918 	.word	0x20001918

08000d8c <LTCD__Init>:
{
  LCD_Clear(0,LCD_COLOR_WHITE);
}

void LTCD__Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	hltdc.Instance = LTDC;
 8000d90:	4b2a      	ldr	r3, [pc, #168]	@ (8000e3c <LTCD__Init+0xb0>)
 8000d92:	4a2b      	ldr	r2, [pc, #172]	@ (8000e40 <LTCD__Init+0xb4>)
 8000d94:	601a      	str	r2, [r3, #0]
	/* Configure horizontal synchronization width */
	hltdc.Init.HorizontalSync = ILI9341_HSYNC;
 8000d96:	4b29      	ldr	r3, [pc, #164]	@ (8000e3c <LTCD__Init+0xb0>)
 8000d98:	2209      	movs	r2, #9
 8000d9a:	615a      	str	r2, [r3, #20]
	/* Configure vertical synchronization height */
	hltdc.Init.VerticalSync = ILI9341_VSYNC;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	@ (8000e3c <LTCD__Init+0xb0>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	619a      	str	r2, [r3, #24]
	/* Configure accumulated horizontal back porch */
	hltdc.Init.AccumulatedHBP = ILI9341_HBP;
 8000da2:	4b26      	ldr	r3, [pc, #152]	@ (8000e3c <LTCD__Init+0xb0>)
 8000da4:	221d      	movs	r2, #29
 8000da6:	61da      	str	r2, [r3, #28]
	/* Configure accumulated vertical back porch */
	hltdc.Init.AccumulatedVBP = ILI9341_VBP;
 8000da8:	4b24      	ldr	r3, [pc, #144]	@ (8000e3c <LTCD__Init+0xb0>)
 8000daa:	2203      	movs	r2, #3
 8000dac:	621a      	str	r2, [r3, #32]
	/* Configure accumulated active width */
	hltdc.Init.AccumulatedActiveW = 269;
 8000dae:	4b23      	ldr	r3, [pc, #140]	@ (8000e3c <LTCD__Init+0xb0>)
 8000db0:	f240 120d 	movw	r2, #269	@ 0x10d
 8000db4:	625a      	str	r2, [r3, #36]	@ 0x24
	/* Configure accumulated active height */
	hltdc.Init.AccumulatedActiveH = 323;
 8000db6:	4b21      	ldr	r3, [pc, #132]	@ (8000e3c <LTCD__Init+0xb0>)
 8000db8:	f240 1243 	movw	r2, #323	@ 0x143
 8000dbc:	629a      	str	r2, [r3, #40]	@ 0x28
	/* Configure total width */
	hltdc.Init.TotalWidth = 279;
 8000dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000e3c <LTCD__Init+0xb0>)
 8000dc0:	f240 1217 	movw	r2, #279	@ 0x117
 8000dc4:	62da      	str	r2, [r3, #44]	@ 0x2c
	/* Configure total height */
	hltdc.Init.TotalHeigh = 327;
 8000dc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e3c <LTCD__Init+0xb0>)
 8000dc8:	f240 1247 	movw	r2, #327	@ 0x147
 8000dcc:	631a      	str	r2, [r3, #48]	@ 0x30
	/* Configure R,G,B component values for LCD background color */
	hltdc.Init.Backcolor.Red = 0;
 8000dce:	4b1b      	ldr	r3, [pc, #108]	@ (8000e3c <LTCD__Init+0xb0>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
	hltdc.Init.Backcolor.Blue = 0;
 8000dd6:	4b19      	ldr	r3, [pc, #100]	@ (8000e3c <LTCD__Init+0xb0>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	hltdc.Init.Backcolor.Green = 0;
 8000dde:	4b17      	ldr	r3, [pc, #92]	@ (8000e3c <LTCD__Init+0xb0>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000de6:	4b17      	ldr	r3, [pc, #92]	@ (8000e44 <LTCD__Init+0xb8>)
 8000de8:	2208      	movs	r2, #8
 8000dea:	601a      	str	r2, [r3, #0]
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <LTCD__Init+0xb8>)
 8000dee:	22c0      	movs	r2, #192	@ 0xc0
 8000df0:	611a      	str	r2, [r3, #16]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8000df2:	4b14      	ldr	r3, [pc, #80]	@ (8000e44 <LTCD__Init+0xb8>)
 8000df4:	2204      	movs	r2, #4
 8000df6:	619a      	str	r2, [r3, #24]
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000df8:	4b12      	ldr	r3, [pc, #72]	@ (8000e44 <LTCD__Init+0xb8>)
 8000dfa:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000dfe:	625a      	str	r2, [r3, #36]	@ 0x24
	HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8000e00:	4810      	ldr	r0, [pc, #64]	@ (8000e44 <LTCD__Init+0xb8>)
 8000e02:	f004 fd53 	bl	80058ac <HAL_RCCEx_PeriphCLKConfig>
	/* Polarity */
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000e06:	4b0d      	ldr	r3, [pc, #52]	@ (8000e3c <LTCD__Init+0xb0>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000e0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000e3c <LTCD__Init+0xb0>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e12:	4b0a      	ldr	r3, [pc, #40]	@ (8000e3c <LTCD__Init+0xb0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000e18:	4b08      	ldr	r3, [pc, #32]	@ (8000e3c <LTCD__Init+0xb0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]

	LCD_GPIO_Init();
 8000e1e:	f7ff fead 	bl	8000b7c <LCD_GPIO_Init>

	if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e22:	4806      	ldr	r0, [pc, #24]	@ (8000e3c <LTCD__Init+0xb0>)
 8000e24:	f003 fe18 	bl	8004a58 <HAL_LTDC_Init>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <LTCD__Init+0xa6>
	 {
	   LCD_Error_Handler();
 8000e2e:	f000 faf9 	bl	8001424 <LCD_Error_Handler>
	 }

	ili9341_Init();
 8000e32:	f000 fff1 	bl	8001e18 <ili9341_Init>
}
 8000e36:	bf00      	nop
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20001918 	.word	0x20001918
 8000e40:	40016800 	.word	0x40016800
 8000e44:	200019c0 	.word	0x200019c0

08000e48 <LCD_Draw_Pixel>:

void LCD_Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	80fb      	strh	r3, [r7, #6]
 8000e52:	460b      	mov	r3, r1
 8000e54:	80bb      	strh	r3, [r7, #4]
 8000e56:	4613      	mov	r3, r2
 8000e58:	807b      	strh	r3, [r7, #2]
	if (x<0 || x>239 || y<0 || y> 319){return;}
 8000e5a:	88fb      	ldrh	r3, [r7, #6]
 8000e5c:	2bef      	cmp	r3, #239	@ 0xef
 8000e5e:	d810      	bhi.n	8000e82 <LCD_Draw_Pixel+0x3a>
 8000e60:	88bb      	ldrh	r3, [r7, #4]
 8000e62:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000e66:	d20c      	bcs.n	8000e82 <LCD_Draw_Pixel+0x3a>
	frameBuffer[y*LCD_PIXEL_WIDTH+x] = color;
 8000e68:	88ba      	ldrh	r2, [r7, #4]
 8000e6a:	4613      	mov	r3, r2
 8000e6c:	011b      	lsls	r3, r3, #4
 8000e6e:	1a9b      	subs	r3, r3, r2
 8000e70:	011b      	lsls	r3, r3, #4
 8000e72:	461a      	mov	r2, r3
 8000e74:	88fb      	ldrh	r3, [r7, #6]
 8000e76:	4413      	add	r3, r2
 8000e78:	4905      	ldr	r1, [pc, #20]	@ (8000e90 <LCD_Draw_Pixel+0x48>)
 8000e7a:	887a      	ldrh	r2, [r7, #2]
 8000e7c:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8000e80:	e000      	b.n	8000e84 <LCD_Draw_Pixel+0x3c>
	if (x<0 || x>239 || y<0 || y> 319){return;}
 8000e82:	bf00      	nop
}
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	200019f4 	.word	0x200019f4

08000e94 <LCD_Draw_Block>:
            }
        }
    }
}

void LCD_Draw_Block(uint16_t Xpos, uint16_t Ypos, uint16_t Color){
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	807b      	strh	r3, [r7, #2]
	for(int y =Ypos; y<=Ypos+32; y++){
 8000ea6:	88bb      	ldrh	r3, [r7, #4]
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	e009      	b.n	8000ec0 <LCD_Draw_Block+0x2c>
		LCD_Draw_Horizontal_Line(Xpos,y,24, Color);
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	b299      	uxth	r1, r3
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	88f8      	ldrh	r0, [r7, #6]
 8000eb4:	2218      	movs	r2, #24
 8000eb6:	f000 f8a8 	bl	800100a <LCD_Draw_Horizontal_Line>
	for(int y =Ypos; y<=Ypos+32; y++){
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	88bb      	ldrh	r3, [r7, #4]
 8000ec2:	3320      	adds	r3, #32
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	ddf0      	ble.n	8000eac <LCD_Draw_Block+0x18>
	}
}
 8000eca:	bf00      	nop
 8000ecc:	bf00      	nop
 8000ece:	3710      	adds	r7, #16
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <DrawGrid>:


void DrawGrid(){
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
	for(int x =0; x<=240; x+=24){
 8000eda:	2300      	movs	r3, #0
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	e00b      	b.n	8000ef8 <DrawGrid+0x24>
		LCD_Draw_Vertical_Line(x,0,320,LCD_COLOR_WHITE);
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	b298      	uxth	r0, r3
 8000ee4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ee8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000eec:	2100      	movs	r1, #0
 8000eee:	f000 f865 	bl	8000fbc <LCD_Draw_Vertical_Line>
	for(int x =0; x<=240; x+=24){
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3318      	adds	r3, #24
 8000ef6:	607b      	str	r3, [r7, #4]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2bf0      	cmp	r3, #240	@ 0xf0
 8000efc:	ddf0      	ble.n	8000ee0 <DrawGrid+0xc>
	}
	for(int y =0; y<=320; y+=32){
 8000efe:	2300      	movs	r3, #0
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	e00a      	b.n	8000f1a <DrawGrid+0x46>
		LCD_Draw_Horizontal_Line(0,y,240,LCD_COLOR_WHITE);
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	b299      	uxth	r1, r3
 8000f08:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f0c:	22f0      	movs	r2, #240	@ 0xf0
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f000 f87b 	bl	800100a <LCD_Draw_Horizontal_Line>
	for(int y =0; y<=320; y+=32){
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	3320      	adds	r3, #32
 8000f18:	603b      	str	r3, [r7, #0]
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000f20:	ddf0      	ble.n	8000f04 <DrawGrid+0x30>
	}
}
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
 8000f26:	3708      	adds	r7, #8
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <Draw_Grid>:


void Draw_Grid(uint32_t currentGrid[10][10][2]){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
	LCD_Clear(0,LCD_COLOR_BLACK);
 8000f34:	2100      	movs	r1, #0
 8000f36:	2000      	movs	r0, #0
 8000f38:	f000 f88e 	bl	8001058 <LCD_Clear>
	for(int y =0; y<10; y++){
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	e033      	b.n	8000faa <Draw_Grid+0x7e>
		for(int x = 0; x<10; x++){
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	e02a      	b.n	8000f9e <Draw_Grid+0x72>
			if(currentGrid[y][x][0]){
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	011b      	lsls	r3, r3, #4
 8000f52:	461a      	mov	r2, r3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	68ba      	ldr	r2, [r7, #8]
 8000f5a:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d01a      	beq.n	8000f98 <Draw_Grid+0x6c>
				LCD_Draw_Block(x*24, y*32, currentGrid[y][x][1]);
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	b29b      	uxth	r3, r3
 8000f66:	461a      	mov	r2, r3
 8000f68:	0052      	lsls	r2, r2, #1
 8000f6a:	4413      	add	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	b298      	uxth	r0, r3
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	b29b      	uxth	r3, r3
 8000f74:	015b      	lsls	r3, r3, #5
 8000f76:	b299      	uxth	r1, r3
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	461a      	mov	r2, r3
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	441a      	add	r2, r3
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	4413      	add	r3, r2
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	461a      	mov	r2, r3
 8000f94:	f7ff ff7e 	bl	8000e94 <LCD_Draw_Block>
		for(int x = 0; x<10; x++){
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3301      	adds	r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
 8000fa0:	2b09      	cmp	r3, #9
 8000fa2:	ddd1      	ble.n	8000f48 <Draw_Grid+0x1c>
	for(int y =0; y<10; y++){
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	60fb      	str	r3, [r7, #12]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	2b09      	cmp	r3, #9
 8000fae:	ddc8      	ble.n	8000f42 <Draw_Grid+0x16>
			}
		}
	}
	DrawGrid();
 8000fb0:	f7ff ff90 	bl	8000ed4 <DrawGrid>
}
 8000fb4:	bf00      	nop
 8000fb6:	3710      	adds	r7, #16
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <LCD_Draw_Vertical_Line>:


void LCD_Draw_Vertical_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4623      	mov	r3, r4
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8000fda:	2300      	movs	r3, #0
 8000fdc:	81fb      	strh	r3, [r7, #14]
 8000fde:	e00b      	b.n	8000ff8 <LCD_Draw_Vertical_Line+0x3c>
  {
	  LCD_Draw_Pixel(x, i+y, color);
 8000fe0:	89fa      	ldrh	r2, [r7, #14]
 8000fe2:	88bb      	ldrh	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	b299      	uxth	r1, r3
 8000fe8:	883a      	ldrh	r2, [r7, #0]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff2b 	bl	8000e48 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8000ff2:	89fb      	ldrh	r3, [r7, #14]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	81fb      	strh	r3, [r7, #14]
 8000ff8:	89fa      	ldrh	r2, [r7, #14]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	429a      	cmp	r2, r3
 8000ffe:	d3ef      	bcc.n	8000fe0 <LCD_Draw_Vertical_Line+0x24>
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3714      	adds	r7, #20
 8001006:	46bd      	mov	sp, r7
 8001008:	bd90      	pop	{r4, r7, pc}

0800100a <LCD_Draw_Horizontal_Line>:

void LCD_Draw_Horizontal_Line(uint16_t x, uint16_t y, uint16_t len, uint16_t color)
{
 800100a:	b590      	push	{r4, r7, lr}
 800100c:	b085      	sub	sp, #20
 800100e:	af00      	add	r7, sp, #0
 8001010:	4604      	mov	r4, r0
 8001012:	4608      	mov	r0, r1
 8001014:	4611      	mov	r1, r2
 8001016:	461a      	mov	r2, r3
 8001018:	4623      	mov	r3, r4
 800101a:	80fb      	strh	r3, [r7, #6]
 800101c:	4603      	mov	r3, r0
 800101e:	80bb      	strh	r3, [r7, #4]
 8001020:	460b      	mov	r3, r1
 8001022:	807b      	strh	r3, [r7, #2]
 8001024:	4613      	mov	r3, r2
 8001026:	803b      	strh	r3, [r7, #0]
  for (uint16_t i = 0; i < len; i++)
 8001028:	2300      	movs	r3, #0
 800102a:	81fb      	strh	r3, [r7, #14]
 800102c:	e00b      	b.n	8001046 <LCD_Draw_Horizontal_Line+0x3c>
  {
	  LCD_Draw_Pixel(i+x, y, color);
 800102e:	89fa      	ldrh	r2, [r7, #14]
 8001030:	88fb      	ldrh	r3, [r7, #6]
 8001032:	4413      	add	r3, r2
 8001034:	b29b      	uxth	r3, r3
 8001036:	883a      	ldrh	r2, [r7, #0]
 8001038:	88b9      	ldrh	r1, [r7, #4]
 800103a:	4618      	mov	r0, r3
 800103c:	f7ff ff04 	bl	8000e48 <LCD_Draw_Pixel>
  for (uint16_t i = 0; i < len; i++)
 8001040:	89fb      	ldrh	r3, [r7, #14]
 8001042:	3301      	adds	r3, #1
 8001044:	81fb      	strh	r3, [r7, #14]
 8001046:	89fa      	ldrh	r2, [r7, #14]
 8001048:	887b      	ldrh	r3, [r7, #2]
 800104a:	429a      	cmp	r2, r3
 800104c:	d3ef      	bcc.n	800102e <LCD_Draw_Horizontal_Line+0x24>
  }
}
 800104e:	bf00      	nop
 8001050:	bf00      	nop
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	bd90      	pop	{r4, r7, pc}

08001058 <LCD_Clear>:

void LCD_Clear(uint8_t LayerIndex, uint16_t Color)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	80bb      	strh	r3, [r7, #4]
	if (LayerIndex == 0){
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d10e      	bne.n	800108c <LCD_Clear+0x34>
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
 8001072:	e007      	b.n	8001084 <LCD_Clear+0x2c>
			frameBuffer[i] = Color;
 8001074:	4908      	ldr	r1, [pc, #32]	@ (8001098 <LCD_Clear+0x40>)
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	88ba      	ldrh	r2, [r7, #4]
 800107a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for (uint32_t i = 0; i < LCD_PIXEL_WIDTH * LCD_PIXEL_HEIGHT; i++){
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	3301      	adds	r3, #1
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	f5b3 3f96 	cmp.w	r3, #76800	@ 0x12c00
 800108a:	d3f3      	bcc.n	8001074 <LCD_Clear+0x1c>
		}
	}
  // TODO: Add more Layers if needed
}
 800108c:	bf00      	nop
 800108e:	3714      	adds	r7, #20
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	200019f4 	.word	0x200019f4

0800109c <LCD_SetTextColor>:

//This was taken and adapted from stm32's mcu code
void LCD_SetTextColor(uint16_t Color)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	80fb      	strh	r3, [r7, #6]
  CurrentTextColor = Color;
 80010a6:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <LCD_SetTextColor+0x1c>)
 80010a8:	88fb      	ldrh	r3, [r7, #6]
 80010aa:	8013      	strh	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	20000e02 	.word	0x20000e02

080010bc <LCD_SetFont>:

//This was taken and adapted from stm32's mcu code
void LCD_SetFont(FONT_t *fonts)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  LCD_Currentfonts = fonts;
 80010c4:	4a04      	ldr	r2, [pc, #16]	@ (80010d8 <LCD_SetFont+0x1c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	200019f0 	.word	0x200019f0

080010dc <LCD_Draw_Char>:

//This was taken and adapted from stm32's mcu code
void LCD_Draw_Char(uint16_t Xpos, uint16_t Ypos, const uint16_t *c)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	603a      	str	r2, [r7, #0]
 80010e6:	80fb      	strh	r3, [r7, #6]
 80010e8:	460b      	mov	r3, r1
 80010ea:	80bb      	strh	r3, [r7, #4]
  uint32_t index = 0, counter = 0;
 80010ec:	2300      	movs	r3, #0
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	2300      	movs	r3, #0
 80010f2:	60bb      	str	r3, [r7, #8]
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	60fb      	str	r3, [r7, #12]
 80010f8:	e04c      	b.n	8001194 <LCD_Draw_Char+0xb8>
  {
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 80010fa:	2300      	movs	r3, #0
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	e03f      	b.n	8001180 <LCD_Draw_Char+0xa4>
    {
      if((((c[index] & ((0x80 << ((LCD_Currentfonts->Width / 12 ) * 8 ) ) >> counter)) == 0x00) && (LCD_Currentfonts->Width <= 12)) || (((c[index] & (0x1 << counter)) == 0x00)&&(LCD_Currentfonts->Width > 12 )))
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	005b      	lsls	r3, r3, #1
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	4619      	mov	r1, r3
 800110c:	4b27      	ldr	r3, [pc, #156]	@ (80011ac <LCD_Draw_Char+0xd0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	889b      	ldrh	r3, [r3, #4]
 8001112:	4a27      	ldr	r2, [pc, #156]	@ (80011b0 <LCD_Draw_Char+0xd4>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	b29b      	uxth	r3, r3
 800111c:	00db      	lsls	r3, r3, #3
 800111e:	2280      	movs	r2, #128	@ 0x80
 8001120:	409a      	lsls	r2, r3
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	fa42 f303 	asr.w	r3, r2, r3
 8001128:	400b      	ands	r3, r1
 800112a:	2b00      	cmp	r3, #0
 800112c:	d104      	bne.n	8001138 <LCD_Draw_Char+0x5c>
 800112e:	4b1f      	ldr	r3, [pc, #124]	@ (80011ac <LCD_Draw_Char+0xd0>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	889b      	ldrh	r3, [r3, #4]
 8001134:	2b0c      	cmp	r3, #12
 8001136:	d920      	bls.n	800117a <LCD_Draw_Char+0x9e>
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	005b      	lsls	r3, r3, #1
 800113c:	683a      	ldr	r2, [r7, #0]
 800113e:	4413      	add	r3, r2
 8001140:	881b      	ldrh	r3, [r3, #0]
 8001142:	461a      	mov	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	fa42 f303 	asr.w	r3, r2, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d104      	bne.n	800115c <LCD_Draw_Char+0x80>
 8001152:	4b16      	ldr	r3, [pc, #88]	@ (80011ac <LCD_Draw_Char+0xd0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	889b      	ldrh	r3, [r3, #4]
 8001158:	2b0c      	cmp	r3, #12
 800115a:	d80e      	bhi.n	800117a <LCD_Draw_Char+0x9e>
      {
         //Background If want to overrite text under then add a set color here
      }
      else
      {
    	  LCD_Draw_Pixel(counter + Xpos,index + Ypos,CurrentTextColor);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	b29a      	uxth	r2, r3
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	4413      	add	r3, r2
 8001164:	b298      	uxth	r0, r3
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	b29a      	uxth	r2, r3
 800116a:	88bb      	ldrh	r3, [r7, #4]
 800116c:	4413      	add	r3, r2
 800116e:	b29b      	uxth	r3, r3
 8001170:	4a10      	ldr	r2, [pc, #64]	@ (80011b4 <LCD_Draw_Char+0xd8>)
 8001172:	8812      	ldrh	r2, [r2, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fe67 	bl	8000e48 <LCD_Draw_Pixel>
    for(counter = 0; counter < LCD_Currentfonts->Width; counter++)
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	3301      	adds	r3, #1
 800117e:	60bb      	str	r3, [r7, #8]
 8001180:	4b0a      	ldr	r3, [pc, #40]	@ (80011ac <LCD_Draw_Char+0xd0>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	889b      	ldrh	r3, [r3, #4]
 8001186:	461a      	mov	r2, r3
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	4293      	cmp	r3, r2
 800118c:	d3b8      	bcc.n	8001100 <LCD_Draw_Char+0x24>
  for(index = 0; index < LCD_Currentfonts->Height; index++)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	3301      	adds	r3, #1
 8001192:	60fb      	str	r3, [r7, #12]
 8001194:	4b05      	ldr	r3, [pc, #20]	@ (80011ac <LCD_Draw_Char+0xd0>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4293      	cmp	r3, r2
 80011a0:	d3ab      	bcc.n	80010fa <LCD_Draw_Char+0x1e>
      }
    }
  }
}
 80011a2:	bf00      	nop
 80011a4:	bf00      	nop
 80011a6:	3710      	adds	r7, #16
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	200019f0 	.word	0x200019f0
 80011b0:	aaaaaaab 	.word	0xaaaaaaab
 80011b4:	20000e02 	.word	0x20000e02

080011b8 <LCD_DisplayChar>:


//This was taken and adapted from stm32's mcu code
void LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
 80011c2:	460b      	mov	r3, r1
 80011c4:	80bb      	strh	r3, [r7, #4]
 80011c6:	4613      	mov	r3, r2
 80011c8:	70fb      	strb	r3, [r7, #3]
  Ascii -= 32;
 80011ca:	78fb      	ldrb	r3, [r7, #3]
 80011cc:	3b20      	subs	r3, #32
 80011ce:	70fb      	strb	r3, [r7, #3]
  LCD_Draw_Char(Xpos, Ypos, &LCD_Currentfonts->table[Ascii * LCD_Currentfonts->Height]);
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <LCD_DisplayChar+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	78fb      	ldrb	r3, [r7, #3]
 80011d8:	4907      	ldr	r1, [pc, #28]	@ (80011f8 <LCD_DisplayChar+0x40>)
 80011da:	6809      	ldr	r1, [r1, #0]
 80011dc:	88c9      	ldrh	r1, [r1, #6]
 80011de:	fb01 f303 	mul.w	r3, r1, r3
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	441a      	add	r2, r3
 80011e6:	88b9      	ldrh	r1, [r7, #4]
 80011e8:	88fb      	ldrh	r3, [r7, #6]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f7ff ff76 	bl	80010dc <LCD_Draw_Char>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200019f0 	.word	0x200019f0

080011fc <ResultScreen>:
    {5, 96, 0, LCD_COLOR_GREEN, 1},  // Left S
    {6, 96, 0, LCD_COLOR_RED, 1},  // Right S
    {7, 96, 0, LCD_COLOR_TEAL, 1}   // I Shape
};

void ResultScreen(char game_time[4]){
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
	LCD_SetTextColor(LCD_COLOR_WHITE);
 8001204:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001208:	f7ff ff48 	bl	800109c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 800120c:	4834      	ldr	r0, [pc, #208]	@ (80012e0 <ResultScreen+0xe4>)
 800120e:	f7ff ff55 	bl	80010bc <LCD_SetFont>
	LCD_DisplayChar(90, 100, 'G');
 8001212:	2247      	movs	r2, #71	@ 0x47
 8001214:	2164      	movs	r1, #100	@ 0x64
 8001216:	205a      	movs	r0, #90	@ 0x5a
 8001218:	f7ff ffce 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(106, 100, 'A');
 800121c:	2241      	movs	r2, #65	@ 0x41
 800121e:	2164      	movs	r1, #100	@ 0x64
 8001220:	206a      	movs	r0, #106	@ 0x6a
 8001222:	f7ff ffc9 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(122, 100, 'M');
 8001226:	224d      	movs	r2, #77	@ 0x4d
 8001228:	2164      	movs	r1, #100	@ 0x64
 800122a:	207a      	movs	r0, #122	@ 0x7a
 800122c:	f7ff ffc4 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(138, 100, 'E');
 8001230:	2245      	movs	r2, #69	@ 0x45
 8001232:	2164      	movs	r1, #100	@ 0x64
 8001234:	208a      	movs	r0, #138	@ 0x8a
 8001236:	f7ff ffbf 	bl	80011b8 <LCD_DisplayChar>

	LCD_DisplayChar(90, 125, 'O');
 800123a:	224f      	movs	r2, #79	@ 0x4f
 800123c:	217d      	movs	r1, #125	@ 0x7d
 800123e:	205a      	movs	r0, #90	@ 0x5a
 8001240:	f7ff ffba 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(106, 125, 'V');
 8001244:	2256      	movs	r2, #86	@ 0x56
 8001246:	217d      	movs	r1, #125	@ 0x7d
 8001248:	206a      	movs	r0, #106	@ 0x6a
 800124a:	f7ff ffb5 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(122, 125, 'E');
 800124e:	2245      	movs	r2, #69	@ 0x45
 8001250:	217d      	movs	r1, #125	@ 0x7d
 8001252:	207a      	movs	r0, #122	@ 0x7a
 8001254:	f7ff ffb0 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(138, 125, 'R');
 8001258:	2252      	movs	r2, #82	@ 0x52
 800125a:	217d      	movs	r1, #125	@ 0x7d
 800125c:	208a      	movs	r0, #138	@ 0x8a
 800125e:	f7ff ffab 	bl	80011b8 <LCD_DisplayChar>

	int t = 74;
 8001262:	234a      	movs	r3, #74	@ 0x4a
 8001264:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<4; i++){
 8001266:	2300      	movs	r3, #0
 8001268:	60bb      	str	r3, [r7, #8]
 800126a:	e017      	b.n	800129c <ResultScreen+0xa0>
		if (game_time[i] == '\0'){
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d00d      	beq.n	8001294 <ResultScreen+0x98>
			continue;
		}else{
			LCD_DisplayChar(t, 150, game_time[i]);
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	b298      	uxth	r0, r3
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	2196      	movs	r1, #150	@ 0x96
 8001288:	f7ff ff96 	bl	80011b8 <LCD_DisplayChar>
			t+=16;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	3310      	adds	r3, #16
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e000      	b.n	8001296 <ResultScreen+0x9a>
			continue;
 8001294:	bf00      	nop
	for(int i=0; i<4; i++){
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3301      	adds	r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	2b03      	cmp	r3, #3
 80012a0:	dde4      	ble.n	800126c <ResultScreen+0x70>
		}
	}
	LCD_DisplayChar(t+16, 150, 'S');
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	3310      	adds	r3, #16
 80012a8:	b29b      	uxth	r3, r3
 80012aa:	2253      	movs	r2, #83	@ 0x53
 80012ac:	2196      	movs	r1, #150	@ 0x96
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff ff82 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(t+32, 150, 'e');
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	3320      	adds	r3, #32
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	2265      	movs	r2, #101	@ 0x65
 80012be:	2196      	movs	r1, #150	@ 0x96
 80012c0:	4618      	mov	r0, r3
 80012c2:	f7ff ff79 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(t+48, 150, 'c');
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	3330      	adds	r3, #48	@ 0x30
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	2263      	movs	r2, #99	@ 0x63
 80012d0:	2196      	movs	r1, #150	@ 0x96
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff ff70 	bl	80011b8 <LCD_DisplayChar>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	20000e04 	.word	0x20000e04

080012e4 <MainMenu>:

void MainMenu(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	LCD_SetTextColor(LCD_COLOR_WHITE);
 80012e8:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80012ec:	f7ff fed6 	bl	800109c <LCD_SetTextColor>
	LCD_SetFont(&Font16x24);
 80012f0:	484b      	ldr	r0, [pc, #300]	@ (8001420 <MainMenu+0x13c>)
 80012f2:	f7ff fee3 	bl	80010bc <LCD_SetFont>
//	DrawGrid();
	LCD_Clear(0,LCD_COLOR_BLACK);
 80012f6:	2100      	movs	r1, #0
 80012f8:	2000      	movs	r0, #0
 80012fa:	f7ff fead 	bl	8001058 <LCD_Clear>
	LCD_Draw_Left_L(120,0,LCD_COLOR_BLUE,0);
 80012fe:	2300      	movs	r3, #0
 8001300:	221f      	movs	r2, #31
 8001302:	2100      	movs	r1, #0
 8001304:	2078      	movs	r0, #120	@ 0x78
 8001306:	f000 f944 	bl	8001592 <LCD_Draw_Left_L>
	LCD_Draw_Right_L(72,96,LCD_COLOR_ORANGE,0);
 800130a:	2300      	movs	r3, #0
 800130c:	f64f 5220 	movw	r2, #64800	@ 0xfd20
 8001310:	2160      	movs	r1, #96	@ 0x60
 8001312:	2048      	movs	r0, #72	@ 0x48
 8001314:	f000 f9e3 	bl	80016de <LCD_Draw_Right_L>
	LCD_Draw_Square(96,192,LCD_COLOR_YELLOW,0);
 8001318:	2300      	movs	r3, #0
 800131a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 800131e:	21c0      	movs	r1, #192	@ 0xc0
 8001320:	2060      	movs	r0, #96	@ 0x60
 8001322:	f000 fa82 	bl	800182a <LCD_Draw_Square>
	LCD_Draw_T(24,0,LCD_COLOR_MAGENTA,0);
 8001326:	2300      	movs	r3, #0
 8001328:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 800132c:	2100      	movs	r1, #0
 800132e:	2018      	movs	r0, #24
 8001330:	f000 fb1d 	bl	800196e <LCD_Draw_T>
	LCD_Draw_Left_S(168, 96,LCD_COLOR_GREEN,0);
 8001334:	2300      	movs	r3, #0
 8001336:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800133a:	2160      	movs	r1, #96	@ 0x60
 800133c:	20a8      	movs	r0, #168	@ 0xa8
 800133e:	f000 fbbe 	bl	8001abe <LCD_Draw_Left_S>
	LCD_Draw_Right_S(24, 256, LCD_COLOR_RED,0);
 8001342:	2300      	movs	r3, #0
 8001344:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8001348:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800134c:	2018      	movs	r0, #24
 800134e:	f000 fc60 	bl	8001c12 <LCD_Draw_Right_S>
	LCD_Draw_I(144,288,LCD_COLOR_TEAL,0);
 8001352:	2300      	movs	r3, #0
 8001354:	f240 72fa 	movw	r2, #2042	@ 0x7fa
 8001358:	f44f 7190 	mov.w	r1, #288	@ 0x120
 800135c:	2090      	movs	r0, #144	@ 0x90
 800135e:	f000 f87e 	bl	800145e <LCD_Draw_I>

	LCD_DisplayChar(72, 70, 'T');
 8001362:	2254      	movs	r2, #84	@ 0x54
 8001364:	2146      	movs	r1, #70	@ 0x46
 8001366:	2048      	movs	r0, #72	@ 0x48
 8001368:	f7ff ff26 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(88, 70, 'E');
 800136c:	2245      	movs	r2, #69	@ 0x45
 800136e:	2146      	movs	r1, #70	@ 0x46
 8001370:	2058      	movs	r0, #88	@ 0x58
 8001372:	f7ff ff21 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(104, 70, 'T');
 8001376:	2254      	movs	r2, #84	@ 0x54
 8001378:	2146      	movs	r1, #70	@ 0x46
 800137a:	2068      	movs	r0, #104	@ 0x68
 800137c:	f7ff ff1c 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(120, 70, 'R');
 8001380:	2252      	movs	r2, #82	@ 0x52
 8001382:	2146      	movs	r1, #70	@ 0x46
 8001384:	2078      	movs	r0, #120	@ 0x78
 8001386:	f7ff ff17 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(132, 70, 'I');
 800138a:	2249      	movs	r2, #73	@ 0x49
 800138c:	2146      	movs	r1, #70	@ 0x46
 800138e:	2084      	movs	r0, #132	@ 0x84
 8001390:	f7ff ff12 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(144, 70, 'S');
 8001394:	2253      	movs	r2, #83	@ 0x53
 8001396:	2146      	movs	r1, #70	@ 0x46
 8001398:	2090      	movs	r0, #144	@ 0x90
 800139a:	f7ff ff0d 	bl	80011b8 <LCD_DisplayChar>


	LCD_DisplayChar(24, 165, 'T');
 800139e:	2254      	movs	r2, #84	@ 0x54
 80013a0:	21a5      	movs	r1, #165	@ 0xa5
 80013a2:	2018      	movs	r0, #24
 80013a4:	f7ff ff08 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(40, 165, 'o');
 80013a8:	226f      	movs	r2, #111	@ 0x6f
 80013aa:	21a5      	movs	r1, #165	@ 0xa5
 80013ac:	2028      	movs	r0, #40	@ 0x28
 80013ae:	f7ff ff03 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(56, 165, 'u');
 80013b2:	2275      	movs	r2, #117	@ 0x75
 80013b4:	21a5      	movs	r1, #165	@ 0xa5
 80013b6:	2038      	movs	r0, #56	@ 0x38
 80013b8:	f7ff fefe 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(72, 165, 'c');
 80013bc:	2263      	movs	r2, #99	@ 0x63
 80013be:	21a5      	movs	r1, #165	@ 0xa5
 80013c0:	2048      	movs	r0, #72	@ 0x48
 80013c2:	f7ff fef9 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(88, 165, 'h');
 80013c6:	2268      	movs	r2, #104	@ 0x68
 80013c8:	21a5      	movs	r1, #165	@ 0xa5
 80013ca:	2058      	movs	r0, #88	@ 0x58
 80013cc:	f7ff fef4 	bl	80011b8 <LCD_DisplayChar>

	LCD_DisplayChar(115, 165, 'T');
 80013d0:	2254      	movs	r2, #84	@ 0x54
 80013d2:	21a5      	movs	r1, #165	@ 0xa5
 80013d4:	2073      	movs	r0, #115	@ 0x73
 80013d6:	f7ff feef 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(131, 165, 'o');
 80013da:	226f      	movs	r2, #111	@ 0x6f
 80013dc:	21a5      	movs	r1, #165	@ 0xa5
 80013de:	2083      	movs	r0, #131	@ 0x83
 80013e0:	f7ff feea 	bl	80011b8 <LCD_DisplayChar>

	LCD_DisplayChar(158, 165, 'S');
 80013e4:	2253      	movs	r2, #83	@ 0x53
 80013e6:	21a5      	movs	r1, #165	@ 0xa5
 80013e8:	209e      	movs	r0, #158	@ 0x9e
 80013ea:	f7ff fee5 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(174, 165, 't');
 80013ee:	2274      	movs	r2, #116	@ 0x74
 80013f0:	21a5      	movs	r1, #165	@ 0xa5
 80013f2:	20ae      	movs	r0, #174	@ 0xae
 80013f4:	f7ff fee0 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(190, 165, 'a');
 80013f8:	2261      	movs	r2, #97	@ 0x61
 80013fa:	21a5      	movs	r1, #165	@ 0xa5
 80013fc:	20be      	movs	r0, #190	@ 0xbe
 80013fe:	f7ff fedb 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(206, 165, 'r');
 8001402:	2272      	movs	r2, #114	@ 0x72
 8001404:	21a5      	movs	r1, #165	@ 0xa5
 8001406:	20ce      	movs	r0, #206	@ 0xce
 8001408:	f7ff fed6 	bl	80011b8 <LCD_DisplayChar>
	LCD_DisplayChar(222, 165, 't');
 800140c:	2274      	movs	r2, #116	@ 0x74
 800140e:	21a5      	movs	r1, #165	@ 0xa5
 8001410:	20de      	movs	r0, #222	@ 0xde
 8001412:	f7ff fed1 	bl	80011b8 <LCD_DisplayChar>
	DrawGrid();
 8001416:	f7ff fd5d 	bl	8000ed4 <DrawGrid>
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000e04 	.word	0x20000e04

08001424 <LCD_Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void LCD_Error_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <LCD_Error_Handler+0x8>

08001430 <InitializeLCDTouch>:
// Touch Functionality   //

#if COMPILE_TOUCH_FUNCTIONS == 1

void InitializeLCDTouch(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  if(STMPE811_Init() != STMPE811_State_Ok)
 8001434:	f001 fa85 	bl	8002942 <STMPE811_Init>
 8001438:	4603      	mov	r3, r0
 800143a:	2b02      	cmp	r3, #2
 800143c:	d001      	beq.n	8001442 <InitializeLCDTouch+0x12>
  {
	 for(;;); // Hang code due to error in initialzation
 800143e:	bf00      	nop
 8001440:	e7fd      	b.n	800143e <InitializeLCDTouch+0xe>
  }
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}

08001446 <returnTouchStateAndLocation>:

STMPE811_State_t returnTouchStateAndLocation(STMPE811_TouchData * touchStruct)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	b082      	sub	sp, #8
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	return STMPE811_ReadTouch(touchStruct);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f001 fb2f 	bl	8002ab2 <STMPE811_ReadTouch>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3708      	adds	r7, #8
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <LCD_Draw_I>:
#endif // COMPILE_TOUCH_FUNCTIONS



void LCD_Draw_I(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation)
{
 800145e:	b590      	push	{r4, r7, lr}
 8001460:	b083      	sub	sp, #12
 8001462:	af00      	add	r7, sp, #0
 8001464:	4604      	mov	r4, r0
 8001466:	4608      	mov	r0, r1
 8001468:	4611      	mov	r1, r2
 800146a:	461a      	mov	r2, r3
 800146c:	4623      	mov	r3, r4
 800146e:	80fb      	strh	r3, [r7, #6]
 8001470:	4603      	mov	r3, r0
 8001472:	80bb      	strh	r3, [r7, #4]
 8001474:	460b      	mov	r3, r1
 8001476:	807b      	strh	r3, [r7, #2]
 8001478:	4613      	mov	r3, r2
 800147a:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 800147c:	883b      	ldrh	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d11e      	bne.n	80014c0 <LCD_Draw_I+0x62>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	88b9      	ldrh	r1, [r7, #4]
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff fd03 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	3318      	adds	r3, #24
 8001492:	b29b      	uxth	r3, r3
 8001494:	887a      	ldrh	r2, [r7, #2]
 8001496:	88b9      	ldrh	r1, [r7, #4]
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff fcfb 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 800149e:	88fb      	ldrh	r3, [r7, #6]
 80014a0:	3330      	adds	r3, #48	@ 0x30
 80014a2:	b29b      	uxth	r3, r3
 80014a4:	887a      	ldrh	r2, [r7, #2]
 80014a6:	88b9      	ldrh	r1, [r7, #4]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fcf3 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+72, Ypos, color);
 80014ae:	88fb      	ldrh	r3, [r7, #6]
 80014b0:	3348      	adds	r3, #72	@ 0x48
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	887a      	ldrh	r2, [r7, #2]
 80014b6:	88b9      	ldrh	r1, [r7, #4]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f7ff fceb 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos, color);
		LCD_Draw_Block(Xpos, Ypos+32, color);
		LCD_Draw_Block(Xpos, Ypos+64, color);
		LCD_Draw_Block(Xpos, Ypos+96, color);
	}
}
 80014be:	e064      	b.n	800158a <LCD_Draw_I+0x12c>
	} else if  (rotation == 1){
 80014c0:	883b      	ldrh	r3, [r7, #0]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d11e      	bne.n	8001504 <LCD_Draw_I+0xa6>
		LCD_Draw_Block(Xpos, Ypos, color);
 80014c6:	887a      	ldrh	r2, [r7, #2]
 80014c8:	88b9      	ldrh	r1, [r7, #4]
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff fce1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	3320      	adds	r3, #32
 80014d6:	b299      	uxth	r1, r3
 80014d8:	887a      	ldrh	r2, [r7, #2]
 80014da:	88fb      	ldrh	r3, [r7, #6]
 80014dc:	4618      	mov	r0, r3
 80014de:	f7ff fcd9 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	3340      	adds	r3, #64	@ 0x40
 80014e6:	b299      	uxth	r1, r3
 80014e8:	887a      	ldrh	r2, [r7, #2]
 80014ea:	88fb      	ldrh	r3, [r7, #6]
 80014ec:	4618      	mov	r0, r3
 80014ee:	f7ff fcd1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+96, color);
 80014f2:	88bb      	ldrh	r3, [r7, #4]
 80014f4:	3360      	adds	r3, #96	@ 0x60
 80014f6:	b299      	uxth	r1, r3
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff fcc9 	bl	8000e94 <LCD_Draw_Block>
}
 8001502:	e042      	b.n	800158a <LCD_Draw_I+0x12c>
	} else if  (rotation == 2){
 8001504:	883b      	ldrh	r3, [r7, #0]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d11e      	bne.n	8001548 <LCD_Draw_I+0xea>
		LCD_Draw_Block(Xpos, Ypos, color);
 800150a:	887a      	ldrh	r2, [r7, #2]
 800150c:	88b9      	ldrh	r1, [r7, #4]
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fcbf 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001516:	88fb      	ldrh	r3, [r7, #6]
 8001518:	3318      	adds	r3, #24
 800151a:	b29b      	uxth	r3, r3
 800151c:	887a      	ldrh	r2, [r7, #2]
 800151e:	88b9      	ldrh	r1, [r7, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fcb7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	3330      	adds	r3, #48	@ 0x30
 800152a:	b29b      	uxth	r3, r3
 800152c:	887a      	ldrh	r2, [r7, #2]
 800152e:	88b9      	ldrh	r1, [r7, #4]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff fcaf 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+72, Ypos, color);
 8001536:	88fb      	ldrh	r3, [r7, #6]
 8001538:	3348      	adds	r3, #72	@ 0x48
 800153a:	b29b      	uxth	r3, r3
 800153c:	887a      	ldrh	r2, [r7, #2]
 800153e:	88b9      	ldrh	r1, [r7, #4]
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fca7 	bl	8000e94 <LCD_Draw_Block>
}
 8001546:	e020      	b.n	800158a <LCD_Draw_I+0x12c>
	} else if  (rotation == 3){
 8001548:	883b      	ldrh	r3, [r7, #0]
 800154a:	2b03      	cmp	r3, #3
 800154c:	d11d      	bne.n	800158a <LCD_Draw_I+0x12c>
		LCD_Draw_Block(Xpos, Ypos, color);
 800154e:	887a      	ldrh	r2, [r7, #2]
 8001550:	88b9      	ldrh	r1, [r7, #4]
 8001552:	88fb      	ldrh	r3, [r7, #6]
 8001554:	4618      	mov	r0, r3
 8001556:	f7ff fc9d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 800155a:	88bb      	ldrh	r3, [r7, #4]
 800155c:	3320      	adds	r3, #32
 800155e:	b299      	uxth	r1, r3
 8001560:	887a      	ldrh	r2, [r7, #2]
 8001562:	88fb      	ldrh	r3, [r7, #6]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff fc95 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 800156a:	88bb      	ldrh	r3, [r7, #4]
 800156c:	3340      	adds	r3, #64	@ 0x40
 800156e:	b299      	uxth	r1, r3
 8001570:	887a      	ldrh	r2, [r7, #2]
 8001572:	88fb      	ldrh	r3, [r7, #6]
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff fc8d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+96, color);
 800157a:	88bb      	ldrh	r3, [r7, #4]
 800157c:	3360      	adds	r3, #96	@ 0x60
 800157e:	b299      	uxth	r1, r3
 8001580:	887a      	ldrh	r2, [r7, #2]
 8001582:	88fb      	ldrh	r3, [r7, #6]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff fc85 	bl	8000e94 <LCD_Draw_Block>
}
 800158a:	bf00      	nop
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	bd90      	pop	{r4, r7, pc}

08001592 <LCD_Draw_Left_L>:

void LCD_Draw_Left_L(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation){
 8001592:	b590      	push	{r4, r7, lr}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	4604      	mov	r4, r0
 800159a:	4608      	mov	r0, r1
 800159c:	4611      	mov	r1, r2
 800159e:	461a      	mov	r2, r3
 80015a0:	4623      	mov	r3, r4
 80015a2:	80fb      	strh	r3, [r7, #6]
 80015a4:	4603      	mov	r3, r0
 80015a6:	80bb      	strh	r3, [r7, #4]
 80015a8:	460b      	mov	r3, r1
 80015aa:	807b      	strh	r3, [r7, #2]
 80015ac:	4613      	mov	r3, r2
 80015ae:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 80015b0:	883b      	ldrh	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d122      	bne.n	80015fc <LCD_Draw_Left_L+0x6a>
		LCD_Draw_Block(Xpos, Ypos, color);
 80015b6:	887a      	ldrh	r2, [r7, #2]
 80015b8:	88b9      	ldrh	r1, [r7, #4]
 80015ba:	88fb      	ldrh	r3, [r7, #6]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fc69 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	3320      	adds	r3, #32
 80015c6:	b299      	uxth	r1, r3
 80015c8:	887a      	ldrh	r2, [r7, #2]
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7ff fc61 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 80015d2:	88fb      	ldrh	r3, [r7, #6]
 80015d4:	3318      	adds	r3, #24
 80015d6:	b298      	uxth	r0, r3
 80015d8:	88bb      	ldrh	r3, [r7, #4]
 80015da:	3320      	adds	r3, #32
 80015dc:	b29b      	uxth	r3, r3
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	4619      	mov	r1, r3
 80015e2:	f7ff fc57 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos+32, color);
 80015e6:	88fb      	ldrh	r3, [r7, #6]
 80015e8:	3330      	adds	r3, #48	@ 0x30
 80015ea:	b298      	uxth	r0, r3
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	3320      	adds	r3, #32
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	887a      	ldrh	r2, [r7, #2]
 80015f4:	4619      	mov	r1, r3
 80015f6:	f7ff fc4d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
		LCD_Draw_Block(Xpos+0, Ypos+64, color);
	}
}
 80015fa:	e06c      	b.n	80016d6 <LCD_Draw_Left_L+0x144>
	} else if  (rotation == 1){
 80015fc:	883b      	ldrh	r3, [r7, #0]
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d11e      	bne.n	8001640 <LCD_Draw_Left_L+0xae>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	88b9      	ldrh	r1, [r7, #4]
 8001606:	88fb      	ldrh	r3, [r7, #6]
 8001608:	4618      	mov	r0, r3
 800160a:	f7ff fc43 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 800160e:	88bb      	ldrh	r3, [r7, #4]
 8001610:	3320      	adds	r3, #32
 8001612:	b299      	uxth	r1, r3
 8001614:	887a      	ldrh	r2, [r7, #2]
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	4618      	mov	r0, r3
 800161a:	f7ff fc3b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 800161e:	88bb      	ldrh	r3, [r7, #4]
 8001620:	3340      	adds	r3, #64	@ 0x40
 8001622:	b299      	uxth	r1, r3
 8001624:	887a      	ldrh	r2, [r7, #2]
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff fc33 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 800162e:	88fb      	ldrh	r3, [r7, #6]
 8001630:	3318      	adds	r3, #24
 8001632:	b29b      	uxth	r3, r3
 8001634:	887a      	ldrh	r2, [r7, #2]
 8001636:	88b9      	ldrh	r1, [r7, #4]
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fc2b 	bl	8000e94 <LCD_Draw_Block>
}
 800163e:	e04a      	b.n	80016d6 <LCD_Draw_Left_L+0x144>
	} else if  (rotation == 2){
 8001640:	883b      	ldrh	r3, [r7, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d120      	bne.n	8001688 <LCD_Draw_Left_L+0xf6>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001646:	887a      	ldrh	r2, [r7, #2]
 8001648:	88b9      	ldrh	r1, [r7, #4]
 800164a:	88fb      	ldrh	r3, [r7, #6]
 800164c:	4618      	mov	r0, r3
 800164e:	f7ff fc21 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	3318      	adds	r3, #24
 8001656:	b29b      	uxth	r3, r3
 8001658:	887a      	ldrh	r2, [r7, #2]
 800165a:	88b9      	ldrh	r1, [r7, #4]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fc19 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	3330      	adds	r3, #48	@ 0x30
 8001666:	b29b      	uxth	r3, r3
 8001668:	887a      	ldrh	r2, [r7, #2]
 800166a:	88b9      	ldrh	r1, [r7, #4]
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff fc11 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos+32, color);
 8001672:	88fb      	ldrh	r3, [r7, #6]
 8001674:	3330      	adds	r3, #48	@ 0x30
 8001676:	b298      	uxth	r0, r3
 8001678:	88bb      	ldrh	r3, [r7, #4]
 800167a:	3320      	adds	r3, #32
 800167c:	b29b      	uxth	r3, r3
 800167e:	887a      	ldrh	r2, [r7, #2]
 8001680:	4619      	mov	r1, r3
 8001682:	f7ff fc07 	bl	8000e94 <LCD_Draw_Block>
}
 8001686:	e026      	b.n	80016d6 <LCD_Draw_Left_L+0x144>
	} else if  (rotation == 3){
 8001688:	883b      	ldrh	r3, [r7, #0]
 800168a:	2b03      	cmp	r3, #3
 800168c:	d123      	bne.n	80016d6 <LCD_Draw_Left_L+0x144>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 800168e:	88fb      	ldrh	r3, [r7, #6]
 8001690:	3318      	adds	r3, #24
 8001692:	b29b      	uxth	r3, r3
 8001694:	887a      	ldrh	r2, [r7, #2]
 8001696:	88b9      	ldrh	r1, [r7, #4]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fbfb 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 800169e:	88fb      	ldrh	r3, [r7, #6]
 80016a0:	3318      	adds	r3, #24
 80016a2:	b298      	uxth	r0, r3
 80016a4:	88bb      	ldrh	r3, [r7, #4]
 80016a6:	3320      	adds	r3, #32
 80016a8:	b29b      	uxth	r3, r3
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	4619      	mov	r1, r3
 80016ae:	f7ff fbf1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
 80016b2:	88fb      	ldrh	r3, [r7, #6]
 80016b4:	3318      	adds	r3, #24
 80016b6:	b298      	uxth	r0, r3
 80016b8:	88bb      	ldrh	r3, [r7, #4]
 80016ba:	3340      	adds	r3, #64	@ 0x40
 80016bc:	b29b      	uxth	r3, r3
 80016be:	887a      	ldrh	r2, [r7, #2]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f7ff fbe7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+0, Ypos+64, color);
 80016c6:	88bb      	ldrh	r3, [r7, #4]
 80016c8:	3340      	adds	r3, #64	@ 0x40
 80016ca:	b299      	uxth	r1, r3
 80016cc:	887a      	ldrh	r2, [r7, #2]
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fbdf 	bl	8000e94 <LCD_Draw_Block>
}
 80016d6:	bf00      	nop
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd90      	pop	{r4, r7, pc}

080016de <LCD_Draw_Right_L>:

void LCD_Draw_Right_L(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation){
 80016de:	b590      	push	{r4, r7, lr}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	4604      	mov	r4, r0
 80016e6:	4608      	mov	r0, r1
 80016e8:	4611      	mov	r1, r2
 80016ea:	461a      	mov	r2, r3
 80016ec:	4623      	mov	r3, r4
 80016ee:	80fb      	strh	r3, [r7, #6]
 80016f0:	4603      	mov	r3, r0
 80016f2:	80bb      	strh	r3, [r7, #4]
 80016f4:	460b      	mov	r3, r1
 80016f6:	807b      	strh	r3, [r7, #2]
 80016f8:	4613      	mov	r3, r2
 80016fa:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 80016fc:	883b      	ldrh	r3, [r7, #0]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d124      	bne.n	800174c <LCD_Draw_Right_L+0x6e>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001702:	88bb      	ldrh	r3, [r7, #4]
 8001704:	3320      	adds	r3, #32
 8001706:	b299      	uxth	r1, r3
 8001708:	887a      	ldrh	r2, [r7, #2]
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	4618      	mov	r0, r3
 800170e:	f7ff fbc1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	3318      	adds	r3, #24
 8001716:	b298      	uxth	r0, r3
 8001718:	88bb      	ldrh	r3, [r7, #4]
 800171a:	3320      	adds	r3, #32
 800171c:	b29b      	uxth	r3, r3
 800171e:	887a      	ldrh	r2, [r7, #2]
 8001720:	4619      	mov	r1, r3
 8001722:	f7ff fbb7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos+32, color);
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	3330      	adds	r3, #48	@ 0x30
 800172a:	b298      	uxth	r0, r3
 800172c:	88bb      	ldrh	r3, [r7, #4]
 800172e:	3320      	adds	r3, #32
 8001730:	b29b      	uxth	r3, r3
 8001732:	887a      	ldrh	r2, [r7, #2]
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff fbad 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 800173a:	88fb      	ldrh	r3, [r7, #6]
 800173c:	3330      	adds	r3, #48	@ 0x30
 800173e:	b29b      	uxth	r3, r3
 8001740:	887a      	ldrh	r2, [r7, #2]
 8001742:	88b9      	ldrh	r1, [r7, #4]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff fba5 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos, color);
		LCD_Draw_Block(Xpos+24, Ypos, color);
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
	}
}
 800174a:	e06a      	b.n	8001822 <LCD_Draw_Right_L+0x144>
	} else if  (rotation == 1){
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	2b01      	cmp	r3, #1
 8001750:	d120      	bne.n	8001794 <LCD_Draw_Right_L+0xb6>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001752:	887a      	ldrh	r2, [r7, #2]
 8001754:	88b9      	ldrh	r1, [r7, #4]
 8001756:	88fb      	ldrh	r3, [r7, #6]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fb9b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 800175e:	88bb      	ldrh	r3, [r7, #4]
 8001760:	3320      	adds	r3, #32
 8001762:	b299      	uxth	r1, r3
 8001764:	887a      	ldrh	r2, [r7, #2]
 8001766:	88fb      	ldrh	r3, [r7, #6]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fb93 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 800176e:	88bb      	ldrh	r3, [r7, #4]
 8001770:	3340      	adds	r3, #64	@ 0x40
 8001772:	b299      	uxth	r1, r3
 8001774:	887a      	ldrh	r2, [r7, #2]
 8001776:	88fb      	ldrh	r3, [r7, #6]
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff fb8b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
 800177e:	88fb      	ldrh	r3, [r7, #6]
 8001780:	3318      	adds	r3, #24
 8001782:	b298      	uxth	r0, r3
 8001784:	88bb      	ldrh	r3, [r7, #4]
 8001786:	3340      	adds	r3, #64	@ 0x40
 8001788:	b29b      	uxth	r3, r3
 800178a:	887a      	ldrh	r2, [r7, #2]
 800178c:	4619      	mov	r1, r3
 800178e:	f7ff fb81 	bl	8000e94 <LCD_Draw_Block>
}
 8001792:	e046      	b.n	8001822 <LCD_Draw_Right_L+0x144>
	} else if  (rotation == 2){
 8001794:	883b      	ldrh	r3, [r7, #0]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d11e      	bne.n	80017d8 <LCD_Draw_Right_L+0xfa>
		LCD_Draw_Block(Xpos, Ypos, color);
 800179a:	887a      	ldrh	r2, [r7, #2]
 800179c:	88b9      	ldrh	r1, [r7, #4]
 800179e:	88fb      	ldrh	r3, [r7, #6]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff fb77 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 80017a6:	88fb      	ldrh	r3, [r7, #6]
 80017a8:	3318      	adds	r3, #24
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	887a      	ldrh	r2, [r7, #2]
 80017ae:	88b9      	ldrh	r1, [r7, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fb6f 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 80017b6:	88fb      	ldrh	r3, [r7, #6]
 80017b8:	3330      	adds	r3, #48	@ 0x30
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	887a      	ldrh	r2, [r7, #2]
 80017be:	88b9      	ldrh	r1, [r7, #4]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fb67 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	3320      	adds	r3, #32
 80017ca:	b299      	uxth	r1, r3
 80017cc:	887a      	ldrh	r2, [r7, #2]
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4618      	mov	r0, r3
 80017d2:	f7ff fb5f 	bl	8000e94 <LCD_Draw_Block>
}
 80017d6:	e024      	b.n	8001822 <LCD_Draw_Right_L+0x144>
	} else if  (rotation == 3){
 80017d8:	883b      	ldrh	r3, [r7, #0]
 80017da:	2b03      	cmp	r3, #3
 80017dc:	d121      	bne.n	8001822 <LCD_Draw_Right_L+0x144>
		LCD_Draw_Block(Xpos, Ypos, color);
 80017de:	887a      	ldrh	r2, [r7, #2]
 80017e0:	88b9      	ldrh	r1, [r7, #4]
 80017e2:	88fb      	ldrh	r3, [r7, #6]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff fb55 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	3318      	adds	r3, #24
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	887a      	ldrh	r2, [r7, #2]
 80017f2:	88b9      	ldrh	r1, [r7, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff fb4d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 80017fa:	88fb      	ldrh	r3, [r7, #6]
 80017fc:	3318      	adds	r3, #24
 80017fe:	b298      	uxth	r0, r3
 8001800:	88bb      	ldrh	r3, [r7, #4]
 8001802:	3320      	adds	r3, #32
 8001804:	b29b      	uxth	r3, r3
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	4619      	mov	r1, r3
 800180a:	f7ff fb43 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
 800180e:	88fb      	ldrh	r3, [r7, #6]
 8001810:	3318      	adds	r3, #24
 8001812:	b298      	uxth	r0, r3
 8001814:	88bb      	ldrh	r3, [r7, #4]
 8001816:	3340      	adds	r3, #64	@ 0x40
 8001818:	b29b      	uxth	r3, r3
 800181a:	887a      	ldrh	r2, [r7, #2]
 800181c:	4619      	mov	r1, r3
 800181e:	f7ff fb39 	bl	8000e94 <LCD_Draw_Block>
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	bd90      	pop	{r4, r7, pc}

0800182a <LCD_Draw_Square>:


void LCD_Draw_Square(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation){
 800182a:	b590      	push	{r4, r7, lr}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	4604      	mov	r4, r0
 8001832:	4608      	mov	r0, r1
 8001834:	4611      	mov	r1, r2
 8001836:	461a      	mov	r2, r3
 8001838:	4623      	mov	r3, r4
 800183a:	80fb      	strh	r3, [r7, #6]
 800183c:	4603      	mov	r3, r0
 800183e:	80bb      	strh	r3, [r7, #4]
 8001840:	460b      	mov	r3, r1
 8001842:	807b      	strh	r3, [r7, #2]
 8001844:	4613      	mov	r3, r2
 8001846:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 8001848:	883b      	ldrh	r3, [r7, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d120      	bne.n	8001890 <LCD_Draw_Square+0x66>
		LCD_Draw_Block(Xpos, Ypos, color);
 800184e:	887a      	ldrh	r2, [r7, #2]
 8001850:	88b9      	ldrh	r1, [r7, #4]
 8001852:	88fb      	ldrh	r3, [r7, #6]
 8001854:	4618      	mov	r0, r3
 8001856:	f7ff fb1d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 800185a:	88bb      	ldrh	r3, [r7, #4]
 800185c:	3320      	adds	r3, #32
 800185e:	b299      	uxth	r1, r3
 8001860:	887a      	ldrh	r2, [r7, #2]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff fb15 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 800186a:	88fb      	ldrh	r3, [r7, #6]
 800186c:	3318      	adds	r3, #24
 800186e:	b29b      	uxth	r3, r3
 8001870:	887a      	ldrh	r2, [r7, #2]
 8001872:	88b9      	ldrh	r1, [r7, #4]
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fb0d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	3318      	adds	r3, #24
 800187e:	b298      	uxth	r0, r3
 8001880:	88bb      	ldrh	r3, [r7, #4]
 8001882:	3320      	adds	r3, #32
 8001884:	b29b      	uxth	r3, r3
 8001886:	887a      	ldrh	r2, [r7, #2]
 8001888:	4619      	mov	r1, r3
 800188a:	f7ff fb03 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos, color);
		LCD_Draw_Block(Xpos, Ypos+32, color);
		LCD_Draw_Block(Xpos+24, Ypos, color);
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
	}
}
 800188e:	e06a      	b.n	8001966 <LCD_Draw_Square+0x13c>
	} else if  (rotation == 1){
 8001890:	883b      	ldrh	r3, [r7, #0]
 8001892:	2b01      	cmp	r3, #1
 8001894:	d120      	bne.n	80018d8 <LCD_Draw_Square+0xae>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001896:	887a      	ldrh	r2, [r7, #2]
 8001898:	88b9      	ldrh	r1, [r7, #4]
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff faf9 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	3320      	adds	r3, #32
 80018a6:	b299      	uxth	r1, r3
 80018a8:	887a      	ldrh	r2, [r7, #2]
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff faf1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 80018b2:	88fb      	ldrh	r3, [r7, #6]
 80018b4:	3318      	adds	r3, #24
 80018b6:	b29b      	uxth	r3, r3
 80018b8:	887a      	ldrh	r2, [r7, #2]
 80018ba:	88b9      	ldrh	r1, [r7, #4]
 80018bc:	4618      	mov	r0, r3
 80018be:	f7ff fae9 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 80018c2:	88fb      	ldrh	r3, [r7, #6]
 80018c4:	3318      	adds	r3, #24
 80018c6:	b298      	uxth	r0, r3
 80018c8:	88bb      	ldrh	r3, [r7, #4]
 80018ca:	3320      	adds	r3, #32
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f7ff fadf 	bl	8000e94 <LCD_Draw_Block>
}
 80018d6:	e046      	b.n	8001966 <LCD_Draw_Square+0x13c>
	} else if  (rotation == 2){
 80018d8:	883b      	ldrh	r3, [r7, #0]
 80018da:	2b02      	cmp	r3, #2
 80018dc:	d120      	bne.n	8001920 <LCD_Draw_Square+0xf6>
		LCD_Draw_Block(Xpos, Ypos, color);
 80018de:	887a      	ldrh	r2, [r7, #2]
 80018e0:	88b9      	ldrh	r1, [r7, #4]
 80018e2:	88fb      	ldrh	r3, [r7, #6]
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fad5 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	3320      	adds	r3, #32
 80018ee:	b299      	uxth	r1, r3
 80018f0:	887a      	ldrh	r2, [r7, #2]
 80018f2:	88fb      	ldrh	r3, [r7, #6]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7ff facd 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	3318      	adds	r3, #24
 80018fe:	b29b      	uxth	r3, r3
 8001900:	887a      	ldrh	r2, [r7, #2]
 8001902:	88b9      	ldrh	r1, [r7, #4]
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fac5 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	3318      	adds	r3, #24
 800190e:	b298      	uxth	r0, r3
 8001910:	88bb      	ldrh	r3, [r7, #4]
 8001912:	3320      	adds	r3, #32
 8001914:	b29b      	uxth	r3, r3
 8001916:	887a      	ldrh	r2, [r7, #2]
 8001918:	4619      	mov	r1, r3
 800191a:	f7ff fabb 	bl	8000e94 <LCD_Draw_Block>
}
 800191e:	e022      	b.n	8001966 <LCD_Draw_Square+0x13c>
	} else if  (rotation == 3){
 8001920:	883b      	ldrh	r3, [r7, #0]
 8001922:	2b03      	cmp	r3, #3
 8001924:	d11f      	bne.n	8001966 <LCD_Draw_Square+0x13c>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001926:	887a      	ldrh	r2, [r7, #2]
 8001928:	88b9      	ldrh	r1, [r7, #4]
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fab1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001932:	88bb      	ldrh	r3, [r7, #4]
 8001934:	3320      	adds	r3, #32
 8001936:	b299      	uxth	r1, r3
 8001938:	887a      	ldrh	r2, [r7, #2]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff faa9 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	3318      	adds	r3, #24
 8001946:	b29b      	uxth	r3, r3
 8001948:	887a      	ldrh	r2, [r7, #2]
 800194a:	88b9      	ldrh	r1, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff faa1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001952:	88fb      	ldrh	r3, [r7, #6]
 8001954:	3318      	adds	r3, #24
 8001956:	b298      	uxth	r0, r3
 8001958:	88bb      	ldrh	r3, [r7, #4]
 800195a:	3320      	adds	r3, #32
 800195c:	b29b      	uxth	r3, r3
 800195e:	887a      	ldrh	r2, [r7, #2]
 8001960:	4619      	mov	r1, r3
 8001962:	f7ff fa97 	bl	8000e94 <LCD_Draw_Block>
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	bd90      	pop	{r4, r7, pc}

0800196e <LCD_Draw_T>:



void LCD_Draw_T(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation){
 800196e:	b590      	push	{r4, r7, lr}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	4604      	mov	r4, r0
 8001976:	4608      	mov	r0, r1
 8001978:	4611      	mov	r1, r2
 800197a:	461a      	mov	r2, r3
 800197c:	4623      	mov	r3, r4
 800197e:	80fb      	strh	r3, [r7, #6]
 8001980:	4603      	mov	r3, r0
 8001982:	80bb      	strh	r3, [r7, #4]
 8001984:	460b      	mov	r3, r1
 8001986:	807b      	strh	r3, [r7, #2]
 8001988:	4613      	mov	r3, r2
 800198a:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 800198c:	883b      	ldrh	r3, [r7, #0]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d122      	bne.n	80019d8 <LCD_Draw_T+0x6a>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	88b9      	ldrh	r1, [r7, #4]
 8001996:	88fb      	ldrh	r3, [r7, #6]
 8001998:	4618      	mov	r0, r3
 800199a:	f7ff fa7b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	3320      	adds	r3, #32
 80019a2:	b299      	uxth	r1, r3
 80019a4:	887a      	ldrh	r2, [r7, #2]
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	4618      	mov	r0, r3
 80019aa:	f7ff fa73 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos-24, Ypos+32, color);
 80019ae:	88fb      	ldrh	r3, [r7, #6]
 80019b0:	3b18      	subs	r3, #24
 80019b2:	b298      	uxth	r0, r3
 80019b4:	88bb      	ldrh	r3, [r7, #4]
 80019b6:	3320      	adds	r3, #32
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff fa69 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 80019c2:	88fb      	ldrh	r3, [r7, #6]
 80019c4:	3318      	adds	r3, #24
 80019c6:	b298      	uxth	r0, r3
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	3320      	adds	r3, #32
 80019cc:	b29b      	uxth	r3, r3
 80019ce:	887a      	ldrh	r2, [r7, #2]
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff fa5f 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
		LCD_Draw_Block(Xpos, Ypos+32, color);
	}
}
 80019d6:	e06e      	b.n	8001ab6 <LCD_Draw_T+0x148>
	} else if  (rotation == 1){
 80019d8:	883b      	ldrh	r3, [r7, #0]
 80019da:	2b01      	cmp	r3, #1
 80019dc:	d120      	bne.n	8001a20 <LCD_Draw_T+0xb2>
		LCD_Draw_Block(Xpos, Ypos, color);
 80019de:	887a      	ldrh	r2, [r7, #2]
 80019e0:	88b9      	ldrh	r1, [r7, #4]
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4618      	mov	r0, r3
 80019e6:	f7ff fa55 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 80019ea:	88bb      	ldrh	r3, [r7, #4]
 80019ec:	3320      	adds	r3, #32
 80019ee:	b299      	uxth	r1, r3
 80019f0:	887a      	ldrh	r2, [r7, #2]
 80019f2:	88fb      	ldrh	r3, [r7, #6]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff fa4d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 80019fa:	88bb      	ldrh	r3, [r7, #4]
 80019fc:	3340      	adds	r3, #64	@ 0x40
 80019fe:	b299      	uxth	r1, r3
 8001a00:	887a      	ldrh	r2, [r7, #2]
 8001a02:	88fb      	ldrh	r3, [r7, #6]
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7ff fa45 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001a0a:	88fb      	ldrh	r3, [r7, #6]
 8001a0c:	3318      	adds	r3, #24
 8001a0e:	b298      	uxth	r0, r3
 8001a10:	88bb      	ldrh	r3, [r7, #4]
 8001a12:	3320      	adds	r3, #32
 8001a14:	b29b      	uxth	r3, r3
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff fa3b 	bl	8000e94 <LCD_Draw_Block>
}
 8001a1e:	e04a      	b.n	8001ab6 <LCD_Draw_T+0x148>
	} else if  (rotation == 2){
 8001a20:	883b      	ldrh	r3, [r7, #0]
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d120      	bne.n	8001a68 <LCD_Draw_T+0xfa>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001a26:	887a      	ldrh	r2, [r7, #2]
 8001a28:	88b9      	ldrh	r1, [r7, #4]
 8001a2a:	88fb      	ldrh	r3, [r7, #6]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff fa31 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	3318      	adds	r3, #24
 8001a36:	b29b      	uxth	r3, r3
 8001a38:	887a      	ldrh	r2, [r7, #2]
 8001a3a:	88b9      	ldrh	r1, [r7, #4]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fa29 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 8001a42:	88fb      	ldrh	r3, [r7, #6]
 8001a44:	3330      	adds	r3, #48	@ 0x30
 8001a46:	b29b      	uxth	r3, r3
 8001a48:	887a      	ldrh	r2, [r7, #2]
 8001a4a:	88b9      	ldrh	r1, [r7, #4]
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	f7ff fa21 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	3318      	adds	r3, #24
 8001a56:	b298      	uxth	r0, r3
 8001a58:	88bb      	ldrh	r3, [r7, #4]
 8001a5a:	3320      	adds	r3, #32
 8001a5c:	b29b      	uxth	r3, r3
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	4619      	mov	r1, r3
 8001a62:	f7ff fa17 	bl	8000e94 <LCD_Draw_Block>
}
 8001a66:	e026      	b.n	8001ab6 <LCD_Draw_T+0x148>
	} else if  (rotation == 3){
 8001a68:	883b      	ldrh	r3, [r7, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d123      	bne.n	8001ab6 <LCD_Draw_T+0x148>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001a6e:	88fb      	ldrh	r3, [r7, #6]
 8001a70:	3318      	adds	r3, #24
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	887a      	ldrh	r2, [r7, #2]
 8001a76:	88b9      	ldrh	r1, [r7, #4]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fa0b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	3318      	adds	r3, #24
 8001a82:	b298      	uxth	r0, r3
 8001a84:	88bb      	ldrh	r3, [r7, #4]
 8001a86:	3320      	adds	r3, #32
 8001a88:	b29b      	uxth	r3, r3
 8001a8a:	887a      	ldrh	r2, [r7, #2]
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	f7ff fa01 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
 8001a92:	88fb      	ldrh	r3, [r7, #6]
 8001a94:	3318      	adds	r3, #24
 8001a96:	b298      	uxth	r0, r3
 8001a98:	88bb      	ldrh	r3, [r7, #4]
 8001a9a:	3340      	adds	r3, #64	@ 0x40
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	887a      	ldrh	r2, [r7, #2]
 8001aa0:	4619      	mov	r1, r3
 8001aa2:	f7ff f9f7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	3320      	adds	r3, #32
 8001aaa:	b299      	uxth	r1, r3
 8001aac:	887a      	ldrh	r2, [r7, #2]
 8001aae:	88fb      	ldrh	r3, [r7, #6]
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f9ef 	bl	8000e94 <LCD_Draw_Block>
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd90      	pop	{r4, r7, pc}

08001abe <LCD_Draw_Left_S>:


void LCD_Draw_Left_S(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation)
{
 8001abe:	b590      	push	{r4, r7, lr}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	4604      	mov	r4, r0
 8001ac6:	4608      	mov	r0, r1
 8001ac8:	4611      	mov	r1, r2
 8001aca:	461a      	mov	r2, r3
 8001acc:	4623      	mov	r3, r4
 8001ace:	80fb      	strh	r3, [r7, #6]
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	80bb      	strh	r3, [r7, #4]
 8001ad4:	460b      	mov	r3, r1
 8001ad6:	807b      	strh	r3, [r7, #2]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 8001adc:	883b      	ldrh	r3, [r7, #0]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d122      	bne.n	8001b28 <LCD_Draw_Left_S+0x6a>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001ae2:	88fb      	ldrh	r3, [r7, #6]
 8001ae4:	3318      	adds	r3, #24
 8001ae6:	b29b      	uxth	r3, r3
 8001ae8:	887a      	ldrh	r2, [r7, #2]
 8001aea:	88b9      	ldrh	r1, [r7, #4]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7ff f9d1 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001af2:	88fb      	ldrh	r3, [r7, #6]
 8001af4:	3318      	adds	r3, #24
 8001af6:	b298      	uxth	r0, r3
 8001af8:	88bb      	ldrh	r3, [r7, #4]
 8001afa:	3320      	adds	r3, #32
 8001afc:	b29b      	uxth	r3, r3
 8001afe:	887a      	ldrh	r2, [r7, #2]
 8001b00:	4619      	mov	r1, r3
 8001b02:	f7ff f9c7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 8001b06:	88fb      	ldrh	r3, [r7, #6]
 8001b08:	3330      	adds	r3, #48	@ 0x30
 8001b0a:	b29b      	uxth	r3, r3
 8001b0c:	887a      	ldrh	r2, [r7, #2]
 8001b0e:	88b9      	ldrh	r1, [r7, #4]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7ff f9bf 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001b16:	88bb      	ldrh	r3, [r7, #4]
 8001b18:	3320      	adds	r3, #32
 8001b1a:	b299      	uxth	r1, r3
 8001b1c:	887a      	ldrh	r2, [r7, #2]
 8001b1e:	88fb      	ldrh	r3, [r7, #6]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff f9b7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos, color);
		LCD_Draw_Block(Xpos, Ypos+32, color);
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
	}
}
 8001b26:	e070      	b.n	8001c0a <LCD_Draw_Left_S+0x14c>
	} else if  (rotation == 1){
 8001b28:	883b      	ldrh	r3, [r7, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d122      	bne.n	8001b74 <LCD_Draw_Left_S+0xb6>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001b2e:	887a      	ldrh	r2, [r7, #2]
 8001b30:	88b9      	ldrh	r1, [r7, #4]
 8001b32:	88fb      	ldrh	r3, [r7, #6]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff f9ad 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001b3a:	88bb      	ldrh	r3, [r7, #4]
 8001b3c:	3320      	adds	r3, #32
 8001b3e:	b299      	uxth	r1, r3
 8001b40:	887a      	ldrh	r2, [r7, #2]
 8001b42:	88fb      	ldrh	r3, [r7, #6]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff f9a5 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	3318      	adds	r3, #24
 8001b4e:	b298      	uxth	r0, r3
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	3320      	adds	r3, #32
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	887a      	ldrh	r2, [r7, #2]
 8001b58:	4619      	mov	r1, r3
 8001b5a:	f7ff f99b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
 8001b5e:	88fb      	ldrh	r3, [r7, #6]
 8001b60:	3318      	adds	r3, #24
 8001b62:	b298      	uxth	r0, r3
 8001b64:	88bb      	ldrh	r3, [r7, #4]
 8001b66:	3340      	adds	r3, #64	@ 0x40
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	887a      	ldrh	r2, [r7, #2]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f7ff f991 	bl	8000e94 <LCD_Draw_Block>
}
 8001b72:	e04a      	b.n	8001c0a <LCD_Draw_Left_S+0x14c>
	} else if  (rotation == 2){
 8001b74:	883b      	ldrh	r3, [r7, #0]
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d122      	bne.n	8001bc0 <LCD_Draw_Left_S+0x102>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001b7a:	88fb      	ldrh	r3, [r7, #6]
 8001b7c:	3318      	adds	r3, #24
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	88b9      	ldrh	r1, [r7, #4]
 8001b84:	4618      	mov	r0, r3
 8001b86:	f7ff f985 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	b298      	uxth	r0, r3
 8001b90:	88bb      	ldrh	r3, [r7, #4]
 8001b92:	3320      	adds	r3, #32
 8001b94:	b29b      	uxth	r3, r3
 8001b96:	887a      	ldrh	r2, [r7, #2]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	f7ff f97b 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos, color);
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	3330      	adds	r3, #48	@ 0x30
 8001ba2:	b29b      	uxth	r3, r3
 8001ba4:	887a      	ldrh	r2, [r7, #2]
 8001ba6:	88b9      	ldrh	r1, [r7, #4]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7ff f973 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001bae:	88bb      	ldrh	r3, [r7, #4]
 8001bb0:	3320      	adds	r3, #32
 8001bb2:	b299      	uxth	r1, r3
 8001bb4:	887a      	ldrh	r2, [r7, #2]
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f7ff f96b 	bl	8000e94 <LCD_Draw_Block>
}
 8001bbe:	e024      	b.n	8001c0a <LCD_Draw_Left_S+0x14c>
	} else if  (rotation == 3){
 8001bc0:	883b      	ldrh	r3, [r7, #0]
 8001bc2:	2b03      	cmp	r3, #3
 8001bc4:	d121      	bne.n	8001c0a <LCD_Draw_Left_S+0x14c>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001bc6:	887a      	ldrh	r2, [r7, #2]
 8001bc8:	88b9      	ldrh	r1, [r7, #4]
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff f961 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001bd2:	88bb      	ldrh	r3, [r7, #4]
 8001bd4:	3320      	adds	r3, #32
 8001bd6:	b299      	uxth	r1, r3
 8001bd8:	887a      	ldrh	r2, [r7, #2]
 8001bda:	88fb      	ldrh	r3, [r7, #6]
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7ff f959 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001be2:	88fb      	ldrh	r3, [r7, #6]
 8001be4:	3318      	adds	r3, #24
 8001be6:	b298      	uxth	r0, r3
 8001be8:	88bb      	ldrh	r3, [r7, #4]
 8001bea:	3320      	adds	r3, #32
 8001bec:	b29b      	uxth	r3, r3
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	f7ff f94f 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+64, color);
 8001bf6:	88fb      	ldrh	r3, [r7, #6]
 8001bf8:	3318      	adds	r3, #24
 8001bfa:	b298      	uxth	r0, r3
 8001bfc:	88bb      	ldrh	r3, [r7, #4]
 8001bfe:	3340      	adds	r3, #64	@ 0x40
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	4619      	mov	r1, r3
 8001c06:	f7ff f945 	bl	8000e94 <LCD_Draw_Block>
}
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bd90      	pop	{r4, r7, pc}

08001c12 <LCD_Draw_Right_S>:

void LCD_Draw_Right_S(uint16_t Xpos, uint16_t Ypos, uint16_t color, uint16_t rotation){
 8001c12:	b590      	push	{r4, r7, lr}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	4604      	mov	r4, r0
 8001c1a:	4608      	mov	r0, r1
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	461a      	mov	r2, r3
 8001c20:	4623      	mov	r3, r4
 8001c22:	80fb      	strh	r3, [r7, #6]
 8001c24:	4603      	mov	r3, r0
 8001c26:	80bb      	strh	r3, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	807b      	strh	r3, [r7, #2]
 8001c2c:	4613      	mov	r3, r2
 8001c2e:	803b      	strh	r3, [r7, #0]
	if(rotation == 0){
 8001c30:	883b      	ldrh	r3, [r7, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d122      	bne.n	8001c7c <LCD_Draw_Right_S+0x6a>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001c36:	887a      	ldrh	r2, [r7, #2]
 8001c38:	88b9      	ldrh	r1, [r7, #4]
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff f929 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001c42:	88fb      	ldrh	r3, [r7, #6]
 8001c44:	3318      	adds	r3, #24
 8001c46:	b29b      	uxth	r3, r3
 8001c48:	887a      	ldrh	r2, [r7, #2]
 8001c4a:	88b9      	ldrh	r1, [r7, #4]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f7ff f921 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001c52:	88fb      	ldrh	r3, [r7, #6]
 8001c54:	3318      	adds	r3, #24
 8001c56:	b298      	uxth	r0, r3
 8001c58:	88bb      	ldrh	r3, [r7, #4]
 8001c5a:	3320      	adds	r3, #32
 8001c5c:	b29b      	uxth	r3, r3
 8001c5e:	887a      	ldrh	r2, [r7, #2]
 8001c60:	4619      	mov	r1, r3
 8001c62:	f7ff f917 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos+32, color);
 8001c66:	88fb      	ldrh	r3, [r7, #6]
 8001c68:	3330      	adds	r3, #48	@ 0x30
 8001c6a:	b298      	uxth	r0, r3
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	3320      	adds	r3, #32
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	887a      	ldrh	r2, [r7, #2]
 8001c74:	4619      	mov	r1, r3
 8001c76:	f7ff f90d 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
		LCD_Draw_Block(Xpos, Ypos+32, color);
		LCD_Draw_Block(Xpos, Ypos+64, color);
	}
}
 8001c7a:	e070      	b.n	8001d5e <LCD_Draw_Right_S+0x14c>
	} else if  (rotation == 1){
 8001c7c:	883b      	ldrh	r3, [r7, #0]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d122      	bne.n	8001cc8 <LCD_Draw_Right_S+0xb6>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001c82:	88fb      	ldrh	r3, [r7, #6]
 8001c84:	3318      	adds	r3, #24
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	887a      	ldrh	r2, [r7, #2]
 8001c8a:	88b9      	ldrh	r1, [r7, #4]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff f901 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001c92:	88fb      	ldrh	r3, [r7, #6]
 8001c94:	3318      	adds	r3, #24
 8001c96:	b298      	uxth	r0, r3
 8001c98:	88bb      	ldrh	r3, [r7, #4]
 8001c9a:	3320      	adds	r3, #32
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	f7ff f8f7 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001ca6:	88bb      	ldrh	r3, [r7, #4]
 8001ca8:	3320      	adds	r3, #32
 8001caa:	b299      	uxth	r1, r3
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	88fb      	ldrh	r3, [r7, #6]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff f8ef 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	3340      	adds	r3, #64	@ 0x40
 8001cba:	b299      	uxth	r1, r3
 8001cbc:	887a      	ldrh	r2, [r7, #2]
 8001cbe:	88fb      	ldrh	r3, [r7, #6]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff f8e7 	bl	8000e94 <LCD_Draw_Block>
}
 8001cc6:	e04a      	b.n	8001d5e <LCD_Draw_Right_S+0x14c>
	} else if  (rotation == 2){
 8001cc8:	883b      	ldrh	r3, [r7, #0]
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d122      	bne.n	8001d14 <LCD_Draw_Right_S+0x102>
		LCD_Draw_Block(Xpos, Ypos, color);
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	88b9      	ldrh	r1, [r7, #4]
 8001cd2:	88fb      	ldrh	r3, [r7, #6]
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f7ff f8dd 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001cda:	88fb      	ldrh	r3, [r7, #6]
 8001cdc:	3318      	adds	r3, #24
 8001cde:	b29b      	uxth	r3, r3
 8001ce0:	887a      	ldrh	r2, [r7, #2]
 8001ce2:	88b9      	ldrh	r1, [r7, #4]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff f8d5 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	3318      	adds	r3, #24
 8001cee:	b298      	uxth	r0, r3
 8001cf0:	88bb      	ldrh	r3, [r7, #4]
 8001cf2:	3320      	adds	r3, #32
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	887a      	ldrh	r2, [r7, #2]
 8001cf8:	4619      	mov	r1, r3
 8001cfa:	f7ff f8cb 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+48, Ypos+32, color);
 8001cfe:	88fb      	ldrh	r3, [r7, #6]
 8001d00:	3330      	adds	r3, #48	@ 0x30
 8001d02:	b298      	uxth	r0, r3
 8001d04:	88bb      	ldrh	r3, [r7, #4]
 8001d06:	3320      	adds	r3, #32
 8001d08:	b29b      	uxth	r3, r3
 8001d0a:	887a      	ldrh	r2, [r7, #2]
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7ff f8c1 	bl	8000e94 <LCD_Draw_Block>
}
 8001d12:	e024      	b.n	8001d5e <LCD_Draw_Right_S+0x14c>
	} else if  (rotation == 3){
 8001d14:	883b      	ldrh	r3, [r7, #0]
 8001d16:	2b03      	cmp	r3, #3
 8001d18:	d121      	bne.n	8001d5e <LCD_Draw_Right_S+0x14c>
		LCD_Draw_Block(Xpos+24, Ypos, color);
 8001d1a:	88fb      	ldrh	r3, [r7, #6]
 8001d1c:	3318      	adds	r3, #24
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	88b9      	ldrh	r1, [r7, #4]
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f8b5 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos+24, Ypos+32, color);
 8001d2a:	88fb      	ldrh	r3, [r7, #6]
 8001d2c:	3318      	adds	r3, #24
 8001d2e:	b298      	uxth	r0, r3
 8001d30:	88bb      	ldrh	r3, [r7, #4]
 8001d32:	3320      	adds	r3, #32
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	887a      	ldrh	r2, [r7, #2]
 8001d38:	4619      	mov	r1, r3
 8001d3a:	f7ff f8ab 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+32, color);
 8001d3e:	88bb      	ldrh	r3, [r7, #4]
 8001d40:	3320      	adds	r3, #32
 8001d42:	b299      	uxth	r1, r3
 8001d44:	887a      	ldrh	r2, [r7, #2]
 8001d46:	88fb      	ldrh	r3, [r7, #6]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f8a3 	bl	8000e94 <LCD_Draw_Block>
		LCD_Draw_Block(Xpos, Ypos+64, color);
 8001d4e:	88bb      	ldrh	r3, [r7, #4]
 8001d50:	3340      	adds	r3, #64	@ 0x40
 8001d52:	b299      	uxth	r1, r3
 8001d54:	887a      	ldrh	r2, [r7, #2]
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff f89b 	bl	8000e94 <LCD_Draw_Block>
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd90      	pop	{r4, r7, pc}
	...

08001d68 <RNG_Init>:

#include <RNG_Driver.h>
#include <stdio.h>
RNG_HandleTypeDef hrng;

void RNG_Init() {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
    __HAL_RCC_RNG_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b0b      	ldr	r3, [pc, #44]	@ (8001da0 <RNG_Init+0x38>)
 8001d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d76:	4a0a      	ldr	r2, [pc, #40]	@ (8001da0 <RNG_Init+0x38>)
 8001d78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d7c:	6353      	str	r3, [r2, #52]	@ 0x34
 8001d7e:	4b08      	ldr	r3, [pc, #32]	@ (8001da0 <RNG_Init+0x38>)
 8001d80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]
    hrng.Instance = RNG;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	@ (8001da4 <RNG_Init+0x3c>)
 8001d8c:	4a06      	ldr	r2, [pc, #24]	@ (8001da8 <RNG_Init+0x40>)
 8001d8e:	601a      	str	r2, [r3, #0]
    HAL_RNG_Init(&hrng);
 8001d90:	4804      	ldr	r0, [pc, #16]	@ (8001da4 <RNG_Init+0x3c>)
 8001d92:	f003 ff4b 	bl	8005c2c <HAL_RNG_Init>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023800 	.word	0x40023800
 8001da4:	200271f4 	.word	0x200271f4
 8001da8:	50060800 	.word	0x50060800

08001dac <RNG_Generate>:

uint32_t RNG_Generate() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
    uint32_t randomValue;
    HAL_RNG_GenerateRandomNumber(&hrng, &randomValue);
 8001db2:	463b      	mov	r3, r7
 8001db4:	4619      	mov	r1, r3
 8001db6:	4814      	ldr	r0, [pc, #80]	@ (8001e08 <RNG_Generate+0x5c>)
 8001db8:	f003 ff62 	bl	8005c80 <HAL_RNG_GenerateRandomNumber>
    int t = (randomValue)%7;
 8001dbc:	6839      	ldr	r1, [r7, #0]
 8001dbe:	4b13      	ldr	r3, [pc, #76]	@ (8001e0c <RNG_Generate+0x60>)
 8001dc0:	fba3 2301 	umull	r2, r3, r3, r1
 8001dc4:	1aca      	subs	r2, r1, r3
 8001dc6:	0852      	lsrs	r2, r2, #1
 8001dc8:	4413      	add	r3, r2
 8001dca:	089a      	lsrs	r2, r3, #2
 8001dcc:	4613      	mov	r3, r2
 8001dce:	00db      	lsls	r3, r3, #3
 8001dd0:	1a9b      	subs	r3, r3, r2
 8001dd2:	1aca      	subs	r2, r1, r3
 8001dd4:	607a      	str	r2, [r7, #4]
    printf("TEST");
 8001dd6:	480e      	ldr	r0, [pc, #56]	@ (8001e10 <RNG_Generate+0x64>)
 8001dd8:	f004 fde0 	bl	800699c <iprintf>
    printf("%d\n",t);
 8001ddc:	6879      	ldr	r1, [r7, #4]
 8001dde:	480d      	ldr	r0, [pc, #52]	@ (8001e14 <RNG_Generate+0x68>)
 8001de0:	f004 fddc 	bl	800699c <iprintf>
    return (randomValue)%7;
 8001de4:	683a      	ldr	r2, [r7, #0]
 8001de6:	4b09      	ldr	r3, [pc, #36]	@ (8001e0c <RNG_Generate+0x60>)
 8001de8:	fba3 1302 	umull	r1, r3, r3, r2
 8001dec:	1ad1      	subs	r1, r2, r3
 8001dee:	0849      	lsrs	r1, r1, #1
 8001df0:	440b      	add	r3, r1
 8001df2:	0899      	lsrs	r1, r3, #2
 8001df4:	460b      	mov	r3, r1
 8001df6:	00db      	lsls	r3, r3, #3
 8001df8:	1a5b      	subs	r3, r3, r1
 8001dfa:	1ad1      	subs	r1, r2, r3
 8001dfc:	460b      	mov	r3, r1
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	200271f4 	.word	0x200271f4
 8001e0c:	24924925 	.word	0x24924925
 8001e10:	08007b2c 	.word	0x08007b2c
 8001e14:	08007b34 	.word	0x08007b34

08001e18 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 8001e1c:	f000 f9fe 	bl	800221c <LCD_IO_Init>

  /* Configure LCD */
  ili9341_Write_Reg(0xCA);
 8001e20:	20ca      	movs	r0, #202	@ 0xca
 8001e22:	f000 f943 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0xC3);				//param 1
 8001e26:	20c3      	movs	r0, #195	@ 0xc3
 8001e28:	f000 f94d 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x08);				//param 2
 8001e2c:	2008      	movs	r0, #8
 8001e2e:	f000 f94a 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x50);				//param 3
 8001e32:	2050      	movs	r0, #80	@ 0x50
 8001e34:	f000 f947 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERB); //CF
 8001e38:	20cf      	movs	r0, #207	@ 0xcf
 8001e3a:	f000 f937 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);				//param 1
 8001e3e:	2000      	movs	r0, #0
 8001e40:	f000 f941 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0xC1);				//param 2
 8001e44:	20c1      	movs	r0, #193	@ 0xc1
 8001e46:	f000 f93e 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x30);				//param 3
 8001e4a:	2030      	movs	r0, #48	@ 0x30
 8001e4c:	f000 f93b 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER_SEQ); //ED
 8001e50:	20ed      	movs	r0, #237	@ 0xed
 8001e52:	f000 f92b 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x64);
 8001e56:	2064      	movs	r0, #100	@ 0x64
 8001e58:	f000 f935 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x03);
 8001e5c:	2003      	movs	r0, #3
 8001e5e:	f000 f932 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x12);
 8001e62:	2012      	movs	r0, #18
 8001e64:	f000 f92f 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x81);
 8001e68:	2081      	movs	r0, #129	@ 0x81
 8001e6a:	f000 f92c 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCA);
 8001e6e:	20e8      	movs	r0, #232	@ 0xe8
 8001e70:	f000 f91c 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x85);
 8001e74:	2085      	movs	r0, #133	@ 0x85
 8001e76:	f000 f926 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f000 f923 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8001e80:	2078      	movs	r0, #120	@ 0x78
 8001e82:	f000 f920 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWERA);
 8001e86:	20cb      	movs	r0, #203	@ 0xcb
 8001e88:	f000 f910 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x39);
 8001e8c:	2039      	movs	r0, #57	@ 0x39
 8001e8e:	f000 f91a 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2C);
 8001e92:	202c      	movs	r0, #44	@ 0x2c
 8001e94:	f000 f917 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001e98:	2000      	movs	r0, #0
 8001e9a:	f000 f914 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x34);
 8001e9e:	2034      	movs	r0, #52	@ 0x34
 8001ea0:	f000 f911 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x02);
 8001ea4:	2002      	movs	r0, #2
 8001ea6:	f000 f90e 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_PRC);
 8001eaa:	20f7      	movs	r0, #247	@ 0xf7
 8001eac:	f000 f8fe 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x20);
 8001eb0:	2020      	movs	r0, #32
 8001eb2:	f000 f908 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DTCB);
 8001eb6:	20ea      	movs	r0, #234	@ 0xea
 8001eb8:	f000 f8f8 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f000 f902 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f000 f8ff 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_FRMCTR1);
 8001ec8:	20b1      	movs	r0, #177	@ 0xb1
 8001eca:	f000 f8ef 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f000 f8f9 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8001ed4:	201b      	movs	r0, #27
 8001ed6:	f000 f8f6 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001eda:	20b6      	movs	r0, #182	@ 0xb6
 8001edc:	f000 f8e6 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001ee0:	200a      	movs	r0, #10
 8001ee2:	f000 f8f0 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA2);
 8001ee6:	20a2      	movs	r0, #162	@ 0xa2
 8001ee8:	f000 f8ed 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER1);
 8001eec:	20c0      	movs	r0, #192	@ 0xc0
 8001eee:	f000 f8dd 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001ef2:	2010      	movs	r0, #16
 8001ef4:	f000 f8e7 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_POWER2);
 8001ef8:	20c1      	movs	r0, #193	@ 0xc1
 8001efa:	f000 f8d7 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x10);
 8001efe:	2010      	movs	r0, #16
 8001f00:	f000 f8e1 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM1);
 8001f04:	20c5      	movs	r0, #197	@ 0xc5
 8001f06:	f000 f8d1 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x45);
 8001f0a:	2045      	movs	r0, #69	@ 0x45
 8001f0c:	f000 f8db 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x15);
 8001f10:	2015      	movs	r0, #21
 8001f12:	f000 f8d8 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_VCOM2);
 8001f16:	20c7      	movs	r0, #199	@ 0xc7
 8001f18:	f000 f8c8 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x90);
 8001f1c:	2090      	movs	r0, #144	@ 0x90
 8001f1e:	f000 f8d2 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_MAC);
 8001f22:	2036      	movs	r0, #54	@ 0x36
 8001f24:	f000 f8c2 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0xC8);
 8001f28:	20c8      	movs	r0, #200	@ 0xc8
 8001f2a:	f000 f8cc 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_3GAMMA_EN);
 8001f2e:	20f2      	movs	r0, #242	@ 0xf2
 8001f30:	f000 f8bc 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f34:	2000      	movs	r0, #0
 8001f36:	f000 f8c6 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_RGB_INTERFACE);
 8001f3a:	20b0      	movs	r0, #176	@ 0xb0
 8001f3c:	f000 f8b6 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0xC2);
 8001f40:	20c2      	movs	r0, #194	@ 0xc2
 8001f42:	f000 f8c0 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_DFC);
 8001f46:	20b6      	movs	r0, #182	@ 0xb6
 8001f48:	f000 f8b0 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x0A);
 8001f4c:	200a      	movs	r0, #10
 8001f4e:	f000 f8ba 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0xA7);
 8001f52:	20a7      	movs	r0, #167	@ 0xa7
 8001f54:	f000 f8b7 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x27);
 8001f58:	2027      	movs	r0, #39	@ 0x27
 8001f5a:	f000 f8b4 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8001f5e:	2004      	movs	r0, #4
 8001f60:	f000 f8b1 	bl	80020c6 <ili9341_Send_Data>

  /* Colomn address set */
  ili9341_Write_Reg(LCD_COLUMN_ADDR);
 8001f64:	202a      	movs	r0, #42	@ 0x2a
 8001f66:	f000 f8a1 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f6a:	2000      	movs	r0, #0
 8001f6c:	f000 f8ab 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f70:	2000      	movs	r0, #0
 8001f72:	f000 f8a8 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f76:	2000      	movs	r0, #0
 8001f78:	f000 f8a5 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0xEF);
 8001f7c:	20ef      	movs	r0, #239	@ 0xef
 8001f7e:	f000 f8a2 	bl	80020c6 <ili9341_Send_Data>

  /* Page address set */
  ili9341_Write_Reg(LCD_PAGE_ADDR);
 8001f82:	202b      	movs	r0, #43	@ 0x2b
 8001f84:	f000 f892 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f000 f89c 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f000 f899 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x01);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f000 f896 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3F);
 8001f9a:	203f      	movs	r0, #63	@ 0x3f
 8001f9c:	f000 f893 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_INTERFACE);
 8001fa0:	20f6      	movs	r0, #246	@ 0xf6
 8001fa2:	f000 f883 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f000 f88d 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 8001fac:	2000      	movs	r0, #0
 8001fae:	f000 f88a 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x06);
 8001fb2:	2006      	movs	r0, #6
 8001fb4:	f000 f887 	bl	80020c6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_GRAM);
 8001fb8:	202c      	movs	r0, #44	@ 0x2c
 8001fba:	f000 f877 	bl	80020ac <ili9341_Write_Reg>
  LCD_Delay(200);
 8001fbe:	20c8      	movs	r0, #200	@ 0xc8
 8001fc0:	f000 f9e8 	bl	8002394 <LCD_Delay>

  ili9341_Write_Reg(LCD_GAMMA);
 8001fc4:	2026      	movs	r0, #38	@ 0x26
 8001fc6:	f000 f871 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x01);
 8001fca:	2001      	movs	r0, #1
 8001fcc:	f000 f87b 	bl	80020c6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_PGAMMA);
 8001fd0:	20e0      	movs	r0, #224	@ 0xe0
 8001fd2:	f000 f86b 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x0F);
 8001fd6:	200f      	movs	r0, #15
 8001fd8:	f000 f875 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x29);
 8001fdc:	2029      	movs	r0, #41	@ 0x29
 8001fde:	f000 f872 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x24);
 8001fe2:	2024      	movs	r0, #36	@ 0x24
 8001fe4:	f000 f86f 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8001fe8:	200c      	movs	r0, #12
 8001fea:	f000 f86c 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0E);
 8001fee:	200e      	movs	r0, #14
 8001ff0:	f000 f869 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 8001ff4:	2009      	movs	r0, #9
 8001ff6:	f000 f866 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x4E);
 8001ffa:	204e      	movs	r0, #78	@ 0x4e
 8001ffc:	f000 f863 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x78);
 8002000:	2078      	movs	r0, #120	@ 0x78
 8002002:	f000 f860 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x3C);
 8002006:	203c      	movs	r0, #60	@ 0x3c
 8002008:	f000 f85d 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x09);
 800200c:	2009      	movs	r0, #9
 800200e:	f000 f85a 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x13);
 8002012:	2013      	movs	r0, #19
 8002014:	f000 f857 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 8002018:	2005      	movs	r0, #5
 800201a:	f000 f854 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x17);
 800201e:	2017      	movs	r0, #23
 8002020:	f000 f851 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 8002024:	2011      	movs	r0, #17
 8002026:	f000 f84e 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x00);
 800202a:	2000      	movs	r0, #0
 800202c:	f000 f84b 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Write_Reg(LCD_NGAMMA);
 8002030:	20e1      	movs	r0, #225	@ 0xe1
 8002032:	f000 f83b 	bl	80020ac <ili9341_Write_Reg>
  ili9341_Send_Data(0x00);
 8002036:	2000      	movs	r0, #0
 8002038:	f000 f845 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x16);
 800203c:	2016      	movs	r0, #22
 800203e:	f000 f842 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x1B);
 8002042:	201b      	movs	r0, #27
 8002044:	f000 f83f 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x04);
 8002048:	2004      	movs	r0, #4
 800204a:	f000 f83c 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x11);
 800204e:	2011      	movs	r0, #17
 8002050:	f000 f839 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x07);
 8002054:	2007      	movs	r0, #7
 8002056:	f000 f836 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x31);
 800205a:	2031      	movs	r0, #49	@ 0x31
 800205c:	f000 f833 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x33);
 8002060:	2033      	movs	r0, #51	@ 0x33
 8002062:	f000 f830 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x42);
 8002066:	2042      	movs	r0, #66	@ 0x42
 8002068:	f000 f82d 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x05);
 800206c:	2005      	movs	r0, #5
 800206e:	f000 f82a 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0C);
 8002072:	200c      	movs	r0, #12
 8002074:	f000 f827 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0A);
 8002078:	200a      	movs	r0, #10
 800207a:	f000 f824 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x28);
 800207e:	2028      	movs	r0, #40	@ 0x28
 8002080:	f000 f821 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x2F);
 8002084:	202f      	movs	r0, #47	@ 0x2f
 8002086:	f000 f81e 	bl	80020c6 <ili9341_Send_Data>
  ili9341_Send_Data(0x0F);
 800208a:	200f      	movs	r0, #15
 800208c:	f000 f81b 	bl	80020c6 <ili9341_Send_Data>

  ili9341_Write_Reg(LCD_SLEEP_OUT);
 8002090:	2011      	movs	r0, #17
 8002092:	f000 f80b 	bl	80020ac <ili9341_Write_Reg>
  LCD_Delay(200);
 8002096:	20c8      	movs	r0, #200	@ 0xc8
 8002098:	f000 f97c 	bl	8002394 <LCD_Delay>
  ili9341_Write_Reg(LCD_DISPLAY_ON);
 800209c:	2029      	movs	r0, #41	@ 0x29
 800209e:	f000 f805 	bl	80020ac <ili9341_Write_Reg>
  /* GRAM start writing */
  ili9341_Write_Reg(LCD_GRAM);
 80020a2:	202c      	movs	r0, #44	@ 0x2c
 80020a4:	f000 f802 	bl	80020ac <ili9341_Write_Reg>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}

080020ac <ili9341_Write_Reg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Write_Reg(uint8_t LCD_Reg)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 80020b6:	79fb      	ldrb	r3, [r7, #7]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f000 f949 	bl	8002350 <LCD_IO_WriteReg>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <ili9341_Send_Data>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_Send_Data(uint16_t RegValue)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 80020d0:	88fb      	ldrh	r3, [r7, #6]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f91a 	bl	800230c <LCD_IO_WriteData>
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <SPI_Init>:

/**
  * @brief  SPI Bus initialization
  */
static void SPI_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 80020e4:	4819      	ldr	r0, [pc, #100]	@ (800214c <SPI_Init+0x6c>)
 80020e6:	f004 f816 	bl	8006116 <HAL_SPI_GetState>
 80020ea:	4603      	mov	r3, r0
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d12b      	bne.n	8002148 <SPI_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPI;
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <SPI_Init+0x6c>)
 80020f2:	4a17      	ldr	r2, [pc, #92]	@ (8002150 <SPI_Init+0x70>)
 80020f4:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80020f6:	4b15      	ldr	r3, [pc, #84]	@ (800214c <SPI_Init+0x6c>)
 80020f8:	2218      	movs	r2, #24
 80020fa:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <SPI_Init+0x6c>)
 80020fe:	2200      	movs	r2, #0
 8002100:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8002102:	4b12      	ldr	r3, [pc, #72]	@ (800214c <SPI_Init+0x6c>)
 8002104:	2200      	movs	r2, #0
 8002106:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8002108:	4b10      	ldr	r3, [pc, #64]	@ (800214c <SPI_Init+0x6c>)
 800210a:	2200      	movs	r2, #0
 800210c:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800210e:	4b0f      	ldr	r3, [pc, #60]	@ (800214c <SPI_Init+0x6c>)
 8002110:	2200      	movs	r2, #0
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8002114:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <SPI_Init+0x6c>)
 8002116:	2207      	movs	r2, #7
 8002118:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800211a:	4b0c      	ldr	r3, [pc, #48]	@ (800214c <SPI_Init+0x6c>)
 800211c:	2200      	movs	r2, #0
 800211e:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8002120:	4b0a      	ldr	r3, [pc, #40]	@ (800214c <SPI_Init+0x6c>)
 8002122:	2200      	movs	r2, #0
 8002124:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <SPI_Init+0x6c>)
 8002128:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800212c:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <SPI_Init+0x6c>)
 8002130:	2200      	movs	r2, #0
 8002132:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8002134:	4b05      	ldr	r3, [pc, #20]	@ (800214c <SPI_Init+0x6c>)
 8002136:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800213a:	605a      	str	r2, [r3, #4]

    SPI_MspInit(&SpiHandle);
 800213c:	4803      	ldr	r0, [pc, #12]	@ (800214c <SPI_Init+0x6c>)
 800213e:	f000 f833 	bl	80021a8 <SPI_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8002142:	4802      	ldr	r0, [pc, #8]	@ (800214c <SPI_Init+0x6c>)
 8002144:	f003 fdf2 	bl	8005d2c <HAL_SPI_Init>
  }
}
 8002148:	bf00      	nop
 800214a:	bd80      	pop	{r7, pc}
 800214c:	20027204 	.word	0x20027204
 8002150:	40015000 	.word	0x40015000

08002154 <SPI_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPI_Write(uint16_t Value)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b084      	sub	sp, #16
 8002158:	af00      	add	r7, sp, #0
 800215a:	4603      	mov	r3, r0
 800215c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpiTimeout);
 8002162:	4b09      	ldr	r3, [pc, #36]	@ (8002188 <SPI_Write+0x34>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	1db9      	adds	r1, r7, #6
 8002168:	2201      	movs	r2, #1
 800216a:	4808      	ldr	r0, [pc, #32]	@ (800218c <SPI_Write+0x38>)
 800216c:	f003 fe8f 	bl	8005e8e <HAL_SPI_Transmit>
 8002170:	4603      	mov	r3, r0
 8002172:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if(status != HAL_OK)
 8002174:	7bfb      	ldrb	r3, [r7, #15]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d001      	beq.n	800217e <SPI_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPI_Error();
 800217a:	f000 f809 	bl	8002190 <SPI_Error>
  }
}
 800217e:	bf00      	nop
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	20000e0c 	.word	0x20000e0c
 800218c:	20027204 	.word	0x20027204

08002190 <SPI_Error>:

/**
  * @brief  SPI error treatment function.
  */
static void SPI_Error(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8002194:	4803      	ldr	r0, [pc, #12]	@ (80021a4 <SPI_Error+0x14>)
 8002196:	f003 fe52 	bl	8005e3e <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPI_Init();
 800219a:	f7ff ffa1 	bl	80020e0 <SPI_Init>
}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	20027204 	.word	0x20027204

080021a8 <SPI_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	@ 0x28
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPI clock */
  DISCOVERY_SPI_CLK_ENABLE();
 80021b0:	2300      	movs	r3, #0
 80021b2:	613b      	str	r3, [r7, #16]
 80021b4:	4b17      	ldr	r3, [pc, #92]	@ (8002214 <SPI_MspInit+0x6c>)
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	4a16      	ldr	r2, [pc, #88]	@ (8002214 <SPI_MspInit+0x6c>)
 80021ba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021be:	6453      	str	r3, [r2, #68]	@ 0x44
 80021c0:	4b14      	ldr	r3, [pc, #80]	@ (8002214 <SPI_MspInit+0x6c>)
 80021c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPI_GPIO_CLK_ENABLE();
 80021cc:	2300      	movs	r3, #0
 80021ce:	60fb      	str	r3, [r7, #12]
 80021d0:	4b10      	ldr	r3, [pc, #64]	@ (8002214 <SPI_MspInit+0x6c>)
 80021d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021d4:	4a0f      	ldr	r2, [pc, #60]	@ (8002214 <SPI_MspInit+0x6c>)
 80021d6:	f043 0320 	orr.w	r3, r3, #32
 80021da:	6313      	str	r3, [r2, #48]	@ 0x30
 80021dc:	4b0d      	ldr	r3, [pc, #52]	@ (8002214 <SPI_MspInit+0x6c>)
 80021de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e0:	f003 0320 	and.w	r3, r3, #32
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPI_SCK_PIN | DISCOVERY_SPI_MOSI_PIN | DISCOVERY_SPI_MISO_PIN);
 80021e8:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80021ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80021ee:	2302      	movs	r3, #2
 80021f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80021f2:	2302      	movs	r3, #2
 80021f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80021f6:	2301      	movs	r3, #1
 80021f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPI_AF;
 80021fa:	2305      	movs	r3, #5
 80021fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPI_GPIO_PORT, &GPIO_InitStructure);
 80021fe:	f107 0314 	add.w	r3, r7, #20
 8002202:	4619      	mov	r1, r3
 8002204:	4804      	ldr	r0, [pc, #16]	@ (8002218 <SPI_MspInit+0x70>)
 8002206:	f001 f931 	bl	800346c <HAL_GPIO_Init>
}
 800220a:	bf00      	nop
 800220c:	3728      	adds	r7, #40	@ 0x28
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800
 8002218:	40021400 	.word	0x40021400

0800221c <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b088      	sub	sp, #32
 8002220:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if(Is_LCD_IO_Initialized == 0)
 8002222:	4b36      	ldr	r3, [pc, #216]	@ (80022fc <LCD_IO_Init+0xe0>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d164      	bne.n	80022f4 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 800222a:	4b34      	ldr	r3, [pc, #208]	@ (80022fc <LCD_IO_Init+0xe0>)
 800222c:	2201      	movs	r2, #1
 800222e:	701a      	strb	r2, [r3, #0]

    /* Configure in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8002230:	2300      	movs	r3, #0
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	4b32      	ldr	r3, [pc, #200]	@ (8002300 <LCD_IO_Init+0xe4>)
 8002236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002238:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <LCD_IO_Init+0xe4>)
 800223a:	f043 0308 	orr.w	r3, r3, #8
 800223e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <LCD_IO_Init+0xe4>)
 8002242:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	60bb      	str	r3, [r7, #8]
 800224a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 800224c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8002252:	2301      	movs	r3, #1
 8002254:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002256:	2300      	movs	r3, #0
 8002258:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 800225a:	2302      	movs	r3, #2
 800225c:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 800225e:	f107 030c 	add.w	r3, r7, #12
 8002262:	4619      	mov	r1, r3
 8002264:	4827      	ldr	r0, [pc, #156]	@ (8002304 <LCD_IO_Init+0xe8>)
 8002266:	f001 f901 	bl	800346c <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 800226a:	2300      	movs	r3, #0
 800226c:	607b      	str	r3, [r7, #4]
 800226e:	4b24      	ldr	r3, [pc, #144]	@ (8002300 <LCD_IO_Init+0xe4>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002272:	4a23      	ldr	r2, [pc, #140]	@ (8002300 <LCD_IO_Init+0xe4>)
 8002274:	f043 0308 	orr.w	r3, r3, #8
 8002278:	6313      	str	r3, [r2, #48]	@ 0x30
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <LCD_IO_Init+0xe4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	607b      	str	r3, [r7, #4]
 8002284:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8002286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800228a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 800228c:	2301      	movs	r3, #1
 800228e:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8002290:	2300      	movs	r3, #0
 8002292:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8002294:	2302      	movs	r3, #2
 8002296:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8002298:	f107 030c 	add.w	r3, r7, #12
 800229c:	4619      	mov	r1, r3
 800229e:	4819      	ldr	r0, [pc, #100]	@ (8002304 <LCD_IO_Init+0xe8>)
 80022a0:	f001 f8e4 	bl	800346c <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 80022a4:	2300      	movs	r3, #0
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	4b15      	ldr	r3, [pc, #84]	@ (8002300 <LCD_IO_Init+0xe4>)
 80022aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ac:	4a14      	ldr	r2, [pc, #80]	@ (8002300 <LCD_IO_Init+0xe4>)
 80022ae:	f043 0304 	orr.w	r3, r3, #4
 80022b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b4:	4b12      	ldr	r3, [pc, #72]	@ (8002300 <LCD_IO_Init+0xe4>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b8:	f003 0304 	and.w	r3, r3, #4
 80022bc:	603b      	str	r3, [r7, #0]
 80022be:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 80022c0:	2304      	movs	r3, #4
 80022c2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 80022c4:	2301      	movs	r3, #1
 80022c6:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 80022cc:	2302      	movs	r3, #2
 80022ce:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 80022d0:	f107 030c 	add.w	r3, r7, #12
 80022d4:	4619      	mov	r1, r3
 80022d6:	480c      	ldr	r0, [pc, #48]	@ (8002308 <LCD_IO_Init+0xec>)
 80022d8:	f001 f8c8 	bl	800346c <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 80022dc:	2200      	movs	r2, #0
 80022de:	2104      	movs	r1, #4
 80022e0:	4809      	ldr	r0, [pc, #36]	@ (8002308 <LCD_IO_Init+0xec>)
 80022e2:	f001 fb7b 	bl	80039dc <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 80022e6:	2201      	movs	r2, #1
 80022e8:	2104      	movs	r1, #4
 80022ea:	4807      	ldr	r0, [pc, #28]	@ (8002308 <LCD_IO_Init+0xec>)
 80022ec:	f001 fb76 	bl	80039dc <HAL_GPIO_WritePin>

    SPI_Init();
 80022f0:	f7ff fef6 	bl	80020e0 <SPI_Init>
  }
}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	2002725c 	.word	0x2002725c
 8002300:	40023800 	.word	0x40023800
 8002304:	40020c00 	.word	0x40020c00
 8002308:	40020800 	.word	0x40020800

0800230c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8002316:	2201      	movs	r2, #1
 8002318:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800231c:	480a      	ldr	r0, [pc, #40]	@ (8002348 <LCD_IO_WriteData+0x3c>)
 800231e:	f001 fb5d 	bl	80039dc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8002322:	2200      	movs	r2, #0
 8002324:	2104      	movs	r1, #4
 8002326:	4809      	ldr	r0, [pc, #36]	@ (800234c <LCD_IO_WriteData+0x40>)
 8002328:	f001 fb58 	bl	80039dc <HAL_GPIO_WritePin>
  SPI_Write(RegValue);
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	4618      	mov	r0, r3
 8002330:	f7ff ff10 	bl	8002154 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8002334:	2201      	movs	r2, #1
 8002336:	2104      	movs	r1, #4
 8002338:	4804      	ldr	r0, [pc, #16]	@ (800234c <LCD_IO_WriteData+0x40>)
 800233a:	f001 fb4f 	bl	80039dc <HAL_GPIO_WritePin>
}
 800233e:	bf00      	nop
 8002340:	3708      	adds	r7, #8
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40020c00 	.word	0x40020c00
 800234c:	40020800 	.word	0x40020800

08002350 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	4603      	mov	r3, r0
 8002358:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 800235a:	2200      	movs	r2, #0
 800235c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002360:	480a      	ldr	r0, [pc, #40]	@ (800238c <LCD_IO_WriteReg+0x3c>)
 8002362:	f001 fb3b 	bl	80039dc <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8002366:	2200      	movs	r2, #0
 8002368:	2104      	movs	r1, #4
 800236a:	4809      	ldr	r0, [pc, #36]	@ (8002390 <LCD_IO_WriteReg+0x40>)
 800236c:	f001 fb36 	bl	80039dc <HAL_GPIO_WritePin>
  SPI_Write(Reg);
 8002370:	79fb      	ldrb	r3, [r7, #7]
 8002372:	b29b      	uxth	r3, r3
 8002374:	4618      	mov	r0, r3
 8002376:	f7ff feed 	bl	8002154 <SPI_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 800237a:	2201      	movs	r2, #1
 800237c:	2104      	movs	r1, #4
 800237e:	4804      	ldr	r0, [pc, #16]	@ (8002390 <LCD_IO_WriteReg+0x40>)
 8002380:	f001 fb2c 	bl	80039dc <HAL_GPIO_WritePin>
}
 8002384:	bf00      	nop
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40020800 	.word	0x40020800

08002394 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f000 fefd 	bl	800319c <HAL_Delay>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80023b0:	f000 fe82 	bl	80030b8 <HAL_Init>

  // The default system configuration function is "suspect" so we need to make our own clock configuration
  // Note - You, the developer, MAY have to play with some of this coniguration as you progress in your project
  SystemClockOverride();
 80023b4:	f000 f80e 	bl	80023d4 <SystemClockOverride>

  ApplicationInit(); // Initializes the LCD functionality
 80023b8:	f7fe f8f0 	bl	800059c <ApplicationInit>

//  HAL_Delay(5000);

//  LCD_Visual_Demo();

  HAL_Delay(5000);
 80023bc:	f241 3088 	movw	r0, #5000	@ 0x1388
 80023c0:	f000 feec 	bl	800319c <HAL_Delay>
  printf("HELLOOOOOOO\n");
 80023c4:	4802      	ldr	r0, [pc, #8]	@ (80023d0 <main+0x24>)
 80023c6:	f004 fb51 	bl	8006a6c <puts>
//  while (1)
//  {
//
//  }

  while (1) {
 80023ca:	bf00      	nop
 80023cc:	e7fd      	b.n	80023ca <main+0x1e>
 80023ce:	bf00      	nop
 80023d0:	08007b38 	.word	0x08007b38

080023d4 <SystemClockOverride>:
    Error_Handler();
  }
}

void SystemClockOverride(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b092      	sub	sp, #72	@ 0x48
 80023d8:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	603b      	str	r3, [r7, #0]
 80023de:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <SystemClockOverride+0x7c>)
 80023e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e2:	4a1b      	ldr	r2, [pc, #108]	@ (8002450 <SystemClockOverride+0x7c>)
 80023e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ea:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <SystemClockOverride+0x7c>)
 80023ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	683b      	ldr	r3, [r7, #0]

  // __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1); // not needed, power scaling consumption for when not running at max freq.

  /* Enable HSE Osc and activate PLL with HSE source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023f6:	2301      	movs	r3, #1
 80023f8:	607b      	str	r3, [r7, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80023fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80023fe:	60bb      	str	r3, [r7, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002400:	2302      	movs	r3, #2
 8002402:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002404:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002408:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLM = 8;
 800240a:	2308      	movs	r3, #8
 800240c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLN = 336;
 800240e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8002412:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002414:	2302      	movs	r3, #2
 8002416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002418:	2307      	movs	r3, #7
 800241a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800241c:	1d3b      	adds	r3, r7, #4
 800241e:	4618      	mov	r0, r3
 8002420:	f002 fdc0 	bl	8004fa4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2 clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8002424:	230f      	movs	r3, #15
 8002426:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002428:	2302      	movs	r3, #2
 800242a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800242c:	2300      	movs	r3, #0
 800242e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002430:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002434:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002436:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800243a:	647b      	str	r3, [r7, #68]	@ 0x44
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800243c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002440:	2105      	movs	r1, #5
 8002442:	4618      	mov	r0, r3
 8002444:	f003 f826 	bl	8005494 <HAL_RCC_ClockConfig>
}
 8002448:	bf00      	nop
 800244a:	3748      	adds	r7, #72	@ 0x48
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	40023800 	.word	0x40023800

08002454 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002454:	b480      	push	{r7}
 8002456:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002458:	b672      	cpsid	i
}
 800245a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800245c:	bf00      	nop
 800245e:	e7fd      	b.n	800245c <Error_Handler+0x8>

08002460 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	607b      	str	r3, [r7, #4]
 800246a:	4b10      	ldr	r3, [pc, #64]	@ (80024ac <HAL_MspInit+0x4c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246e:	4a0f      	ldr	r2, [pc, #60]	@ (80024ac <HAL_MspInit+0x4c>)
 8002470:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002474:	6453      	str	r3, [r2, #68]	@ 0x44
 8002476:	4b0d      	ldr	r3, [pc, #52]	@ (80024ac <HAL_MspInit+0x4c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800247a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800247e:	607b      	str	r3, [r7, #4]
 8002480:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	603b      	str	r3, [r7, #0]
 8002486:	4b09      	ldr	r3, [pc, #36]	@ (80024ac <HAL_MspInit+0x4c>)
 8002488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800248a:	4a08      	ldr	r2, [pc, #32]	@ (80024ac <HAL_MspInit+0x4c>)
 800248c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002490:	6413      	str	r3, [r2, #64]	@ 0x40
 8002492:	4b06      	ldr	r3, [pc, #24]	@ (80024ac <HAL_MspInit+0x4c>)
 8002494:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002496:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800249a:	603b      	str	r3, [r7, #0]
 800249c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800249e:	2007      	movs	r0, #7
 80024a0:	f000 ff94 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024a4:	bf00      	nop
 80024a6:	3708      	adds	r7, #8
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	40023800 	.word	0x40023800

080024b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b08a      	sub	sp, #40	@ 0x28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	2200      	movs	r2, #0
 80024be:	601a      	str	r2, [r3, #0]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	609a      	str	r2, [r3, #8]
 80024c4:	60da      	str	r2, [r3, #12]
 80024c6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a29      	ldr	r2, [pc, #164]	@ (8002574 <HAL_I2C_MspInit+0xc4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d14b      	bne.n	800256a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b28      	ldr	r3, [pc, #160]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024da:	4a27      	ldr	r2, [pc, #156]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 80024dc:	f043 0304 	orr.w	r3, r3, #4
 80024e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80024e2:	4b25      	ldr	r3, [pc, #148]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e6:	f003 0304 	and.w	r3, r3, #4
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b21      	ldr	r3, [pc, #132]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024f6:	4a20      	ldr	r2, [pc, #128]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024fe:	4b1e      	ldr	r3, [pc, #120]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800250a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800250e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002510:	2312      	movs	r3, #18
 8002512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002514:	2300      	movs	r3, #0
 8002516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002518:	2303      	movs	r3, #3
 800251a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800251c:	2304      	movs	r3, #4
 800251e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002520:	f107 0314 	add.w	r3, r7, #20
 8002524:	4619      	mov	r1, r3
 8002526:	4815      	ldr	r0, [pc, #84]	@ (800257c <HAL_I2C_MspInit+0xcc>)
 8002528:	f000 ffa0 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800252c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002530:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002532:	2312      	movs	r3, #18
 8002534:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002536:	2300      	movs	r3, #0
 8002538:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253a:	2303      	movs	r3, #3
 800253c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800253e:	2304      	movs	r3, #4
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002542:	f107 0314 	add.w	r3, r7, #20
 8002546:	4619      	mov	r1, r3
 8002548:	480d      	ldr	r0, [pc, #52]	@ (8002580 <HAL_I2C_MspInit+0xd0>)
 800254a:	f000 ff8f 	bl	800346c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	60bb      	str	r3, [r7, #8]
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a08      	ldr	r2, [pc, #32]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 8002558:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_I2C_MspInit+0xc8>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002566:	60bb      	str	r3, [r7, #8]
 8002568:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C3_MspInit 1 */

  }

}
 800256a:	bf00      	nop
 800256c:	3728      	adds	r7, #40	@ 0x28
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40005c00 	.word	0x40005c00
 8002578:	40023800 	.word	0x40023800
 800257c:	40020800 	.word	0x40020800
 8002580:	40020000 	.word	0x40020000

08002584 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b09a      	sub	sp, #104	@ 0x68
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800258c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
 8002594:	605a      	str	r2, [r3, #4]
 8002596:	609a      	str	r2, [r3, #8]
 8002598:	60da      	str	r2, [r3, #12]
 800259a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800259c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025a0:	2230      	movs	r2, #48	@ 0x30
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f004 fb61 	bl	8006c6c <memset>
  if(hltdc->Instance==LTDC)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a81      	ldr	r2, [pc, #516]	@ (80027b4 <HAL_LTDC_MspInit+0x230>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	f040 80fa 	bne.w	80027aa <HAL_LTDC_MspInit+0x226>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80025b6:	2308      	movs	r3, #8
 80025b8:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80025ba:	2332      	movs	r3, #50	@ 0x32
 80025bc:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80025be:	2302      	movs	r3, #2
 80025c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80025c2:	2300      	movs	r3, #0
 80025c4:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80025c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 f96e 	bl	80058ac <HAL_RCCEx_PeriphCLKConfig>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80025d6:	f7ff ff3d 	bl	8002454 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	4b76      	ldr	r3, [pc, #472]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e2:	4a75      	ldr	r2, [pc, #468]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 80025e4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80025e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ea:	4b73      	ldr	r3, [pc, #460]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ee:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	4b6f      	ldr	r3, [pc, #444]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a6e      	ldr	r2, [pc, #440]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002600:	f043 0320 	orr.w	r3, r3, #32
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b6c      	ldr	r3, [pc, #432]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0320 	and.w	r3, r3, #32
 800260e:	61fb      	str	r3, [r7, #28]
 8002610:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
 8002616:	4b68      	ldr	r3, [pc, #416]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a67      	ldr	r2, [pc, #412]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 800261c:	f043 0301 	orr.w	r3, r3, #1
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b65      	ldr	r3, [pc, #404]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0301 	and.w	r3, r3, #1
 800262a:	61bb      	str	r3, [r7, #24]
 800262c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
 8002632:	4b61      	ldr	r3, [pc, #388]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a60      	ldr	r2, [pc, #384]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002638:	f043 0302 	orr.w	r3, r3, #2
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b5e      	ldr	r3, [pc, #376]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	617b      	str	r3, [r7, #20]
 8002648:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	613b      	str	r3, [r7, #16]
 800264e:	4b5a      	ldr	r3, [pc, #360]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002652:	4a59      	ldr	r2, [pc, #356]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002658:	6313      	str	r3, [r2, #48]	@ 0x30
 800265a:	4b57      	ldr	r3, [pc, #348]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002662:	613b      	str	r3, [r7, #16]
 8002664:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
 800266a:	4b53      	ldr	r3, [pc, #332]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a52      	ldr	r2, [pc, #328]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002670:	f043 0304 	orr.w	r3, r3, #4
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b50      	ldr	r3, [pc, #320]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0304 	and.w	r3, r3, #4
 800267e:	60fb      	str	r3, [r7, #12]
 8002680:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002682:	2300      	movs	r3, #0
 8002684:	60bb      	str	r3, [r7, #8]
 8002686:	4b4c      	ldr	r3, [pc, #304]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	4a4b      	ldr	r2, [pc, #300]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 800268c:	f043 0308 	orr.w	r3, r3, #8
 8002690:	6313      	str	r3, [r2, #48]	@ 0x30
 8002692:	4b49      	ldr	r3, [pc, #292]	@ (80027b8 <HAL_LTDC_MspInit+0x234>)
 8002694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002696:	f003 0308 	and.w	r3, r3, #8
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800269e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026a2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a4:	2302      	movs	r3, #2
 80026a6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a8:	2300      	movs	r3, #0
 80026aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ac:	2300      	movs	r3, #0
 80026ae:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026b0:	230e      	movs	r3, #14
 80026b2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80026b4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026b8:	4619      	mov	r1, r3
 80026ba:	4840      	ldr	r0, [pc, #256]	@ (80027bc <HAL_LTDC_MspInit+0x238>)
 80026bc:	f000 fed6 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80026c0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80026c4:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c6:	2302      	movs	r3, #2
 80026c8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ca:	2300      	movs	r3, #0
 80026cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ce:	2300      	movs	r3, #0
 80026d0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80026d2:	230e      	movs	r3, #14
 80026d4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026da:	4619      	mov	r1, r3
 80026dc:	4838      	ldr	r0, [pc, #224]	@ (80027c0 <HAL_LTDC_MspInit+0x23c>)
 80026de:	f000 fec5 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80026e2:	2303      	movs	r3, #3
 80026e4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026e6:	2302      	movs	r3, #2
 80026e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ea:	2300      	movs	r3, #0
 80026ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026ee:	2300      	movs	r3, #0
 80026f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80026f2:	2309      	movs	r3, #9
 80026f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026f6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026fa:	4619      	mov	r1, r3
 80026fc:	4831      	ldr	r0, [pc, #196]	@ (80027c4 <HAL_LTDC_MspInit+0x240>)
 80026fe:	f000 feb5 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8002702:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002706:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002714:	230e      	movs	r3, #14
 8002716:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002718:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800271c:	4619      	mov	r1, r3
 800271e:	4829      	ldr	r0, [pc, #164]	@ (80027c4 <HAL_LTDC_MspInit+0x240>)
 8002720:	f000 fea4 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8002724:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8002728:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002736:	230e      	movs	r3, #14
 8002738:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800273a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800273e:	4619      	mov	r1, r3
 8002740:	4821      	ldr	r0, [pc, #132]	@ (80027c8 <HAL_LTDC_MspInit+0x244>)
 8002742:	f000 fe93 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8002746:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800274a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800274c:	2302      	movs	r3, #2
 800274e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002750:	2300      	movs	r3, #0
 8002752:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002754:	2300      	movs	r3, #0
 8002756:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002758:	230e      	movs	r3, #14
 800275a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800275c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002760:	4619      	mov	r1, r3
 8002762:	481a      	ldr	r0, [pc, #104]	@ (80027cc <HAL_LTDC_MspInit+0x248>)
 8002764:	f000 fe82 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8002768:	2348      	movs	r3, #72	@ 0x48
 800276a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800276c:	2302      	movs	r3, #2
 800276e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002770:	2300      	movs	r3, #0
 8002772:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002774:	2300      	movs	r3, #0
 8002776:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8002778:	230e      	movs	r3, #14
 800277a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800277c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002780:	4619      	mov	r1, r3
 8002782:	4813      	ldr	r0, [pc, #76]	@ (80027d0 <HAL_LTDC_MspInit+0x24c>)
 8002784:	f000 fe72 	bl	800346c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8002788:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800278c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800279a:	2309      	movs	r3, #9
 800279c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800279e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80027a2:	4619      	mov	r1, r3
 80027a4:	4808      	ldr	r0, [pc, #32]	@ (80027c8 <HAL_LTDC_MspInit+0x244>)
 80027a6:	f000 fe61 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80027aa:	bf00      	nop
 80027ac:	3768      	adds	r7, #104	@ 0x68
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40016800 	.word	0x40016800
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40021400 	.word	0x40021400
 80027c0:	40020000 	.word	0x40020000
 80027c4:	40020400 	.word	0x40020400
 80027c8:	40021800 	.word	0x40021800
 80027cc:	40020800 	.word	0x40020800
 80027d0:	40020c00 	.word	0x40020c00

080027d4 <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002810 <HAL_RNG_MspInit+0x3c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d10d      	bne.n	8002802 <HAL_RNG_MspInit+0x2e>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80027e6:	2300      	movs	r3, #0
 80027e8:	60fb      	str	r3, [r7, #12]
 80027ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002814 <HAL_RNG_MspInit+0x40>)
 80027ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027ee:	4a09      	ldr	r2, [pc, #36]	@ (8002814 <HAL_RNG_MspInit+0x40>)
 80027f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027f4:	6353      	str	r3, [r2, #52]	@ 0x34
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <HAL_RNG_MspInit+0x40>)
 80027f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80027fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027fe:	60fb      	str	r3, [r7, #12]
 8002800:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END RNG_MspInit 1 */

  }

}
 8002802:	bf00      	nop
 8002804:	3714      	adds	r7, #20
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
 800280e:	bf00      	nop
 8002810:	50060800 	.word	0x50060800
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a19      	ldr	r2, [pc, #100]	@ (800289c <HAL_SPI_MspInit+0x84>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d12c      	bne.n	8002894 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b18      	ldr	r3, [pc, #96]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002844:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002848:	6453      	str	r3, [r2, #68]	@ 0x44
 800284a:	4b15      	ldr	r3, [pc, #84]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a10      	ldr	r2, [pc, #64]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002860:	f043 0320 	orr.w	r3, r3, #32
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b0e      	ldr	r3, [pc, #56]	@ (80028a0 <HAL_SPI_MspInit+0x88>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0320 	and.w	r3, r3, #32
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8002872:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8002876:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8002884:	2305      	movs	r3, #5
 8002886:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002888:	f107 0314 	add.w	r3, r7, #20
 800288c:	4619      	mov	r1, r3
 800288e:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <HAL_SPI_MspInit+0x8c>)
 8002890:	f000 fdec 	bl	800346c <HAL_GPIO_Init>

  /* USER CODE END SPI5_MspInit 1 */

  }

}
 8002894:	bf00      	nop
 8002896:	3728      	adds	r7, #40	@ 0x28
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40015000 	.word	0x40015000
 80028a0:	40023800 	.word	0x40023800
 80028a4:	40021400 	.word	0x40021400

080028a8 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a08      	ldr	r2, [pc, #32]	@ (80028d8 <HAL_SPI_MspDeInit+0x30>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10a      	bne.n	80028d0 <HAL_SPI_MspDeInit+0x28>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <HAL_SPI_MspDeInit+0x34>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028be:	4a07      	ldr	r2, [pc, #28]	@ (80028dc <HAL_SPI_MspDeInit+0x34>)
 80028c0:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80028c4:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 80028c6:	f44f 7160 	mov.w	r1, #896	@ 0x380
 80028ca:	4805      	ldr	r0, [pc, #20]	@ (80028e0 <HAL_SPI_MspDeInit+0x38>)
 80028cc:	f000 ff7a 	bl	80037c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI5_MspDeInit 1 */

  /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40015000 	.word	0x40015000
 80028dc:	40023800 	.word	0x40023800
 80028e0:	40021400 	.word	0x40021400

080028e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028e8:	bf00      	nop
 80028ea:	e7fd      	b.n	80028e8 <NMI_Handler+0x4>

080028ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f0:	bf00      	nop
 80028f2:	e7fd      	b.n	80028f0 <HardFault_Handler+0x4>

080028f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028f8:	bf00      	nop
 80028fa:	e7fd      	b.n	80028f8 <MemManage_Handler+0x4>

080028fc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002900:	bf00      	nop
 8002902:	e7fd      	b.n	8002900 <BusFault_Handler+0x4>

08002904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002904:	b480      	push	{r7}
 8002906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002908:	bf00      	nop
 800290a:	e7fd      	b.n	8002908 <UsageFault_Handler+0x4>

0800290c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002910:	bf00      	nop
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291a:	b480      	push	{r7}
 800291c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800291e:	bf00      	nop
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002928:	b480      	push	{r7}
 800292a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292c:	bf00      	nop
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr

08002936 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002936:	b580      	push	{r7, lr}
 8002938:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293a:	f000 fc0f 	bl	800315c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800293e:	bf00      	nop
 8002940:	bd80      	pop	{r7, pc}

08002942 <STMPE811_Init>:

#define DEFAULT_TESTING_TIMEOUT 250000

/* The below function was created by Tilen MAJERLE but modified by Xavion */
STMPE811_State_t STMPE811_Init(void)
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b082      	sub	sp, #8
 8002946:	af00      	add	r7, sp, #0

    // Initalize any other GPIO neeeded
    //stmpe811_MspInit(); // Currently we will be just using the HAL GPIO Init fuction to initialize GPIOs..

    // Initialze I2C3 ports 
    I2C3_MspInit();
 8002948:	f000 f9ce 	bl	8002ce8 <I2C3_MspInit>
    /* Initialize I2C */
    I2C3_Init();
 800294c:	f000 f98e 	bl	8002c6c <I2C3_Init>

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 8002950:	2202      	movs	r2, #2
 8002952:	2103      	movs	r1, #3
 8002954:	2082      	movs	r0, #130	@ 0x82
 8002956:	f000 fa1b 	bl	8002d90 <I2C3_Write>
    HAL_Delay(5);
 800295a:	2005      	movs	r0, #5
 800295c:	f000 fc1e 	bl	800319c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 8002960:	2200      	movs	r2, #0
 8002962:	2103      	movs	r1, #3
 8002964:	2082      	movs	r0, #130	@ 0x82
 8002966:	f000 fa13 	bl	8002d90 <I2C3_Write>
    HAL_Delay(2);
 800296a:	2002      	movs	r0, #2
 800296c:	f000 fc16 	bl	800319c <HAL_Delay>

    /* Check for STMPE811 Connected */
    uint16_t dataRecieved;
    I2C3_MulitByteRead(STMPE811_ADDRESS, STMPE811_CHIP_ID, (uint8_t * )&dataRecieved, TWOBYTE); // Need to change
 8002970:	1cba      	adds	r2, r7, #2
 8002972:	2302      	movs	r3, #2
 8002974:	2100      	movs	r1, #0
 8002976:	2082      	movs	r0, #130	@ 0x82
 8002978:	f000 fa5a 	bl	8002e30 <I2C3_MulitByteRead>
    // Flip bytes
    uint16_t chipID = (dataRecieved << 8);
 800297c:	887b      	ldrh	r3, [r7, #2]
 800297e:	021b      	lsls	r3, r3, #8
 8002980:	80fb      	strh	r3, [r7, #6]
    chipID |= ((dataRecieved & 0xFF00) >> 8);
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	b29a      	uxth	r2, r3
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	4313      	orrs	r3, r2
 800298c:	80fb      	strh	r3, [r7, #6]

    if (chipID != STMPE811_CHIP_ID_VALUE) {
 800298e:	88fb      	ldrh	r3, [r7, #6]
 8002990:	f640 0211 	movw	r2, #2065	@ 0x811
 8002994:	4293      	cmp	r3, r2
 8002996:	d001      	beq.n	800299c <STMPE811_Init+0x5a>
    	return STMPE811_State_Error;
 8002998:	2303      	movs	r3, #3
 800299a:	e075      	b.n	8002a88 <STMPE811_Init+0x146>
    }

    /* Reset */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x02);
 800299c:	2202      	movs	r2, #2
 800299e:	2103      	movs	r1, #3
 80029a0:	2082      	movs	r0, #130	@ 0x82
 80029a2:	f000 f9f5 	bl	8002d90 <I2C3_Write>
    HAL_Delay(5);
 80029a6:	2005      	movs	r0, #5
 80029a8:	f000 fbf8 	bl	800319c <HAL_Delay>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL1, 0x00);
 80029ac:	2200      	movs	r2, #0
 80029ae:	2103      	movs	r1, #3
 80029b0:	2082      	movs	r0, #130	@ 0x82
 80029b2:	f000 f9ed 	bl	8002d90 <I2C3_Write>
    HAL_Delay(2);
 80029b6:	2002      	movs	r0, #2
 80029b8:	f000 fbf0 	bl	800319c <HAL_Delay>

    /* Get the current register value */
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029bc:	2004      	movs	r0, #4
 80029be:	f000 f867 	bl	8002a90 <STMPE811_Read>
 80029c2:	4603      	mov	r3, r0
 80029c4:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x01);
 80029c6:	797b      	ldrb	r3, [r7, #5]
 80029c8:	f023 0301 	bic.w	r3, r3, #1
 80029cc:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029ce:	797b      	ldrb	r3, [r7, #5]
 80029d0:	461a      	mov	r2, r3
 80029d2:	2104      	movs	r1, #4
 80029d4:	2082      	movs	r0, #130	@ 0x82
 80029d6:	f000 f9db 	bl	8002d90 <I2C3_Write>
    mode = STMPE811_Read(STMPE811_SYS_CTRL2);
 80029da:	2004      	movs	r0, #4
 80029dc:	f000 f858 	bl	8002a90 <STMPE811_Read>
 80029e0:	4603      	mov	r3, r0
 80029e2:	717b      	strb	r3, [r7, #5]
    mode &= ~(0x02);
 80029e4:	797b      	ldrb	r3, [r7, #5]
 80029e6:	f023 0302 	bic.w	r3, r3, #2
 80029ea:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_SYS_CTRL2, mode);
 80029ec:	797b      	ldrb	r3, [r7, #5]
 80029ee:	461a      	mov	r2, r3
 80029f0:	2104      	movs	r1, #4
 80029f2:	2082      	movs	r0, #130	@ 0x82
 80029f4:	f000 f9cc 	bl	8002d90 <I2C3_Write>

    /* Select Sample Time, bit number and ADC Reference */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL1, 0x49);
 80029f8:	2249      	movs	r2, #73	@ 0x49
 80029fa:	2120      	movs	r1, #32
 80029fc:	2082      	movs	r0, #130	@ 0x82
 80029fe:	f000 f9c7 	bl	8002d90 <I2C3_Write>

    /* Wait for 2 ms */
    HAL_Delay(2);
 8002a02:	2002      	movs	r0, #2
 8002a04:	f000 fbca 	bl	800319c <HAL_Delay>

    /* Select the ADC clock speed: 3.25 MHz */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_ADC_CTRL2, 0x01);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	2121      	movs	r1, #33	@ 0x21
 8002a0c:	2082      	movs	r0, #130	@ 0x82
 8002a0e:	f000 f9bf 	bl	8002d90 <I2C3_Write>

    /* Select TSC pins in non default mode */
    mode = STMPE811_Read(STMPE811_GPIO_AF);
 8002a12:	2017      	movs	r0, #23
 8002a14:	f000 f83c 	bl	8002a90 <STMPE811_Read>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	717b      	strb	r3, [r7, #5]
    mode |= 0x1E;
 8002a1c:	797b      	ldrb	r3, [r7, #5]
 8002a1e:	f043 031e 	orr.w	r3, r3, #30
 8002a22:	717b      	strb	r3, [r7, #5]
    I2C3_Write(STMPE811_ADDRESS, STMPE811_GPIO_AF, mode);
 8002a24:	797b      	ldrb	r3, [r7, #5]
 8002a26:	461a      	mov	r2, r3
 8002a28:	2117      	movs	r1, #23
 8002a2a:	2082      	movs	r0, #130	@ 0x82
 8002a2c:	f000 f9b0 	bl	8002d90 <I2C3_Write>
    /* Configuration:
    - Touch average control    : 4 samples
    - Touch delay time         : 500 uS
    - Panel driver setting time: 500 uS
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CFG, 0x9A);
 8002a30:	229a      	movs	r2, #154	@ 0x9a
 8002a32:	2141      	movs	r1, #65	@ 0x41
 8002a34:	2082      	movs	r0, #130	@ 0x82
 8002a36:	f000 f9ab 	bl	8002d90 <I2C3_Write>

    /* Configure the Touch FIFO threshold: single point reading */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_TH, 0x01);
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	214a      	movs	r1, #74	@ 0x4a
 8002a3e:	2082      	movs	r0, #130	@ 0x82
 8002a40:	f000 f9a6 	bl	8002d90 <I2C3_Write>

    /* Clear the FIFO memory content. */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002a44:	2201      	movs	r2, #1
 8002a46:	214b      	movs	r1, #75	@ 0x4b
 8002a48:	2082      	movs	r0, #130	@ 0x82
 8002a4a:	f000 f9a1 	bl	8002d90 <I2C3_Write>

    /* Put the FIFO back into operation mode  */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002a4e:	2200      	movs	r2, #0
 8002a50:	214b      	movs	r1, #75	@ 0x4b
 8002a52:	2082      	movs	r0, #130	@ 0x82
 8002a54:	f000 f99c 	bl	8002d90 <I2C3_Write>

    /* Set the range and accuracy pf the pressure measurement (Z) :
    - Fractional part :7
    - Whole part      :1
    */
    I2C3_Write( STMPE811_ADDRESS, STMPE811_TSC_FRACTION_Z, 0x01);
 8002a58:	2201      	movs	r2, #1
 8002a5a:	2156      	movs	r1, #86	@ 0x56
 8002a5c:	2082      	movs	r0, #130	@ 0x82
 8002a5e:	f000 f997 	bl	8002d90 <I2C3_Write>

    /* Set the driving capability (limit) of the device for TSC pins: 50mA */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_I_DRIVE, 0x01);
 8002a62:	2201      	movs	r2, #1
 8002a64:	2158      	movs	r1, #88	@ 0x58
 8002a66:	2082      	movs	r0, #130	@ 0x82
 8002a68:	f000 f992 	bl	8002d90 <I2C3_Write>

    /* Touch screen control configuration (enable TSC):
    - No window tracking index
    - XYZ acquisition mode
    */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_TSC_CTRL, 0x03);
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	2140      	movs	r1, #64	@ 0x40
 8002a70:	2082      	movs	r0, #130	@ 0x82
 8002a72:	f000 f98d 	bl	8002d90 <I2C3_Write>

    /* Clear all the status pending bits if any */
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);
 8002a76:	22ff      	movs	r2, #255	@ 0xff
 8002a78:	210b      	movs	r1, #11
 8002a7a:	2082      	movs	r0, #130	@ 0x82
 8002a7c:	f000 f988 	bl	8002d90 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_INT_EN, mode);
    
    #endif // COMPILE_TOUCH_INTERRUPT_SUPPORT
    
    /* Wait for 2 ms delay */
    HAL_Delay(200);
 8002a80:	20c8      	movs	r0, #200	@ 0xc8
 8002a82:	f000 fb8b 	bl	800319c <HAL_Delay>

    return STMPE811_State_Ok;
 8002a86:	2302      	movs	r3, #2

}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3708      	adds	r7, #8
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <STMPE811_Read>:

uint8_t STMPE811_Read(uint8_t reg)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
    // I2C Read
    uint8_t readData;
    I2C3_Read(STMPE811_ADDRESS, reg, &readData);
 8002a9a:	f107 020f 	add.w	r2, r7, #15
 8002a9e:	79fb      	ldrb	r3, [r7, #7]
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	2082      	movs	r0, #130	@ 0x82
 8002aa4:	f000 f99e 	bl	8002de4 <I2C3_Read>

    return readData;
 8002aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3710      	adds	r7, #16
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <STMPE811_ReadTouch>:
}

/* The below function was created by Tilen MAJERLE but modified by Xavion */

STMPE811_State_t STMPE811_ReadTouch(STMPE811_TouchData *structdata)  //TM Function
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b084      	sub	sp, #16
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
    uint8_t val;

    /* Save state */
    structdata->last_pressed = structdata->pressed;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	791a      	ldrb	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	715a      	strb	r2, [r3, #5]

    /* Read */
    val = STMPE811_Read(STMPE811_TSC_CTRL);
 8002ac2:	2040      	movs	r0, #64	@ 0x40
 8002ac4:	f7ff ffe4 	bl	8002a90 <STMPE811_Read>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	73fb      	strb	r3, [r7, #15]
    if ((val & 0x80) == 0) {
 8002acc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	db0e      	blt.n	8002af2 <STMPE811_ReadTouch+0x40>
        //Not pressed
        structdata->pressed = STMPE811_State_Released;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	711a      	strb	r2, [r3, #4]

        //Reset Fifo
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002ada:	2201      	movs	r2, #1
 8002adc:	214b      	movs	r1, #75	@ 0x4b
 8002ade:	2082      	movs	r0, #130	@ 0x82
 8002ae0:	f000 f956 	bl	8002d90 <I2C3_Write>
        I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	214b      	movs	r1, #75	@ 0x4b
 8002ae8:	2082      	movs	r0, #130	@ 0x82
 8002aea:	f000 f951 	bl	8002d90 <I2C3_Write>

        return STMPE811_State_Released;
 8002aee:	2301      	movs	r3, #1
 8002af0:	e0a7      	b.n	8002c42 <STMPE811_ReadTouch+0x190>

    /* Clear all the status pending bits if any */
    //TM_I2C_Write(STMPE811_I2C, STMPE811_ADDRESS, STMPE811_INT_STA, 0xFF);

    //Pressed
    if (structdata->orientation == STMPE811_Orientation_Portrait_1) {
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	799b      	ldrb	r3, [r3, #6]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d117      	bne.n	8002b2a <STMPE811_ReadTouch+0x78>
        structdata->x = 239 - TM_STMPE811_ReadX(structdata->x);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	881b      	ldrh	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f000 f9b8 	bl	8002e74 <TM_STMPE811_ReadX>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	801a      	strh	r2, [r3, #0]
        structdata->y = 319 - TM_STMPE811_ReadY(structdata->y);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	885b      	ldrh	r3, [r3, #2]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fa0b 	bl	8002f30 <TM_STMPE811_ReadY>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b20:	3301      	adds	r3, #1
 8002b22:	b29a      	uxth	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	805a      	strh	r2, [r3, #2]
 8002b28:	e048      	b.n	8002bbc <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	799b      	ldrb	r3, [r3, #6]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d112      	bne.n	8002b58 <STMPE811_ReadTouch+0xa6>
        structdata->x = TM_STMPE811_ReadX(structdata->x);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f99c 	bl	8002e74 <TM_STMPE811_ReadX>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	461a      	mov	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	801a      	strh	r2, [r3, #0]
        structdata->y = TM_STMPE811_ReadY(structdata->y);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	885b      	ldrh	r3, [r3, #2]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f000 f9f1 	bl	8002f30 <TM_STMPE811_ReadY>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	461a      	mov	r2, r3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	805a      	strh	r2, [r3, #2]
 8002b56:	e031      	b.n	8002bbc <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_1) {
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	799b      	ldrb	r3, [r3, #6]
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d115      	bne.n	8002b8c <STMPE811_ReadTouch+0xda>
        structdata->y = TM_STMPE811_ReadX(structdata->y);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	885b      	ldrh	r3, [r3, #2]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 f985 	bl	8002e74 <TM_STMPE811_ReadX>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	805a      	strh	r2, [r3, #2]
        structdata->x = 319 - TM_STMPE811_ReadY(structdata->x);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 f9da 	bl	8002f30 <TM_STMPE811_ReadY>
 8002b7c:	4603      	mov	r3, r0
 8002b7e:	f5c3 739f 	rsb	r3, r3, #318	@ 0x13e
 8002b82:	3301      	adds	r3, #1
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	e017      	b.n	8002bbc <STMPE811_ReadTouch+0x10a>
    } else if (structdata->orientation == STMPE811_Orientation_Landscape_2) {
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	799b      	ldrb	r3, [r3, #6]
 8002b90:	2b03      	cmp	r3, #3
 8002b92:	d113      	bne.n	8002bbc <STMPE811_ReadTouch+0x10a>
        structdata->y = 239 - TM_STMPE811_ReadX(structdata->x);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	881b      	ldrh	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 f96b 	bl	8002e74 <TM_STMPE811_ReadX>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f1c3 03ef 	rsb	r3, r3, #239	@ 0xef
 8002ba4:	b29a      	uxth	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	805a      	strh	r2, [r3, #2]
        structdata->x = TM_STMPE811_ReadY(structdata->x);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 f9be 	bl	8002f30 <TM_STMPE811_ReadY>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	801a      	strh	r2, [r3, #0]
    }

    //Reset Fifo
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x01);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	214b      	movs	r1, #75	@ 0x4b
 8002bc0:	2082      	movs	r0, #130	@ 0x82
 8002bc2:	f000 f8e5 	bl	8002d90 <I2C3_Write>
    I2C3_Write(STMPE811_ADDRESS, STMPE811_FIFO_STA, 0x00);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	214b      	movs	r1, #75	@ 0x4b
 8002bca:	2082      	movs	r0, #130	@ 0x82
 8002bcc:	f000 f8e0 	bl	8002d90 <I2C3_Write>

    //Check for valid data
    if (structdata->orientation == STMPE811_Orientation_Portrait_1 || structdata->orientation == STMPE811_Orientation_Portrait_2) {
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	799b      	ldrb	r3, [r3, #6]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <STMPE811_ReadTouch+0x12e>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	799b      	ldrb	r3, [r3, #6]
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d115      	bne.n	8002c0c <STMPE811_ReadTouch+0x15a>
        //Portrait
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d027      	beq.n	8002c38 <STMPE811_ReadTouch+0x186>
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	881b      	ldrh	r3, [r3, #0]
 8002bec:	2bee      	cmp	r3, #238	@ 0xee
 8002bee:	d823      	bhi.n	8002c38 <STMPE811_ReadTouch+0x186>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	885b      	ldrh	r3, [r3, #2]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d01f      	beq.n	8002c38 <STMPE811_ReadTouch+0x186>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	885b      	ldrh	r3, [r3, #2]
 8002bfc:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002c00:	d81a      	bhi.n	8002c38 <STMPE811_ReadTouch+0x186>
            structdata->pressed = STMPE811_State_Pressed;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	e01a      	b.n	8002c42 <STMPE811_ReadTouch+0x190>
        }
    } else {
        //Landscape
        if (structdata->x > 0 && structdata->x < 319 && structdata->y > 0 && structdata->y < 239) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	881b      	ldrh	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <STMPE811_ReadTouch+0x188>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	881b      	ldrh	r3, [r3, #0]
 8002c18:	f5b3 7f9f 	cmp.w	r3, #318	@ 0x13e
 8002c1c:	d80d      	bhi.n	8002c3a <STMPE811_ReadTouch+0x188>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	885b      	ldrh	r3, [r3, #2]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d009      	beq.n	8002c3a <STMPE811_ReadTouch+0x188>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	885b      	ldrh	r3, [r3, #2]
 8002c2a:	2bee      	cmp	r3, #238	@ 0xee
 8002c2c:	d805      	bhi.n	8002c3a <STMPE811_ReadTouch+0x188>
            structdata->pressed = STMPE811_State_Pressed;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	711a      	strb	r2, [r3, #4]
            return STMPE811_State_Pressed;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e004      	b.n	8002c42 <STMPE811_ReadTouch+0x190>
        if (structdata->x > 0 && structdata->x < 239 && structdata->y > 0 && structdata->y < 319) {
 8002c38:	bf00      	nop
        }
    }

    structdata->pressed = STMPE811_State_Released;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	711a      	strb	r2, [r3, #4]

    return STMPE811_State_Released;
 8002c40:	2301      	movs	r3, #1
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
	...

08002c4c <verifyHAL_I2C_IS_OKAY>:

#endif 


//  ******************************** I2C Functions ********************************//
void verifyHAL_I2C_IS_OKAY(){
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
    if (HAL_status != HAL_OK)
 8002c50:	4b05      	ldr	r3, [pc, #20]	@ (8002c68 <verifyHAL_I2C_IS_OKAY+0x1c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <verifyHAL_I2C_IS_OKAY+0x10>
    {
        while(1);
 8002c58:	bf00      	nop
 8002c5a:	e7fd      	b.n	8002c58 <verifyHAL_I2C_IS_OKAY+0xc>
    }
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	200272b4 	.word	0x200272b4

08002c6c <I2C3_Init>:

static void I2C3_Init()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0

	__HAL_RCC_I2C3_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4b18      	ldr	r3, [pc, #96]	@ (8002cd8 <I2C3_Init+0x6c>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <I2C3_Init+0x6c>)
 8002c7c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002c80:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c82:	4b15      	ldr	r3, [pc, #84]	@ (8002cd8 <I2C3_Init+0x6c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
    // Configure I2C3
    hI2C3.Instance = STMPE811_I2C;
 8002c8e:	4b13      	ldr	r3, [pc, #76]	@ (8002cdc <I2C3_Init+0x70>)
 8002c90:	4a13      	ldr	r2, [pc, #76]	@ (8002ce0 <I2C3_Init+0x74>)
 8002c92:	601a      	str	r2, [r3, #0]
    hI2C3.Init.ClockSpeed = STMPE811_I2C_CLOCK;
 8002c94:	4b11      	ldr	r3, [pc, #68]	@ (8002cdc <I2C3_Init+0x70>)
 8002c96:	4a13      	ldr	r2, [pc, #76]	@ (8002ce4 <I2C3_Init+0x78>)
 8002c98:	605a      	str	r2, [r3, #4]
    hI2C3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c9a:	4b10      	ldr	r3, [pc, #64]	@ (8002cdc <I2C3_Init+0x70>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	609a      	str	r2, [r3, #8]
    hI2C3.Init.OwnAddress1 = 0x00; // May be wrong
 8002ca0:	4b0e      	ldr	r3, [pc, #56]	@ (8002cdc <I2C3_Init+0x70>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	60da      	str	r2, [r3, #12]
    hI2C3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8002cdc <I2C3_Init+0x70>)
 8002ca8:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002cac:	611a      	str	r2, [r3, #16]
    hI2C3.Init.GeneralCallMode = I2C_NOSTRETCH_DISABLE;
 8002cae:	4b0b      	ldr	r3, [pc, #44]	@ (8002cdc <I2C3_Init+0x70>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	61da      	str	r2, [r3, #28]
    hI2C3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002cb4:	4b09      	ldr	r3, [pc, #36]	@ (8002cdc <I2C3_Init+0x70>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	621a      	str	r2, [r3, #32]
    // Do we need to configutre I2C Mode? 

    // Initialize I2C3 interface
    HAL_StatusTypeDef status;
    status = HAL_I2C_Init(&hI2C3);
 8002cba:	4808      	ldr	r0, [pc, #32]	@ (8002cdc <I2C3_Init+0x70>)
 8002cbc:	f000 fea8 	bl	8003a10 <HAL_I2C_Init>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8002cc4:	79fb      	ldrb	r3, [r7, #7]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d001      	beq.n	8002cce <I2C3_Init+0x62>
    {
        for(;;); // Catch error
 8002cca:	bf00      	nop
 8002ccc:	e7fd      	b.n	8002cca <I2C3_Init+0x5e>
    }
    return;
 8002cce:	bf00      	nop
}
 8002cd0:	3708      	adds	r7, #8
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	20027260 	.word	0x20027260
 8002ce0:	40005c00 	.word	0x40005c00
 8002ce4:	000186a0 	.word	0x000186a0

08002ce8 <I2C3_MspInit>:

// GPIO Initializations 
static void I2C3_MspInit(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b088      	sub	sp, #32
 8002cec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cee:	f107 030c 	add.w	r3, r7, #12
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
 8002cf8:	609a      	str	r2, [r3, #8]
 8002cfa:	60da      	str	r2, [r3, #12]
 8002cfc:	611a      	str	r2, [r3, #16]
    // Enable Clocks
    // GPIOC
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60bb      	str	r3, [r7, #8]
 8002d02:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <I2C3_MspInit+0x9c>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	4a1f      	ldr	r2, [pc, #124]	@ (8002d84 <I2C3_MspInit+0x9c>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0e:	4b1d      	ldr	r3, [pc, #116]	@ (8002d84 <I2C3_MspInit+0x9c>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	60bb      	str	r3, [r7, #8]
 8002d18:	68bb      	ldr	r3, [r7, #8]

    // GPIOA 
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	607b      	str	r3, [r7, #4]
 8002d1e:	4b19      	ldr	r3, [pc, #100]	@ (8002d84 <I2C3_MspInit+0x9c>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	4a18      	ldr	r2, [pc, #96]	@ (8002d84 <I2C3_MspInit+0x9c>)
 8002d24:	f043 0301 	orr.w	r3, r3, #1
 8002d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2a:	4b16      	ldr	r3, [pc, #88]	@ (8002d84 <I2C3_MspInit+0x9c>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	607b      	str	r3, [r7, #4]
 8002d34:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin : I2C3_SDA_Pin */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8002d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d3a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3c:	2312      	movs	r3, #18
 8002d3e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d48:	2304      	movs	r3, #4
 8002d4a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8002d4c:	f107 030c 	add.w	r3, r7, #12
 8002d50:	4619      	mov	r1, r3
 8002d52:	480d      	ldr	r0, [pc, #52]	@ (8002d88 <I2C3_MspInit+0xa0>)
 8002d54:	f000 fb8a 	bl	800346c <HAL_GPIO_Init>

    /*Configure GPIO pin : I2C3_SCL_Pin */
    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8002d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d5e:	2312      	movs	r3, #18
 8002d60:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d62:	2300      	movs	r3, #0
 8002d64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d66:	2300      	movs	r3, #0
 8002d68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8002d6e:	f107 030c 	add.w	r3, r7, #12
 8002d72:	4619      	mov	r1, r3
 8002d74:	4805      	ldr	r0, [pc, #20]	@ (8002d8c <I2C3_MspInit+0xa4>)
 8002d76:	f000 fb79 	bl	800346c <HAL_GPIO_Init>
    
}
 8002d7a:	bf00      	nop
 8002d7c:	3720      	adds	r7, #32
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020000 	.word	0x40020000

08002d90 <I2C3_Write>:

// This function should only be used for single BYTE transfers 
void I2C3_Write(uint16_t devAddr, uint8_t reg, uint8_t data)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af04      	add	r7, sp, #16
 8002d96:	4603      	mov	r3, r0
 8002d98:	80fb      	strh	r3, [r7, #6]
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	717b      	strb	r3, [r7, #5]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	713b      	strb	r3, [r7, #4]
    uint8_t dataConversion = data; // data will be a raw hex value this is mainly for debugging...
 8002da2:	793b      	ldrb	r3, [r7, #4]
 8002da4:	73fb      	strb	r3, [r7, #15]
    // Learning topic - Is this needed? Or can I just use &data in the function call? 
    HAL_status = HAL_I2C_Mem_Write(&hI2C3, devAddr, reg, I2C_MEMADD_SIZE_8BIT, &dataConversion, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002da6:	797b      	ldrb	r3, [r7, #5]
 8002da8:	b29a      	uxth	r2, r3
 8002daa:	88f9      	ldrh	r1, [r7, #6]
 8002dac:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd8 <I2C3_Write+0x48>)
 8002dae:	9302      	str	r3, [sp, #8]
 8002db0:	2301      	movs	r3, #1
 8002db2:	9301      	str	r3, [sp, #4]
 8002db4:	f107 030f 	add.w	r3, r7, #15
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2301      	movs	r3, #1
 8002dbc:	4807      	ldr	r0, [pc, #28]	@ (8002ddc <I2C3_Write+0x4c>)
 8002dbe:	f000 ff6b 	bl	8003c98 <HAL_I2C_Mem_Write>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4b06      	ldr	r3, [pc, #24]	@ (8002de0 <I2C3_Write+0x50>)
 8002dc8:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002dca:	f7ff ff3f 	bl	8002c4c <verifyHAL_I2C_IS_OKAY>
}
 8002dce:	bf00      	nop
 8002dd0:	3710      	adds	r7, #16
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	0003d090 	.word	0x0003d090
 8002ddc:	20027260 	.word	0x20027260
 8002de0:	200272b4 	.word	0x200272b4

08002de4 <I2C3_Read>:

// This function should only be used for single BYTE transfers 
void I2C3_Read(uint8_t address, uint8_t reg, uint8_t * rxData)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af04      	add	r7, sp, #16
 8002dea:	4603      	mov	r3, r0
 8002dec:	603a      	str	r2, [r7, #0]
 8002dee:	71fb      	strb	r3, [r7, #7]
 8002df0:	460b      	mov	r3, r1
 8002df2:	71bb      	strb	r3, [r7, #6]
    // Need to use MEM functions
    HAL_status = HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, ONEBYTE, DEFAULT_TESTING_TIMEOUT);
 8002df4:	79fb      	ldrb	r3, [r7, #7]
 8002df6:	b299      	uxth	r1, r3
 8002df8:	79bb      	ldrb	r3, [r7, #6]
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	4b09      	ldr	r3, [pc, #36]	@ (8002e24 <I2C3_Read+0x40>)
 8002dfe:	9302      	str	r3, [sp, #8]
 8002e00:	2301      	movs	r3, #1
 8002e02:	9301      	str	r3, [sp, #4]
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	9300      	str	r3, [sp, #0]
 8002e08:	2301      	movs	r3, #1
 8002e0a:	4807      	ldr	r0, [pc, #28]	@ (8002e28 <I2C3_Read+0x44>)
 8002e0c:	f001 f83e 	bl	8003e8c <HAL_I2C_Mem_Read>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b05      	ldr	r3, [pc, #20]	@ (8002e2c <I2C3_Read+0x48>)
 8002e16:	701a      	strb	r2, [r3, #0]
    verifyHAL_I2C_IS_OKAY();
 8002e18:	f7ff ff18 	bl	8002c4c <verifyHAL_I2C_IS_OKAY>
}
 8002e1c:	bf00      	nop
 8002e1e:	3708      	adds	r7, #8
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bd80      	pop	{r7, pc}
 8002e24:	0003d090 	.word	0x0003d090
 8002e28:	20027260 	.word	0x20027260
 8002e2c:	200272b4 	.word	0x200272b4

08002e30 <I2C3_MulitByteRead>:

// This function should be used for multiple byte reads from a reg
void I2C3_MulitByteRead(uint8_t address, uint8_t reg, uint8_t * rxData, uint16_t numOfBytes)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af04      	add	r7, sp, #16
 8002e36:	603a      	str	r2, [r7, #0]
 8002e38:	461a      	mov	r2, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	71fb      	strb	r3, [r7, #7]
 8002e3e:	460b      	mov	r3, r1
 8002e40:	71bb      	strb	r3, [r7, #6]
 8002e42:	4613      	mov	r3, r2
 8002e44:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hI2C3, address, reg, I2C_MEMADD_SIZE_8BIT, rxData, numOfBytes, DEFAULT_TESTING_TIMEOUT);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	b299      	uxth	r1, r3
 8002e4a:	79bb      	ldrb	r3, [r7, #6]
 8002e4c:	b29a      	uxth	r2, r3
 8002e4e:	4b07      	ldr	r3, [pc, #28]	@ (8002e6c <I2C3_MulitByteRead+0x3c>)
 8002e50:	9302      	str	r3, [sp, #8]
 8002e52:	88bb      	ldrh	r3, [r7, #4]
 8002e54:	9301      	str	r3, [sp, #4]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	9300      	str	r3, [sp, #0]
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4804      	ldr	r0, [pc, #16]	@ (8002e70 <I2C3_MulitByteRead+0x40>)
 8002e5e:	f001 f815 	bl	8003e8c <HAL_I2C_Mem_Read>
}
 8002e62:	bf00      	nop
 8002e64:	3708      	adds	r7, #8
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	0003d090 	.word	0x0003d090
 8002e70:	20027260 	.word	0x20027260

08002e74 <TM_STMPE811_ReadX>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadX(uint16_t x) { // TM FUNCTION 
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dx;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_X);
 8002e7e:	204d      	movs	r0, #77	@ 0x4d
 8002e80:	f7ff fe06 	bl	8002a90 <STMPE811_Read>
 8002e84:	4603      	mov	r3, r0
 8002e86:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_X + 1);
 8002e88:	204e      	movs	r0, #78	@ 0x4e
 8002e8a:	f7ff fe01 	bl	8002a90 <STMPE811_Read>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002e92:	7a7b      	ldrb	r3, [r7, #9]
 8002e94:	021b      	lsls	r3, r3, #8
 8002e96:	b21a      	sxth	r2, r3
 8002e98:	7a3b      	ldrb	r3, [r7, #8]
 8002e9a:	b21b      	sxth	r3, r3
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	81fb      	strh	r3, [r7, #14]

    if (val <= 3000) {
 8002ea0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ea4:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	dc06      	bgt.n	8002eba <TM_STMPE811_ReadX+0x46>
        val = 3900 - val;
 8002eac:	89fb      	ldrh	r3, [r7, #14]
 8002eae:	f5c3 6373 	rsb	r3, r3, #3888	@ 0xf30
 8002eb2:	330c      	adds	r3, #12
 8002eb4:	b29b      	uxth	r3, r3
 8002eb6:	81fb      	strh	r3, [r7, #14]
 8002eb8:	e005      	b.n	8002ec6 <TM_STMPE811_ReadX+0x52>
    } else {
        val = 3800 - val;
 8002eba:	89fb      	ldrh	r3, [r7, #14]
 8002ebc:	f5c3 636d 	rsb	r3, r3, #3792	@ 0xed0
 8002ec0:	3308      	adds	r3, #8
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	81fb      	strh	r3, [r7, #14]
    }

    val /= 15;
 8002ec6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eca:	4a18      	ldr	r2, [pc, #96]	@ (8002f2c <TM_STMPE811_ReadX+0xb8>)
 8002ecc:	fb82 1203 	smull	r1, r2, r2, r3
 8002ed0:	441a      	add	r2, r3
 8002ed2:	10d2      	asrs	r2, r2, #3
 8002ed4:	17db      	asrs	r3, r3, #31
 8002ed6:	1ad3      	subs	r3, r2, r3
 8002ed8:	81fb      	strh	r3, [r7, #14]

    if (val > 239) {
 8002eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ede:	2bef      	cmp	r3, #239	@ 0xef
 8002ee0:	dd02      	ble.n	8002ee8 <TM_STMPE811_ReadX+0x74>
        val = 239;
 8002ee2:	23ef      	movs	r3, #239	@ 0xef
 8002ee4:	81fb      	strh	r3, [r7, #14]
 8002ee6:	e005      	b.n	8002ef4 <TM_STMPE811_ReadX+0x80>
    } else if (val < 0) {
 8002ee8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	da01      	bge.n	8002ef4 <TM_STMPE811_ReadX+0x80>
        val = 0;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	81fb      	strh	r3, [r7, #14]
    }

    dx = (val > x) ? (val - x) : (x - val);
 8002ef4:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dd05      	ble.n	8002f0a <TM_STMPE811_ReadX+0x96>
 8002efe:	89fa      	ldrh	r2, [r7, #14]
 8002f00:	88fb      	ldrh	r3, [r7, #6]
 8002f02:	1ad3      	subs	r3, r2, r3
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	b21b      	sxth	r3, r3
 8002f08:	e004      	b.n	8002f14 <TM_STMPE811_ReadX+0xa0>
 8002f0a:	89fb      	ldrh	r3, [r7, #14]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	1ad3      	subs	r3, r2, r3
 8002f10:	b29b      	uxth	r3, r3
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	81bb      	strh	r3, [r7, #12]
    if (dx > 4) {
 8002f16:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	dd01      	ble.n	8002f22 <TM_STMPE811_ReadX+0xae>
        return val;
 8002f1e:	89fb      	ldrh	r3, [r7, #14]
 8002f20:	e000      	b.n	8002f24 <TM_STMPE811_ReadX+0xb0>
    }
    return x;
 8002f22:	88fb      	ldrh	r3, [r7, #6]
}
 8002f24:	4618      	mov	r0, r3
 8002f26:	3710      	adds	r7, #16
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bd80      	pop	{r7, pc}
 8002f2c:	88888889 	.word	0x88888889

08002f30 <TM_STMPE811_ReadY>:

/* The below function was created by Tilen MAJERLE but modified by Xavion */
uint16_t TM_STMPE811_ReadY(uint16_t y) { // TM FUNCTION 
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	4603      	mov	r3, r0
 8002f38:	80fb      	strh	r3, [r7, #6]
    uint8_t data[2];
    int16_t val, dy;
    data[1] = STMPE811_Read(STMPE811_TSC_DATA_Y);
 8002f3a:	204f      	movs	r0, #79	@ 0x4f
 8002f3c:	f7ff fda8 	bl	8002a90 <STMPE811_Read>
 8002f40:	4603      	mov	r3, r0
 8002f42:	727b      	strb	r3, [r7, #9]
    data[0] = STMPE811_Read(STMPE811_TSC_DATA_Y + 1);
 8002f44:	2050      	movs	r0, #80	@ 0x50
 8002f46:	f7ff fda3 	bl	8002a90 <STMPE811_Read>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	723b      	strb	r3, [r7, #8]
    val = (data[1] << 8 | (data[0] & 0xFF));
 8002f4e:	7a7b      	ldrb	r3, [r7, #9]
 8002f50:	021b      	lsls	r3, r3, #8
 8002f52:	b21a      	sxth	r2, r3
 8002f54:	7a3b      	ldrb	r3, [r7, #8]
 8002f56:	b21b      	sxth	r3, r3
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	81fb      	strh	r3, [r7, #14]

    val -= 360;
 8002f5c:	89fb      	ldrh	r3, [r7, #14]
 8002f5e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	81fb      	strh	r3, [r7, #14]
    val = val / 11;
 8002f66:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f6a:	4a19      	ldr	r2, [pc, #100]	@ (8002fd0 <TM_STMPE811_ReadY+0xa0>)
 8002f6c:	fb82 1203 	smull	r1, r2, r2, r3
 8002f70:	1052      	asrs	r2, r2, #1
 8002f72:	17db      	asrs	r3, r3, #31
 8002f74:	1ad3      	subs	r3, r2, r3
 8002f76:	81fb      	strh	r3, [r7, #14]

    if (val <= 0) {
 8002f78:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	dc02      	bgt.n	8002f86 <TM_STMPE811_ReadY+0x56>
        val = 0;
 8002f80:	2300      	movs	r3, #0
 8002f82:	81fb      	strh	r3, [r7, #14]
 8002f84:	e007      	b.n	8002f96 <TM_STMPE811_ReadY+0x66>
    } else if (val >= 320) {
 8002f86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f8a:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8002f8e:	db02      	blt.n	8002f96 <TM_STMPE811_ReadY+0x66>
        val = 319;
 8002f90:	f240 133f 	movw	r3, #319	@ 0x13f
 8002f94:	81fb      	strh	r3, [r7, #14]
    }

    dy = (val > y) ? (val - y) : (y - val);
 8002f96:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	dd05      	ble.n	8002fac <TM_STMPE811_ReadY+0x7c>
 8002fa0:	89fa      	ldrh	r2, [r7, #14]
 8002fa2:	88fb      	ldrh	r3, [r7, #6]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	b29b      	uxth	r3, r3
 8002fa8:	b21b      	sxth	r3, r3
 8002faa:	e004      	b.n	8002fb6 <TM_STMPE811_ReadY+0x86>
 8002fac:	89fb      	ldrh	r3, [r7, #14]
 8002fae:	88fa      	ldrh	r2, [r7, #6]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	b21b      	sxth	r3, r3
 8002fb6:	81bb      	strh	r3, [r7, #12]
    if (dy > 4) {
 8002fb8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002fbc:	2b04      	cmp	r3, #4
 8002fbe:	dd01      	ble.n	8002fc4 <TM_STMPE811_ReadY+0x94>
        return val;
 8002fc0:	89fb      	ldrh	r3, [r7, #14]
 8002fc2:	e000      	b.n	8002fc6 <TM_STMPE811_ReadY+0x96>
    }
    return y;
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	bf00      	nop
 8002fd0:	2e8ba2e9 	.word	0x2e8ba2e9

08002fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b086      	sub	sp, #24
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fdc:	4a14      	ldr	r2, [pc, #80]	@ (8003030 <_sbrk+0x5c>)
 8002fde:	4b15      	ldr	r3, [pc, #84]	@ (8003034 <_sbrk+0x60>)
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fe8:	4b13      	ldr	r3, [pc, #76]	@ (8003038 <_sbrk+0x64>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d102      	bne.n	8002ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <_sbrk+0x64>)
 8002ff2:	4a12      	ldr	r2, [pc, #72]	@ (800303c <_sbrk+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ff6:	4b10      	ldr	r3, [pc, #64]	@ (8003038 <_sbrk+0x64>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	429a      	cmp	r2, r3
 8003002:	d207      	bcs.n	8003014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003004:	f003 fe80 	bl	8006d08 <__errno>
 8003008:	4603      	mov	r3, r0
 800300a:	220c      	movs	r2, #12
 800300c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800300e:	f04f 33ff 	mov.w	r3, #4294967295
 8003012:	e009      	b.n	8003028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003014:	4b08      	ldr	r3, [pc, #32]	@ (8003038 <_sbrk+0x64>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <_sbrk+0x64>)
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	4413      	add	r3, r2
 8003022:	4a05      	ldr	r2, [pc, #20]	@ (8003038 <_sbrk+0x64>)
 8003024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003026:	68fb      	ldr	r3, [r7, #12]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	20030000 	.word	0x20030000
 8003034:	00000400 	.word	0x00000400
 8003038:	200272b8 	.word	0x200272b8
 800303c:	200274b8 	.word	0x200274b8

08003040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003040:	b480      	push	{r7}
 8003042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <SystemInit+0x20>)
 8003046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800304a:	4a05      	ldr	r2, [pc, #20]	@ (8003060 <SystemInit+0x20>)
 800304c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003064:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800309c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003068:	f7ff ffea 	bl	8003040 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800306c:	480c      	ldr	r0, [pc, #48]	@ (80030a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800306e:	490d      	ldr	r1, [pc, #52]	@ (80030a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003070:	4a0d      	ldr	r2, [pc, #52]	@ (80030a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003072:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003074:	e002      	b.n	800307c <LoopCopyDataInit>

08003076 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003076:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003078:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800307a:	3304      	adds	r3, #4

0800307c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800307c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003080:	d3f9      	bcc.n	8003076 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003082:	4a0a      	ldr	r2, [pc, #40]	@ (80030ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003084:	4c0a      	ldr	r4, [pc, #40]	@ (80030b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003086:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003088:	e001      	b.n	800308e <LoopFillZerobss>

0800308a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800308a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800308c:	3204      	adds	r2, #4

0800308e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003090:	d3fb      	bcc.n	800308a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003092:	f003 fe3f 	bl	8006d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003096:	f7ff f989 	bl	80023ac <main>
  bx  lr    
 800309a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800309c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80030a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030a4:	20000e80 	.word	0x20000e80
  ldr r2, =_sidata
 80030a8:	08008d8c 	.word	0x08008d8c
  ldr r2, =_sbss
 80030ac:	20000e80 	.word	0x20000e80
  ldr r4, =_ebss
 80030b0:	200274b8 	.word	0x200274b8

080030b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b4:	e7fe      	b.n	80030b4 <ADC_IRQHandler>
	...

080030b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <HAL_Init+0x40>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a0d      	ldr	r2, [pc, #52]	@ (80030f8 <HAL_Init+0x40>)
 80030c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80030c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80030c8:	4b0b      	ldr	r3, [pc, #44]	@ (80030f8 <HAL_Init+0x40>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a0a      	ldr	r2, [pc, #40]	@ (80030f8 <HAL_Init+0x40>)
 80030ce:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80030d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80030d4:	4b08      	ldr	r3, [pc, #32]	@ (80030f8 <HAL_Init+0x40>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a07      	ldr	r2, [pc, #28]	@ (80030f8 <HAL_Init+0x40>)
 80030da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030e0:	2003      	movs	r0, #3
 80030e2:	f000 f973 	bl	80033cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030e6:	2000      	movs	r0, #0
 80030e8:	f000 f808 	bl	80030fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ec:	f7ff f9b8 	bl	8002460 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030f0:	2300      	movs	r3, #0
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	bd80      	pop	{r7, pc}
 80030f6:	bf00      	nop
 80030f8:	40023c00 	.word	0x40023c00

080030fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b082      	sub	sp, #8
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003104:	4b12      	ldr	r3, [pc, #72]	@ (8003150 <HAL_InitTick+0x54>)
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	4b12      	ldr	r3, [pc, #72]	@ (8003154 <HAL_InitTick+0x58>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	4619      	mov	r1, r3
 800310e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003112:	fbb3 f3f1 	udiv	r3, r3, r1
 8003116:	fbb2 f3f3 	udiv	r3, r2, r3
 800311a:	4618      	mov	r0, r3
 800311c:	f000 f999 	bl	8003452 <HAL_SYSTICK_Config>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d001      	beq.n	800312a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	e00e      	b.n	8003148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b0f      	cmp	r3, #15
 800312e:	d80a      	bhi.n	8003146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003130:	2200      	movs	r2, #0
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	f04f 30ff 	mov.w	r0, #4294967295
 8003138:	f000 f953 	bl	80033e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800313c:	4a06      	ldr	r2, [pc, #24]	@ (8003158 <HAL_InitTick+0x5c>)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003142:	2300      	movs	r3, #0
 8003144:	e000      	b.n	8003148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
}
 8003148:	4618      	mov	r0, r3
 800314a:	3708      	adds	r7, #8
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	20000e10 	.word	0x20000e10
 8003154:	20000e18 	.word	0x20000e18
 8003158:	20000e14 	.word	0x20000e14

0800315c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800315c:	b480      	push	{r7}
 800315e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003160:	4b06      	ldr	r3, [pc, #24]	@ (800317c <HAL_IncTick+0x20>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	461a      	mov	r2, r3
 8003166:	4b06      	ldr	r3, [pc, #24]	@ (8003180 <HAL_IncTick+0x24>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4413      	add	r3, r2
 800316c:	4a04      	ldr	r2, [pc, #16]	@ (8003180 <HAL_IncTick+0x24>)
 800316e:	6013      	str	r3, [r2, #0]
}
 8003170:	bf00      	nop
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	20000e18 	.word	0x20000e18
 8003180:	200272bc 	.word	0x200272bc

08003184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
  return uwTick;
 8003188:	4b03      	ldr	r3, [pc, #12]	@ (8003198 <HAL_GetTick+0x14>)
 800318a:	681b      	ldr	r3, [r3, #0]
}
 800318c:	4618      	mov	r0, r3
 800318e:	46bd      	mov	sp, r7
 8003190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003194:	4770      	bx	lr
 8003196:	bf00      	nop
 8003198:	200272bc 	.word	0x200272bc

0800319c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b084      	sub	sp, #16
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031a4:	f7ff ffee 	bl	8003184 <HAL_GetTick>
 80031a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b4:	d005      	beq.n	80031c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <HAL_Delay+0x44>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	461a      	mov	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	4413      	add	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80031c2:	bf00      	nop
 80031c4:	f7ff ffde 	bl	8003184 <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	429a      	cmp	r2, r3
 80031d2:	d8f7      	bhi.n	80031c4 <HAL_Delay+0x28>
  {
  }
}
 80031d4:	bf00      	nop
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000e18 	.word	0x20000e18

080031e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e4:	b480      	push	{r7}
 80031e6:	b085      	sub	sp, #20
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003200:	4013      	ands	r3, r2
 8003202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800320c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003210:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003214:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003216:	4a04      	ldr	r2, [pc, #16]	@ (8003228 <__NVIC_SetPriorityGrouping+0x44>)
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	60d3      	str	r3, [r2, #12]
}
 800321c:	bf00      	nop
 800321e:	3714      	adds	r7, #20
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003230:	4b04      	ldr	r3, [pc, #16]	@ (8003244 <__NVIC_GetPriorityGrouping+0x18>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	0a1b      	lsrs	r3, r3, #8
 8003236:	f003 0307 	and.w	r3, r3, #7
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	e000ed00 	.word	0xe000ed00

08003248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003256:	2b00      	cmp	r3, #0
 8003258:	db0b      	blt.n	8003272 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800325a:	79fb      	ldrb	r3, [r7, #7]
 800325c:	f003 021f 	and.w	r2, r3, #31
 8003260:	4907      	ldr	r1, [pc, #28]	@ (8003280 <__NVIC_EnableIRQ+0x38>)
 8003262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	2001      	movs	r0, #1
 800326a:	fa00 f202 	lsl.w	r2, r0, r2
 800326e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
 800327e:	bf00      	nop
 8003280:	e000e100 	.word	0xe000e100

08003284 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003284:	b480      	push	{r7}
 8003286:	b083      	sub	sp, #12
 8003288:	af00      	add	r7, sp, #0
 800328a:	4603      	mov	r3, r0
 800328c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003292:	2b00      	cmp	r3, #0
 8003294:	db12      	blt.n	80032bc <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003296:	79fb      	ldrb	r3, [r7, #7]
 8003298:	f003 021f 	and.w	r2, r3, #31
 800329c:	490a      	ldr	r1, [pc, #40]	@ (80032c8 <__NVIC_DisableIRQ+0x44>)
 800329e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032a2:	095b      	lsrs	r3, r3, #5
 80032a4:	2001      	movs	r0, #1
 80032a6:	fa00 f202 	lsl.w	r2, r0, r2
 80032aa:	3320      	adds	r3, #32
 80032ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80032b0:	f3bf 8f4f 	dsb	sy
}
 80032b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80032b6:	f3bf 8f6f 	isb	sy
}
 80032ba:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100

080032cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	4603      	mov	r3, r0
 80032d4:	6039      	str	r1, [r7, #0]
 80032d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	db0a      	blt.n	80032f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	b2da      	uxtb	r2, r3
 80032e4:	490c      	ldr	r1, [pc, #48]	@ (8003318 <__NVIC_SetPriority+0x4c>)
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	0112      	lsls	r2, r2, #4
 80032ec:	b2d2      	uxtb	r2, r2
 80032ee:	440b      	add	r3, r1
 80032f0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032f4:	e00a      	b.n	800330c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	4908      	ldr	r1, [pc, #32]	@ (800331c <__NVIC_SetPriority+0x50>)
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	3b04      	subs	r3, #4
 8003304:	0112      	lsls	r2, r2, #4
 8003306:	b2d2      	uxtb	r2, r2
 8003308:	440b      	add	r3, r1
 800330a:	761a      	strb	r2, [r3, #24]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100
 800331c:	e000ed00 	.word	0xe000ed00

08003320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003320:	b480      	push	{r7}
 8003322:	b089      	sub	sp, #36	@ 0x24
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	f003 0307 	and.w	r3, r3, #7
 8003332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003334:	69fb      	ldr	r3, [r7, #28]
 8003336:	f1c3 0307 	rsb	r3, r3, #7
 800333a:	2b04      	cmp	r3, #4
 800333c:	bf28      	it	cs
 800333e:	2304      	movcs	r3, #4
 8003340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	3304      	adds	r3, #4
 8003346:	2b06      	cmp	r3, #6
 8003348:	d902      	bls.n	8003350 <NVIC_EncodePriority+0x30>
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3b03      	subs	r3, #3
 800334e:	e000      	b.n	8003352 <NVIC_EncodePriority+0x32>
 8003350:	2300      	movs	r3, #0
 8003352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003354:	f04f 32ff 	mov.w	r2, #4294967295
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	401a      	ands	r2, r3
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003368:	f04f 31ff 	mov.w	r1, #4294967295
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43d9      	mvns	r1, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003378:	4313      	orrs	r3, r2
         );
}
 800337a:	4618      	mov	r0, r3
 800337c:	3724      	adds	r7, #36	@ 0x24
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr
	...

08003388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	3b01      	subs	r3, #1
 8003394:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003398:	d301      	bcc.n	800339e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800339a:	2301      	movs	r3, #1
 800339c:	e00f      	b.n	80033be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800339e:	4a0a      	ldr	r2, [pc, #40]	@ (80033c8 <SysTick_Config+0x40>)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	3b01      	subs	r3, #1
 80033a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033a6:	210f      	movs	r1, #15
 80033a8:	f04f 30ff 	mov.w	r0, #4294967295
 80033ac:	f7ff ff8e 	bl	80032cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <SysTick_Config+0x40>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033b6:	4b04      	ldr	r3, [pc, #16]	@ (80033c8 <SysTick_Config+0x40>)
 80033b8:	2207      	movs	r2, #7
 80033ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	e000e010 	.word	0xe000e010

080033cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f7ff ff05 	bl	80031e4 <__NVIC_SetPriorityGrouping>
}
 80033da:	bf00      	nop
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}

080033e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033e2:	b580      	push	{r7, lr}
 80033e4:	b086      	sub	sp, #24
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
 80033ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033f4:	f7ff ff1a 	bl	800322c <__NVIC_GetPriorityGrouping>
 80033f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	6978      	ldr	r0, [r7, #20]
 8003400:	f7ff ff8e 	bl	8003320 <NVIC_EncodePriority>
 8003404:	4602      	mov	r2, r0
 8003406:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800340a:	4611      	mov	r1, r2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff ff5d 	bl	80032cc <__NVIC_SetPriority>
}
 8003412:	bf00      	nop
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}

0800341a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800341a:	b580      	push	{r7, lr}
 800341c:	b082      	sub	sp, #8
 800341e:	af00      	add	r7, sp, #0
 8003420:	4603      	mov	r3, r0
 8003422:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003428:	4618      	mov	r0, r3
 800342a:	f7ff ff0d 	bl	8003248 <__NVIC_EnableIRQ>
}
 800342e:	bf00      	nop
 8003430:	3708      	adds	r7, #8
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}

08003436 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003436:	b580      	push	{r7, lr}
 8003438:	b082      	sub	sp, #8
 800343a:	af00      	add	r7, sp, #0
 800343c:	4603      	mov	r3, r0
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff ff1d 	bl	8003284 <__NVIC_DisableIRQ>
}
 800344a:	bf00      	nop
 800344c:	3708      	adds	r7, #8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}

08003452 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b082      	sub	sp, #8
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f7ff ff94 	bl	8003388 <SysTick_Config>
 8003460:	4603      	mov	r3, r0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3708      	adds	r7, #8
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
	...

0800346c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800346c:	b480      	push	{r7}
 800346e:	b089      	sub	sp, #36	@ 0x24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
 8003474:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003476:	2300      	movs	r3, #0
 8003478:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800347a:	2300      	movs	r3, #0
 800347c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800347e:	2300      	movs	r3, #0
 8003480:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
 8003486:	e177      	b.n	8003778 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4013      	ands	r3, r2
 800349a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	429a      	cmp	r2, r3
 80034a2:	f040 8166 	bne.w	8003772 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d005      	beq.n	80034be <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d130      	bne.n	8003520 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	2203      	movs	r2, #3
 80034ca:	fa02 f303 	lsl.w	r3, r2, r3
 80034ce:	43db      	mvns	r3, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4013      	ands	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	68da      	ldr	r2, [r3, #12]
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	69ba      	ldr	r2, [r7, #24]
 80034ec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034f4:	2201      	movs	r2, #1
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	fa02 f303 	lsl.w	r3, r2, r3
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	091b      	lsrs	r3, r3, #4
 800350a:	f003 0201 	and.w	r2, r3, #1
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	4313      	orrs	r3, r2
 8003518:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 0303 	and.w	r3, r3, #3
 8003528:	2b03      	cmp	r3, #3
 800352a:	d017      	beq.n	800355c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	68db      	ldr	r3, [r3, #12]
 8003530:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	689a      	ldr	r2, [r3, #8]
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	fa02 f303 	lsl.w	r3, r2, r3
 8003550:	69ba      	ldr	r2, [r7, #24]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0303 	and.w	r3, r3, #3
 8003564:	2b02      	cmp	r3, #2
 8003566:	d123      	bne.n	80035b0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003568:	69fb      	ldr	r3, [r7, #28]
 800356a:	08da      	lsrs	r2, r3, #3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	3208      	adds	r2, #8
 8003570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003574:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	f003 0307 	and.w	r3, r3, #7
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	220f      	movs	r2, #15
 8003580:	fa02 f303 	lsl.w	r3, r2, r3
 8003584:	43db      	mvns	r3, r3
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4013      	ands	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	691a      	ldr	r2, [r3, #16]
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	fa02 f303 	lsl.w	r3, r2, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4313      	orrs	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035a2:	69fb      	ldr	r3, [r7, #28]
 80035a4:	08da      	lsrs	r2, r3, #3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3208      	adds	r2, #8
 80035aa:	69b9      	ldr	r1, [r7, #24]
 80035ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	005b      	lsls	r3, r3, #1
 80035ba:	2203      	movs	r2, #3
 80035bc:	fa02 f303 	lsl.w	r3, r2, r3
 80035c0:	43db      	mvns	r3, r3
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	4013      	ands	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	f003 0203 	and.w	r2, r3, #3
 80035d0:	69fb      	ldr	r3, [r7, #28]
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	fa02 f303 	lsl.w	r3, r2, r3
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	4313      	orrs	r3, r2
 80035dc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 80c0 	beq.w	8003772 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
 80035f6:	4b66      	ldr	r3, [pc, #408]	@ (8003790 <HAL_GPIO_Init+0x324>)
 80035f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035fa:	4a65      	ldr	r2, [pc, #404]	@ (8003790 <HAL_GPIO_Init+0x324>)
 80035fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003600:	6453      	str	r3, [r2, #68]	@ 0x44
 8003602:	4b63      	ldr	r3, [pc, #396]	@ (8003790 <HAL_GPIO_Init+0x324>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003606:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800360e:	4a61      	ldr	r2, [pc, #388]	@ (8003794 <HAL_GPIO_Init+0x328>)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	3302      	adds	r3, #2
 8003616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800361a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	220f      	movs	r2, #15
 8003626:	fa02 f303 	lsl.w	r3, r2, r3
 800362a:	43db      	mvns	r3, r3
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	4013      	ands	r3, r2
 8003630:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a58      	ldr	r2, [pc, #352]	@ (8003798 <HAL_GPIO_Init+0x32c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d037      	beq.n	80036aa <HAL_GPIO_Init+0x23e>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a57      	ldr	r2, [pc, #348]	@ (800379c <HAL_GPIO_Init+0x330>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d031      	beq.n	80036a6 <HAL_GPIO_Init+0x23a>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a56      	ldr	r2, [pc, #344]	@ (80037a0 <HAL_GPIO_Init+0x334>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d02b      	beq.n	80036a2 <HAL_GPIO_Init+0x236>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a55      	ldr	r2, [pc, #340]	@ (80037a4 <HAL_GPIO_Init+0x338>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d025      	beq.n	800369e <HAL_GPIO_Init+0x232>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a54      	ldr	r2, [pc, #336]	@ (80037a8 <HAL_GPIO_Init+0x33c>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01f      	beq.n	800369a <HAL_GPIO_Init+0x22e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a53      	ldr	r2, [pc, #332]	@ (80037ac <HAL_GPIO_Init+0x340>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d019      	beq.n	8003696 <HAL_GPIO_Init+0x22a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a52      	ldr	r2, [pc, #328]	@ (80037b0 <HAL_GPIO_Init+0x344>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d013      	beq.n	8003692 <HAL_GPIO_Init+0x226>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a51      	ldr	r2, [pc, #324]	@ (80037b4 <HAL_GPIO_Init+0x348>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00d      	beq.n	800368e <HAL_GPIO_Init+0x222>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a50      	ldr	r2, [pc, #320]	@ (80037b8 <HAL_GPIO_Init+0x34c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <HAL_GPIO_Init+0x21e>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4f      	ldr	r2, [pc, #316]	@ (80037bc <HAL_GPIO_Init+0x350>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d101      	bne.n	8003686 <HAL_GPIO_Init+0x21a>
 8003682:	2309      	movs	r3, #9
 8003684:	e012      	b.n	80036ac <HAL_GPIO_Init+0x240>
 8003686:	230a      	movs	r3, #10
 8003688:	e010      	b.n	80036ac <HAL_GPIO_Init+0x240>
 800368a:	2308      	movs	r3, #8
 800368c:	e00e      	b.n	80036ac <HAL_GPIO_Init+0x240>
 800368e:	2307      	movs	r3, #7
 8003690:	e00c      	b.n	80036ac <HAL_GPIO_Init+0x240>
 8003692:	2306      	movs	r3, #6
 8003694:	e00a      	b.n	80036ac <HAL_GPIO_Init+0x240>
 8003696:	2305      	movs	r3, #5
 8003698:	e008      	b.n	80036ac <HAL_GPIO_Init+0x240>
 800369a:	2304      	movs	r3, #4
 800369c:	e006      	b.n	80036ac <HAL_GPIO_Init+0x240>
 800369e:	2303      	movs	r3, #3
 80036a0:	e004      	b.n	80036ac <HAL_GPIO_Init+0x240>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e002      	b.n	80036ac <HAL_GPIO_Init+0x240>
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <HAL_GPIO_Init+0x240>
 80036aa:	2300      	movs	r3, #0
 80036ac:	69fa      	ldr	r2, [r7, #28]
 80036ae:	f002 0203 	and.w	r2, r2, #3
 80036b2:	0092      	lsls	r2, r2, #2
 80036b4:	4093      	lsls	r3, r2
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036bc:	4935      	ldr	r1, [pc, #212]	@ (8003794 <HAL_GPIO_Init+0x328>)
 80036be:	69fb      	ldr	r3, [r7, #28]
 80036c0:	089b      	lsrs	r3, r3, #2
 80036c2:	3302      	adds	r3, #2
 80036c4:	69ba      	ldr	r2, [r7, #24]
 80036c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036ca:	4b3d      	ldr	r3, [pc, #244]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 80036cc:	689b      	ldr	r3, [r3, #8]
 80036ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	43db      	mvns	r3, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4013      	ands	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d003      	beq.n	80036ee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036ee:	4a34      	ldr	r2, [pc, #208]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 80036f0:	69bb      	ldr	r3, [r7, #24]
 80036f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80036f4:	4b32      	ldr	r3, [pc, #200]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	43db      	mvns	r3, r3
 80036fe:	69ba      	ldr	r2, [r7, #24]
 8003700:	4013      	ands	r3, r2
 8003702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800370c:	2b00      	cmp	r3, #0
 800370e:	d003      	beq.n	8003718 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003710:	69ba      	ldr	r2, [r7, #24]
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	4313      	orrs	r3, r2
 8003716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003718:	4a29      	ldr	r2, [pc, #164]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800371e:	4b28      	ldr	r3, [pc, #160]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	43db      	mvns	r3, r3
 8003728:	69ba      	ldr	r2, [r7, #24]
 800372a:	4013      	ands	r3, r2
 800372c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	4313      	orrs	r3, r2
 8003740:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003742:	4a1f      	ldr	r2, [pc, #124]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003748:	4b1d      	ldr	r3, [pc, #116]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	43db      	mvns	r3, r3
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	4013      	ands	r3, r2
 8003756:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003760:	2b00      	cmp	r3, #0
 8003762:	d003      	beq.n	800376c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003764:	69ba      	ldr	r2, [r7, #24]
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	4313      	orrs	r3, r2
 800376a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800376c:	4a14      	ldr	r2, [pc, #80]	@ (80037c0 <HAL_GPIO_Init+0x354>)
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3301      	adds	r3, #1
 8003776:	61fb      	str	r3, [r7, #28]
 8003778:	69fb      	ldr	r3, [r7, #28]
 800377a:	2b0f      	cmp	r3, #15
 800377c:	f67f ae84 	bls.w	8003488 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003780:	bf00      	nop
 8003782:	bf00      	nop
 8003784:	3724      	adds	r7, #36	@ 0x24
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr
 800378e:	bf00      	nop
 8003790:	40023800 	.word	0x40023800
 8003794:	40013800 	.word	0x40013800
 8003798:	40020000 	.word	0x40020000
 800379c:	40020400 	.word	0x40020400
 80037a0:	40020800 	.word	0x40020800
 80037a4:	40020c00 	.word	0x40020c00
 80037a8:	40021000 	.word	0x40021000
 80037ac:	40021400 	.word	0x40021400
 80037b0:	40021800 	.word	0x40021800
 80037b4:	40021c00 	.word	0x40021c00
 80037b8:	40022000 	.word	0x40022000
 80037bc:	40022400 	.word	0x40022400
 80037c0:	40013c00 	.word	0x40013c00

080037c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b087      	sub	sp, #28
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037ce:	2300      	movs	r3, #0
 80037d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80037d6:	2300      	movs	r3, #0
 80037d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037da:	2300      	movs	r3, #0
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e0d9      	b.n	8003994 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037e0:	2201      	movs	r2, #1
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	f040 80c9 	bne.w	800398e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80037fc:	4a6b      	ldr	r2, [pc, #428]	@ (80039ac <HAL_GPIO_DeInit+0x1e8>)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	089b      	lsrs	r3, r3, #2
 8003802:	3302      	adds	r3, #2
 8003804:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003808:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f003 0303 	and.w	r3, r3, #3
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	220f      	movs	r2, #15
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	4013      	ands	r3, r2
 800381c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4a63      	ldr	r2, [pc, #396]	@ (80039b0 <HAL_GPIO_DeInit+0x1ec>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d037      	beq.n	8003896 <HAL_GPIO_DeInit+0xd2>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a62      	ldr	r2, [pc, #392]	@ (80039b4 <HAL_GPIO_DeInit+0x1f0>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d031      	beq.n	8003892 <HAL_GPIO_DeInit+0xce>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a61      	ldr	r2, [pc, #388]	@ (80039b8 <HAL_GPIO_DeInit+0x1f4>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d02b      	beq.n	800388e <HAL_GPIO_DeInit+0xca>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a60      	ldr	r2, [pc, #384]	@ (80039bc <HAL_GPIO_DeInit+0x1f8>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d025      	beq.n	800388a <HAL_GPIO_DeInit+0xc6>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a5f      	ldr	r2, [pc, #380]	@ (80039c0 <HAL_GPIO_DeInit+0x1fc>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d01f      	beq.n	8003886 <HAL_GPIO_DeInit+0xc2>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a5e      	ldr	r2, [pc, #376]	@ (80039c4 <HAL_GPIO_DeInit+0x200>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d019      	beq.n	8003882 <HAL_GPIO_DeInit+0xbe>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a5d      	ldr	r2, [pc, #372]	@ (80039c8 <HAL_GPIO_DeInit+0x204>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <HAL_GPIO_DeInit+0xba>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a5c      	ldr	r2, [pc, #368]	@ (80039cc <HAL_GPIO_DeInit+0x208>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00d      	beq.n	800387a <HAL_GPIO_DeInit+0xb6>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a5b      	ldr	r2, [pc, #364]	@ (80039d0 <HAL_GPIO_DeInit+0x20c>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d007      	beq.n	8003876 <HAL_GPIO_DeInit+0xb2>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a5a      	ldr	r2, [pc, #360]	@ (80039d4 <HAL_GPIO_DeInit+0x210>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_GPIO_DeInit+0xae>
 800386e:	2309      	movs	r3, #9
 8003870:	e012      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003872:	230a      	movs	r3, #10
 8003874:	e010      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003876:	2308      	movs	r3, #8
 8003878:	e00e      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800387a:	2307      	movs	r3, #7
 800387c:	e00c      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800387e:	2306      	movs	r3, #6
 8003880:	e00a      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003882:	2305      	movs	r3, #5
 8003884:	e008      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003886:	2304      	movs	r3, #4
 8003888:	e006      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800388a:	2303      	movs	r3, #3
 800388c:	e004      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 800388e:	2302      	movs	r3, #2
 8003890:	e002      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003892:	2301      	movs	r3, #1
 8003894:	e000      	b.n	8003898 <HAL_GPIO_DeInit+0xd4>
 8003896:	2300      	movs	r3, #0
 8003898:	697a      	ldr	r2, [r7, #20]
 800389a:	f002 0203 	and.w	r2, r2, #3
 800389e:	0092      	lsls	r2, r2, #2
 80038a0:	4093      	lsls	r3, r2
 80038a2:	68ba      	ldr	r2, [r7, #8]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d132      	bne.n	800390e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80038a8:	4b4b      	ldr	r3, [pc, #300]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	43db      	mvns	r3, r3
 80038b0:	4949      	ldr	r1, [pc, #292]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038b2:	4013      	ands	r3, r2
 80038b4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80038b6:	4b48      	ldr	r3, [pc, #288]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038b8:	685a      	ldr	r2, [r3, #4]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	43db      	mvns	r3, r3
 80038be:	4946      	ldr	r1, [pc, #280]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80038c4:	4b44      	ldr	r3, [pc, #272]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038c6:	68da      	ldr	r2, [r3, #12]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	43db      	mvns	r3, r3
 80038cc:	4942      	ldr	r1, [pc, #264]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80038d2:	4b41      	ldr	r3, [pc, #260]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	43db      	mvns	r3, r3
 80038da:	493f      	ldr	r1, [pc, #252]	@ (80039d8 <HAL_GPIO_DeInit+0x214>)
 80038dc:	4013      	ands	r3, r2
 80038de:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	f003 0303 	and.w	r3, r3, #3
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	220f      	movs	r2, #15
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80038f0:	4a2e      	ldr	r2, [pc, #184]	@ (80039ac <HAL_GPIO_DeInit+0x1e8>)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	089b      	lsrs	r3, r3, #2
 80038f6:	3302      	adds	r3, #2
 80038f8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	43da      	mvns	r2, r3
 8003900:	482a      	ldr	r0, [pc, #168]	@ (80039ac <HAL_GPIO_DeInit+0x1e8>)
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	089b      	lsrs	r3, r3, #2
 8003906:	400a      	ands	r2, r1
 8003908:	3302      	adds	r3, #2
 800390a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2103      	movs	r1, #3
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	43db      	mvns	r3, r3
 800391e:	401a      	ands	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	08da      	lsrs	r2, r3, #3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3208      	adds	r2, #8
 800392c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	220f      	movs	r2, #15
 800393a:	fa02 f303 	lsl.w	r3, r2, r3
 800393e:	43db      	mvns	r3, r3
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	08d2      	lsrs	r2, r2, #3
 8003944:	4019      	ands	r1, r3
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	3208      	adds	r2, #8
 800394a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	68da      	ldr	r2, [r3, #12]
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	2103      	movs	r1, #3
 8003958:	fa01 f303 	lsl.w	r3, r1, r3
 800395c:	43db      	mvns	r3, r3
 800395e:	401a      	ands	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	685a      	ldr	r2, [r3, #4]
 8003968:	2101      	movs	r1, #1
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	fa01 f303 	lsl.w	r3, r1, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	401a      	ands	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689a      	ldr	r2, [r3, #8]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	005b      	lsls	r3, r3, #1
 8003980:	2103      	movs	r1, #3
 8003982:	fa01 f303 	lsl.w	r3, r1, r3
 8003986:	43db      	mvns	r3, r3
 8003988:	401a      	ands	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	3301      	adds	r3, #1
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b0f      	cmp	r3, #15
 8003998:	f67f af22 	bls.w	80037e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800399c:	bf00      	nop
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40013800 	.word	0x40013800
 80039b0:	40020000 	.word	0x40020000
 80039b4:	40020400 	.word	0x40020400
 80039b8:	40020800 	.word	0x40020800
 80039bc:	40020c00 	.word	0x40020c00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	40021400 	.word	0x40021400
 80039c8:	40021800 	.word	0x40021800
 80039cc:	40021c00 	.word	0x40021c00
 80039d0:	40022000 	.word	0x40022000
 80039d4:	40022400 	.word	0x40022400
 80039d8:	40013c00 	.word	0x40013c00

080039dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	460b      	mov	r3, r1
 80039e6:	807b      	strh	r3, [r7, #2]
 80039e8:	4613      	mov	r3, r2
 80039ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80039ec:	787b      	ldrb	r3, [r7, #1]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d003      	beq.n	80039fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80039f2:	887a      	ldrh	r2, [r7, #2]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80039f8:	e003      	b.n	8003a02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80039fa:	887b      	ldrh	r3, [r7, #2]
 80039fc:	041a      	lsls	r2, r3, #16
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	619a      	str	r2, [r3, #24]
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d101      	bne.n	8003a22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e12b      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d106      	bne.n	8003a3c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f7fe fd3a 	bl	80024b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2224      	movs	r2, #36	@ 0x24
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0201 	bic.w	r2, r2, #1
 8003a52:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a62:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003a72:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003a74:	f001 ff06 	bl	8005884 <HAL_RCC_GetPCLK1Freq>
 8003a78:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	4a81      	ldr	r2, [pc, #516]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d807      	bhi.n	8003a94 <HAL_I2C_Init+0x84>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4a80      	ldr	r2, [pc, #512]	@ (8003c88 <HAL_I2C_Init+0x278>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	bf94      	ite	ls
 8003a8c:	2301      	movls	r3, #1
 8003a8e:	2300      	movhi	r3, #0
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	e006      	b.n	8003aa2 <HAL_I2C_Init+0x92>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4a7d      	ldr	r2, [pc, #500]	@ (8003c8c <HAL_I2C_Init+0x27c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	bf94      	ite	ls
 8003a9c:	2301      	movls	r3, #1
 8003a9e:	2300      	movhi	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e0e7      	b.n	8003c7a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4a78      	ldr	r2, [pc, #480]	@ (8003c90 <HAL_I2C_Init+0x280>)
 8003aae:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab2:	0c9b      	lsrs	r3, r3, #18
 8003ab4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6a1b      	ldr	r3, [r3, #32]
 8003ad0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d802      	bhi.n	8003ae4 <HAL_I2C_Init+0xd4>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	3301      	adds	r3, #1
 8003ae2:	e009      	b.n	8003af8 <HAL_I2C_Init+0xe8>
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003aea:	fb02 f303 	mul.w	r3, r2, r3
 8003aee:	4a69      	ldr	r2, [pc, #420]	@ (8003c94 <HAL_I2C_Init+0x284>)
 8003af0:	fba2 2303 	umull	r2, r3, r2, r3
 8003af4:	099b      	lsrs	r3, r3, #6
 8003af6:	3301      	adds	r3, #1
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6812      	ldr	r2, [r2, #0]
 8003afc:	430b      	orrs	r3, r1
 8003afe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	69db      	ldr	r3, [r3, #28]
 8003b06:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003b0a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	495c      	ldr	r1, [pc, #368]	@ (8003c84 <HAL_I2C_Init+0x274>)
 8003b14:	428b      	cmp	r3, r1
 8003b16:	d819      	bhi.n	8003b4c <HAL_I2C_Init+0x13c>
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	1e59      	subs	r1, r3, #1
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	005b      	lsls	r3, r3, #1
 8003b22:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b26:	1c59      	adds	r1, r3, #1
 8003b28:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003b2c:	400b      	ands	r3, r1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d00a      	beq.n	8003b48 <HAL_I2C_Init+0x138>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	1e59      	subs	r1, r3, #1
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	005b      	lsls	r3, r3, #1
 8003b3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003b40:	3301      	adds	r3, #1
 8003b42:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b46:	e051      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b48:	2304      	movs	r3, #4
 8003b4a:	e04f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d111      	bne.n	8003b78 <HAL_I2C_Init+0x168>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	1e58      	subs	r0, r3, #1
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6859      	ldr	r1, [r3, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	005b      	lsls	r3, r3, #1
 8003b60:	440b      	add	r3, r1
 8003b62:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b66:	3301      	adds	r3, #1
 8003b68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	bf0c      	ite	eq
 8003b70:	2301      	moveq	r3, #1
 8003b72:	2300      	movne	r3, #0
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	e012      	b.n	8003b9e <HAL_I2C_Init+0x18e>
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	1e58      	subs	r0, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6859      	ldr	r1, [r3, #4]
 8003b80:	460b      	mov	r3, r1
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	0099      	lsls	r1, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003b8e:	3301      	adds	r3, #1
 8003b90:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	bf0c      	ite	eq
 8003b98:	2301      	moveq	r3, #1
 8003b9a:	2300      	movne	r3, #0
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d001      	beq.n	8003ba6 <HAL_I2C_Init+0x196>
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e022      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10e      	bne.n	8003bcc <HAL_I2C_Init+0x1bc>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	1e58      	subs	r0, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6859      	ldr	r1, [r3, #4]
 8003bb6:	460b      	mov	r3, r1
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	440b      	add	r3, r1
 8003bbc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bc6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003bca:	e00f      	b.n	8003bec <HAL_I2C_Init+0x1dc>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	1e58      	subs	r0, r3, #1
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6859      	ldr	r1, [r3, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	0099      	lsls	r1, r3, #2
 8003bdc:	440b      	add	r3, r1
 8003bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8003be2:	3301      	adds	r3, #1
 8003be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003be8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	6809      	ldr	r1, [r1, #0]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	69da      	ldr	r2, [r3, #28]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	431a      	orrs	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003c1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6911      	ldr	r1, [r2, #16]
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	68d2      	ldr	r2, [r2, #12]
 8003c26:	4311      	orrs	r1, r2
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	695a      	ldr	r2, [r3, #20]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	431a      	orrs	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f042 0201 	orr.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2220      	movs	r2, #32
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3710      	adds	r7, #16
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	000186a0 	.word	0x000186a0
 8003c88:	001e847f 	.word	0x001e847f
 8003c8c:	003d08ff 	.word	0x003d08ff
 8003c90:	431bde83 	.word	0x431bde83
 8003c94:	10624dd3 	.word	0x10624dd3

08003c98 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b088      	sub	sp, #32
 8003c9c:	af02      	add	r7, sp, #8
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	4608      	mov	r0, r1
 8003ca2:	4611      	mov	r1, r2
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	817b      	strh	r3, [r7, #10]
 8003caa:	460b      	mov	r3, r1
 8003cac:	813b      	strh	r3, [r7, #8]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cb2:	f7ff fa67 	bl	8003184 <HAL_GetTick>
 8003cb6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	f040 80d9 	bne.w	8003e78 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	9300      	str	r3, [sp, #0]
 8003cca:	2319      	movs	r3, #25
 8003ccc:	2201      	movs	r2, #1
 8003cce:	496d      	ldr	r1, [pc, #436]	@ (8003e84 <HAL_I2C_Mem_Write+0x1ec>)
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fc8b 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d001      	beq.n	8003ce0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e0cc      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce6:	2b01      	cmp	r3, #1
 8003ce8:	d101      	bne.n	8003cee <HAL_I2C_Mem_Write+0x56>
 8003cea:	2302      	movs	r3, #2
 8003cec:	e0c5      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d007      	beq.n	8003d14 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d22:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2221      	movs	r2, #33	@ 0x21
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2240      	movs	r2, #64	@ 0x40
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a3a      	ldr	r2, [r7, #32]
 8003d3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003d44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4a:	b29a      	uxth	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4a4d      	ldr	r2, [pc, #308]	@ (8003e88 <HAL_I2C_Mem_Write+0x1f0>)
 8003d54:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003d56:	88f8      	ldrh	r0, [r7, #6]
 8003d58:	893a      	ldrh	r2, [r7, #8]
 8003d5a:	8979      	ldrh	r1, [r7, #10]
 8003d5c:	697b      	ldr	r3, [r7, #20]
 8003d5e:	9301      	str	r3, [sp, #4]
 8003d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	4603      	mov	r3, r0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fac2 	bl	80042f0 <I2C_RequestMemoryWrite>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d052      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e081      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fd50 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d80:	4603      	mov	r3, r0
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00d      	beq.n	8003da2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8a:	2b04      	cmp	r3, #4
 8003d8c:	d107      	bne.n	8003d9e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e06b      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003da6:	781a      	ldrb	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	1c5a      	adds	r2, r3, #1
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	b29a      	uxth	r2, r3
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	f003 0304 	and.w	r3, r3, #4
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d11b      	bne.n	8003e18 <HAL_I2C_Mem_Write+0x180>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d017      	beq.n	8003e18 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dec:	781a      	ldrb	r2, [r3, #0]
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b29a      	uxth	r2, r3
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e0e:	b29b      	uxth	r3, r3
 8003e10:	3b01      	subs	r3, #1
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1aa      	bne.n	8003d76 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003e24:	68f8      	ldr	r0, [r7, #12]
 8003e26:	f000 fd43 	bl	80048b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d00d      	beq.n	8003e4c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e34:	2b04      	cmp	r3, #4
 8003e36:	d107      	bne.n	8003e48 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e46:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e016      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	e000      	b.n	8003e7a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003e78:	2302      	movs	r3, #2
  }
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	3718      	adds	r7, #24
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	00100002 	.word	0x00100002
 8003e88:	ffff0000 	.word	0xffff0000

08003e8c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	@ 0x30
 8003e90:	af02      	add	r7, sp, #8
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	4608      	mov	r0, r1
 8003e96:	4611      	mov	r1, r2
 8003e98:	461a      	mov	r2, r3
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	817b      	strh	r3, [r7, #10]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	813b      	strh	r3, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ea6:	f7ff f96d 	bl	8003184 <HAL_GetTick>
 8003eaa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb2:	b2db      	uxtb	r3, r3
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	f040 8214 	bne.w	80042e2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ebc:	9300      	str	r3, [sp, #0]
 8003ebe:	2319      	movs	r3, #25
 8003ec0:	2201      	movs	r2, #1
 8003ec2:	497b      	ldr	r1, [pc, #492]	@ (80040b0 <HAL_I2C_Mem_Read+0x224>)
 8003ec4:	68f8      	ldr	r0, [r7, #12]
 8003ec6:	f000 fb91 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003ed0:	2302      	movs	r3, #2
 8003ed2:	e207      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Mem_Read+0x56>
 8003ede:	2302      	movs	r3, #2
 8003ee0:	e200      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d007      	beq.n	8003f08 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681a      	ldr	r2, [r3, #0]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f042 0201 	orr.w	r2, r2, #1
 8003f06:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	681a      	ldr	r2, [r3, #0]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f16:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2222      	movs	r2, #34	@ 0x22
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2240      	movs	r2, #64	@ 0x40
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f32:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003f38:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29a      	uxth	r2, r3
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	4a5b      	ldr	r2, [pc, #364]	@ (80040b4 <HAL_I2C_Mem_Read+0x228>)
 8003f48:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003f4a:	88f8      	ldrh	r0, [r7, #6]
 8003f4c:	893a      	ldrh	r2, [r7, #8]
 8003f4e:	8979      	ldrh	r1, [r7, #10]
 8003f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f52:	9301      	str	r3, [sp, #4]
 8003f54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	4603      	mov	r3, r0
 8003f5a:	68f8      	ldr	r0, [r7, #12]
 8003f5c:	f000 fa5e 	bl	800441c <I2C_RequestMemoryRead>
 8003f60:	4603      	mov	r3, r0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e1bc      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d113      	bne.n	8003f9a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	695b      	ldr	r3, [r3, #20]
 8003f7c:	623b      	str	r3, [r7, #32]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	623b      	str	r3, [r7, #32]
 8003f86:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f96:	601a      	str	r2, [r3, #0]
 8003f98:	e190      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d11b      	bne.n	8003fda <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003fb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	61fb      	str	r3, [r7, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695b      	ldr	r3, [r3, #20]
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	699b      	ldr	r3, [r3, #24]
 8003fc4:	61fb      	str	r3, [r7, #28]
 8003fc6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	e170      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d11b      	bne.n	800401a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ff0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004000:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004002:	2300      	movs	r3, #0
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	61bb      	str	r3, [r7, #24]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	61bb      	str	r3, [r7, #24]
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	e150      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	617b      	str	r3, [r7, #20]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	617b      	str	r3, [r7, #20]
 800402e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004030:	e144      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004036:	2b03      	cmp	r3, #3
 8004038:	f200 80f1 	bhi.w	800421e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	2b01      	cmp	r3, #1
 8004042:	d123      	bne.n	800408c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004044:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004046:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004048:	68f8      	ldr	r0, [r7, #12]
 800404a:	f000 fc79 	bl	8004940 <I2C_WaitOnRXNEFlagUntilTimeout>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004054:	2301      	movs	r3, #1
 8004056:	e145      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691a      	ldr	r2, [r3, #16]
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004074:	3b01      	subs	r3, #1
 8004076:	b29a      	uxth	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800408a:	e117      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004090:	2b02      	cmp	r3, #2
 8004092:	d14e      	bne.n	8004132 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800409a:	2200      	movs	r2, #0
 800409c:	4906      	ldr	r1, [pc, #24]	@ (80040b8 <HAL_I2C_Mem_Read+0x22c>)
 800409e:	68f8      	ldr	r0, [r7, #12]
 80040a0:	f000 faa4 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e11a      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
 80040ae:	bf00      	nop
 80040b0:	00100002 	.word	0x00100002
 80040b4:	ffff0000 	.word	0xffff0000
 80040b8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	691a      	ldr	r2, [r3, #16]
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f4:	b29b      	uxth	r3, r3
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29a      	uxth	r2, r3
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	691a      	ldr	r2, [r3, #16]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004126:	b29b      	uxth	r3, r3
 8004128:	3b01      	subs	r3, #1
 800412a:	b29a      	uxth	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004130:	e0c4      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004134:	9300      	str	r3, [sp, #0]
 8004136:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004138:	2200      	movs	r2, #0
 800413a:	496c      	ldr	r1, [pc, #432]	@ (80042ec <HAL_I2C_Mem_Read+0x460>)
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f000 fa55 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8004142:	4603      	mov	r3, r0
 8004144:	2b00      	cmp	r3, #0
 8004146:	d001      	beq.n	800414c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004148:	2301      	movs	r3, #1
 800414a:	e0cb      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	681a      	ldr	r2, [r3, #0]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800415a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	691a      	ldr	r2, [r3, #16]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004166:	b2d2      	uxtb	r2, r2
 8004168:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416e:	1c5a      	adds	r2, r3, #1
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004178:	3b01      	subs	r3, #1
 800417a:	b29a      	uxth	r2, r3
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004184:	b29b      	uxth	r3, r3
 8004186:	3b01      	subs	r3, #1
 8004188:	b29a      	uxth	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800418e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004194:	2200      	movs	r2, #0
 8004196:	4955      	ldr	r1, [pc, #340]	@ (80042ec <HAL_I2C_Mem_Read+0x460>)
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 fa27 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e09d      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	691a      	ldr	r2, [r3, #16]
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ca:	1c5a      	adds	r2, r3, #1
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041d4:	3b01      	subs	r3, #1
 80041d6:	b29a      	uxth	r2, r3
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	691a      	ldr	r2, [r3, #16]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fc:	1c5a      	adds	r2, r3, #1
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004212:	b29b      	uxth	r3, r3
 8004214:	3b01      	subs	r3, #1
 8004216:	b29a      	uxth	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800421c:	e04e      	b.n	80042bc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800421e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004220:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fb8c 	bl	8004940 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e058      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	691a      	ldr	r2, [r3, #16]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800423c:	b2d2      	uxtb	r2, r2
 800423e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004244:	1c5a      	adds	r2, r3, #1
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b29a      	uxth	r2, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	f003 0304 	and.w	r3, r3, #4
 800426e:	2b04      	cmp	r3, #4
 8004270:	d124      	bne.n	80042bc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004276:	2b03      	cmp	r3, #3
 8004278:	d107      	bne.n	800428a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004288:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	691a      	ldr	r2, [r3, #16]
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429c:	1c5a      	adds	r2, r3, #1
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a6:	3b01      	subs	r3, #1
 80042a8:	b29a      	uxth	r2, r3
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b29a      	uxth	r2, r3
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	f47f aeb6 	bne.w	8004032 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2220      	movs	r2, #32
 80042ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2200      	movs	r2, #0
 80042d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	e000      	b.n	80042e4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80042e2:	2302      	movs	r3, #2
  }
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3728      	adds	r7, #40	@ 0x28
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}
 80042ec:	00010004 	.word	0x00010004

080042f0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af02      	add	r7, sp, #8
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	4608      	mov	r0, r1
 80042fa:	4611      	mov	r1, r2
 80042fc:	461a      	mov	r2, r3
 80042fe:	4603      	mov	r3, r0
 8004300:	817b      	strh	r3, [r7, #10]
 8004302:	460b      	mov	r3, r1
 8004304:	813b      	strh	r3, [r7, #8]
 8004306:	4613      	mov	r3, r2
 8004308:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681a      	ldr	r2, [r3, #0]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004318:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800431a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	6a3b      	ldr	r3, [r7, #32]
 8004320:	2200      	movs	r2, #0
 8004322:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004326:	68f8      	ldr	r0, [r7, #12]
 8004328:	f000 f960 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00d      	beq.n	800434e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800433c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004340:	d103      	bne.n	800434a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004348:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e05f      	b.n	800440e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800434e:	897b      	ldrh	r3, [r7, #10]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	461a      	mov	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800435c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800435e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004360:	6a3a      	ldr	r2, [r7, #32]
 8004362:	492d      	ldr	r1, [pc, #180]	@ (8004418 <I2C_RequestMemoryWrite+0x128>)
 8004364:	68f8      	ldr	r0, [r7, #12]
 8004366:	f000 f9bb 	bl	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800436a:	4603      	mov	r3, r0
 800436c:	2b00      	cmp	r3, #0
 800436e:	d001      	beq.n	8004374 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e04c      	b.n	800440e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004374:	2300      	movs	r3, #0
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	617b      	str	r3, [r7, #20]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	699b      	ldr	r3, [r3, #24]
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800438a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800438c:	6a39      	ldr	r1, [r7, #32]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 fa46 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00d      	beq.n	80043b6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d107      	bne.n	80043b2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043b0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e02b      	b.n	800440e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80043b6:	88fb      	ldrh	r3, [r7, #6]
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d105      	bne.n	80043c8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043bc:	893b      	ldrh	r3, [r7, #8]
 80043be:	b2da      	uxtb	r2, r3
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	611a      	str	r2, [r3, #16]
 80043c6:	e021      	b.n	800440c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80043c8:	893b      	ldrh	r3, [r7, #8]
 80043ca:	0a1b      	lsrs	r3, r3, #8
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043d8:	6a39      	ldr	r1, [r7, #32]
 80043da:	68f8      	ldr	r0, [r7, #12]
 80043dc:	f000 fa20 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 80043e0:	4603      	mov	r3, r0
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00d      	beq.n	8004402 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d107      	bne.n	80043fe <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043fc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e005      	b.n	800440e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004402:	893b      	ldrh	r3, [r7, #8]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	00010002 	.word	0x00010002

0800441c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004444:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004454:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	6a3b      	ldr	r3, [r7, #32]
 800445c:	2200      	movs	r2, #0
 800445e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004462:	68f8      	ldr	r0, [r7, #12]
 8004464:	f000 f8c2 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d00d      	beq.n	800448a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004478:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800447c:	d103      	bne.n	8004486 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004484:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e0aa      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800448a:	897b      	ldrh	r3, [r7, #10]
 800448c:	b2db      	uxtb	r3, r3
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004498:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800449a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800449c:	6a3a      	ldr	r2, [r7, #32]
 800449e:	4952      	ldr	r1, [pc, #328]	@ (80045e8 <I2C_RequestMemoryRead+0x1cc>)
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f91d 	bl	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d001      	beq.n	80044b0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e097      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b0:	2300      	movs	r3, #0
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	617b      	str	r3, [r7, #20]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
 80044c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044c8:	6a39      	ldr	r1, [r7, #32]
 80044ca:	68f8      	ldr	r0, [r7, #12]
 80044cc:	f000 f9a8 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 80044d0:	4603      	mov	r3, r0
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00d      	beq.n	80044f2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d107      	bne.n	80044ee <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	681a      	ldr	r2, [r3, #0]
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e076      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044f2:	88fb      	ldrh	r3, [r7, #6]
 80044f4:	2b01      	cmp	r3, #1
 80044f6:	d105      	bne.n	8004504 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	b2da      	uxtb	r2, r3
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	611a      	str	r2, [r3, #16]
 8004502:	e021      	b.n	8004548 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004504:	893b      	ldrh	r3, [r7, #8]
 8004506:	0a1b      	lsrs	r3, r3, #8
 8004508:	b29b      	uxth	r3, r3
 800450a:	b2da      	uxtb	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004512:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004514:	6a39      	ldr	r1, [r7, #32]
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f000 f982 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 800451c:	4603      	mov	r3, r0
 800451e:	2b00      	cmp	r3, #0
 8004520:	d00d      	beq.n	800453e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004526:	2b04      	cmp	r3, #4
 8004528:	d107      	bne.n	800453a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004538:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e050      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800453e:	893b      	ldrh	r3, [r7, #8]
 8004540:	b2da      	uxtb	r2, r3
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004548:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800454a:	6a39      	ldr	r1, [r7, #32]
 800454c:	68f8      	ldr	r0, [r7, #12]
 800454e:	f000 f967 	bl	8004820 <I2C_WaitOnTXEFlagUntilTimeout>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00d      	beq.n	8004574 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800455c:	2b04      	cmp	r3, #4
 800455e:	d107      	bne.n	8004570 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800456e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e035      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004582:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004586:	9300      	str	r3, [sp, #0]
 8004588:	6a3b      	ldr	r3, [r7, #32]
 800458a:	2200      	movs	r2, #0
 800458c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004590:	68f8      	ldr	r0, [r7, #12]
 8004592:	f000 f82b 	bl	80045ec <I2C_WaitOnFlagUntilTimeout>
 8004596:	4603      	mov	r3, r0
 8004598:	2b00      	cmp	r3, #0
 800459a:	d00d      	beq.n	80045b8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045aa:	d103      	bne.n	80045b4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e013      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80045b8:	897b      	ldrh	r3, [r7, #10]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f043 0301 	orr.w	r3, r3, #1
 80045c0:	b2da      	uxtb	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	6a3a      	ldr	r2, [r7, #32]
 80045cc:	4906      	ldr	r1, [pc, #24]	@ (80045e8 <I2C_RequestMemoryRead+0x1cc>)
 80045ce:	68f8      	ldr	r0, [r7, #12]
 80045d0:	f000 f886 	bl	80046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d001      	beq.n	80045de <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	00010002 	.word	0x00010002

080045ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b084      	sub	sp, #16
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	603b      	str	r3, [r7, #0]
 80045f8:	4613      	mov	r3, r2
 80045fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045fc:	e048      	b.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004604:	d044      	beq.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004606:	f7fe fdbd 	bl	8003184 <HAL_GetTick>
 800460a:	4602      	mov	r2, r0
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	683a      	ldr	r2, [r7, #0]
 8004612:	429a      	cmp	r2, r3
 8004614:	d302      	bcc.n	800461c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d139      	bne.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	0c1b      	lsrs	r3, r3, #16
 8004620:	b2db      	uxtb	r3, r3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d10d      	bne.n	8004642 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	43da      	mvns	r2, r3
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4013      	ands	r3, r2
 8004632:	b29b      	uxth	r3, r3
 8004634:	2b00      	cmp	r3, #0
 8004636:	bf0c      	ite	eq
 8004638:	2301      	moveq	r3, #1
 800463a:	2300      	movne	r3, #0
 800463c:	b2db      	uxtb	r3, r3
 800463e:	461a      	mov	r2, r3
 8004640:	e00c      	b.n	800465c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	43da      	mvns	r2, r3
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	4013      	ands	r3, r2
 800464e:	b29b      	uxth	r3, r3
 8004650:	2b00      	cmp	r3, #0
 8004652:	bf0c      	ite	eq
 8004654:	2301      	moveq	r3, #1
 8004656:	2300      	movne	r3, #0
 8004658:	b2db      	uxtb	r3, r3
 800465a:	461a      	mov	r2, r3
 800465c:	79fb      	ldrb	r3, [r7, #7]
 800465e:	429a      	cmp	r2, r3
 8004660:	d116      	bne.n	8004690 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2200      	movs	r2, #0
 8004674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467c:	f043 0220 	orr.w	r2, r3, #32
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2200      	movs	r2, #0
 8004688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800468c:	2301      	movs	r3, #1
 800468e:	e023      	b.n	80046d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	0c1b      	lsrs	r3, r3, #16
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d10d      	bne.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	43da      	mvns	r2, r3
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	4013      	ands	r3, r2
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	bf0c      	ite	eq
 80046ac:	2301      	moveq	r3, #1
 80046ae:	2300      	movne	r3, #0
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	e00c      	b.n	80046d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	43da      	mvns	r2, r3
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	4013      	ands	r3, r2
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	bf0c      	ite	eq
 80046c8:	2301      	moveq	r3, #1
 80046ca:	2300      	movne	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	461a      	mov	r2, r3
 80046d0:	79fb      	ldrb	r3, [r7, #7]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d093      	beq.n	80045fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80046d6:	2300      	movs	r3, #0
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}

080046e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b084      	sub	sp, #16
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
 80046ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046ee:	e071      	b.n	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046fe:	d123      	bne.n	8004748 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004718:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2220      	movs	r2, #32
 8004724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004734:	f043 0204 	orr.w	r2, r3, #4
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e067      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474e:	d041      	beq.n	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004750:	f7fe fd18 	bl	8003184 <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	429a      	cmp	r2, r3
 800475e:	d302      	bcc.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d136      	bne.n	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004766:	68bb      	ldr	r3, [r7, #8]
 8004768:	0c1b      	lsrs	r3, r3, #16
 800476a:	b2db      	uxtb	r3, r3
 800476c:	2b01      	cmp	r3, #1
 800476e:	d10c      	bne.n	800478a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	695b      	ldr	r3, [r3, #20]
 8004776:	43da      	mvns	r2, r3
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	4013      	ands	r3, r2
 800477c:	b29b      	uxth	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	bf14      	ite	ne
 8004782:	2301      	movne	r3, #1
 8004784:	2300      	moveq	r3, #0
 8004786:	b2db      	uxtb	r3, r3
 8004788:	e00b      	b.n	80047a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	43da      	mvns	r2, r3
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4013      	ands	r3, r2
 8004796:	b29b      	uxth	r3, r3
 8004798:	2b00      	cmp	r3, #0
 800479a:	bf14      	ite	ne
 800479c:	2301      	movne	r3, #1
 800479e:	2300      	moveq	r3, #0
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d016      	beq.n	80047d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047c0:	f043 0220 	orr.w	r2, r3, #32
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e021      	b.n	8004818 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	0c1b      	lsrs	r3, r3, #16
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d10c      	bne.n	80047f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	695b      	ldr	r3, [r3, #20]
 80047e4:	43da      	mvns	r2, r3
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	b29b      	uxth	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	bf14      	ite	ne
 80047f0:	2301      	movne	r3, #1
 80047f2:	2300      	moveq	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	e00b      	b.n	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	43da      	mvns	r2, r3
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	4013      	ands	r3, r2
 8004804:	b29b      	uxth	r3, r3
 8004806:	2b00      	cmp	r3, #0
 8004808:	bf14      	ite	ne
 800480a:	2301      	movne	r3, #1
 800480c:	2300      	moveq	r3, #0
 800480e:	b2db      	uxtb	r3, r3
 8004810:	2b00      	cmp	r3, #0
 8004812:	f47f af6d 	bne.w	80046f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	60f8      	str	r0, [r7, #12]
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800482c:	e034      	b.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 f8e3 	bl	80049fa <I2C_IsAcknowledgeFailed>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e034      	b.n	80048a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004844:	d028      	beq.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004846:	f7fe fc9d 	bl	8003184 <HAL_GetTick>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	1ad3      	subs	r3, r2, r3
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	429a      	cmp	r2, r3
 8004854:	d302      	bcc.n	800485c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d11d      	bne.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004866:	2b80      	cmp	r3, #128	@ 0x80
 8004868:	d016      	beq.n	8004898 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2220      	movs	r2, #32
 8004874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004884:	f043 0220 	orr.w	r2, r3, #32
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	e007      	b.n	80048a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048a2:	2b80      	cmp	r3, #128	@ 0x80
 80048a4:	d1c3      	bne.n	800482e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048bc:	e034      	b.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80048be:	68f8      	ldr	r0, [r7, #12]
 80048c0:	f000 f89b 	bl	80049fa <I2C_IsAcknowledgeFailed>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e034      	b.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048d4:	d028      	beq.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048d6:	f7fe fc55 	bl	8003184 <HAL_GetTick>
 80048da:	4602      	mov	r2, r0
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	1ad3      	subs	r3, r2, r3
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	429a      	cmp	r2, r3
 80048e4:	d302      	bcc.n	80048ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d11d      	bne.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	695b      	ldr	r3, [r3, #20]
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d016      	beq.n	8004928 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004914:	f043 0220 	orr.w	r2, r3, #32
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2200      	movs	r2, #0
 8004920:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e007      	b.n	8004938 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	695b      	ldr	r3, [r3, #20]
 800492e:	f003 0304 	and.w	r3, r3, #4
 8004932:	2b04      	cmp	r3, #4
 8004934:	d1c3      	bne.n	80048be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800494c:	e049      	b.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b10      	cmp	r3, #16
 800495a:	d119      	bne.n	8004990 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0210 	mvn.w	r2, #16
 8004964:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2220      	movs	r2, #32
 8004970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	e030      	b.n	80049f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004990:	f7fe fbf8 	bl	8003184 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	68ba      	ldr	r2, [r7, #8]
 800499c:	429a      	cmp	r2, r3
 800499e:	d302      	bcc.n	80049a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d11d      	bne.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049b0:	2b40      	cmp	r3, #64	@ 0x40
 80049b2:	d016      	beq.n	80049e2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2200      	movs	r2, #0
 80049b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	f043 0220 	orr.w	r2, r3, #32
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e007      	b.n	80049f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049ec:	2b40      	cmp	r3, #64	@ 0x40
 80049ee:	d1ae      	bne.n	800494e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3710      	adds	r7, #16
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80049fa:	b480      	push	{r7}
 80049fc:	b083      	sub	sp, #12
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	695b      	ldr	r3, [r3, #20]
 8004a08:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004a0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a10:	d11b      	bne.n	8004a4a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004a1a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2220      	movs	r2, #32
 8004a26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a36:	f043 0204 	orr.w	r2, r3, #4
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e000      	b.n	8004a4c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004a4a:	2300      	movs	r3, #0
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d101      	bne.n	8004a6a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	e0bf      	b.n	8004bea <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d106      	bne.n	8004a84 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7fd fd80 	bl	8002584 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2202      	movs	r2, #2
 8004a88:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	699a      	ldr	r2, [r3, #24]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004a9a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6999      	ldr	r1, [r3, #24]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	685a      	ldr	r2, [r3, #4]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ab0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6899      	ldr	r1, [r3, #8]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b4a      	ldr	r3, [pc, #296]	@ (8004bf4 <HAL_LTDC_Init+0x19c>)
 8004acc:	400b      	ands	r3, r1
 8004ace:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	695b      	ldr	r3, [r3, #20]
 8004ad4:	041b      	lsls	r3, r3, #16
 8004ad6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6899      	ldr	r1, [r3, #8]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	431a      	orrs	r2, r3
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	430a      	orrs	r2, r1
 8004aec:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68d9      	ldr	r1, [r3, #12]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	4b3e      	ldr	r3, [pc, #248]	@ (8004bf4 <HAL_LTDC_Init+0x19c>)
 8004afa:	400b      	ands	r3, r1
 8004afc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	69db      	ldr	r3, [r3, #28]
 8004b02:	041b      	lsls	r3, r3, #16
 8004b04:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68d9      	ldr	r1, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6a1a      	ldr	r2, [r3, #32]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	6919      	ldr	r1, [r3, #16]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	4b33      	ldr	r3, [pc, #204]	@ (8004bf4 <HAL_LTDC_Init+0x19c>)
 8004b28:	400b      	ands	r3, r1
 8004b2a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b30:	041b      	lsls	r3, r3, #16
 8004b32:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	6919      	ldr	r1, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	431a      	orrs	r2, r3
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	430a      	orrs	r2, r1
 8004b48:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6959      	ldr	r1, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	4b27      	ldr	r3, [pc, #156]	@ (8004bf4 <HAL_LTDC_Init+0x19c>)
 8004b56:	400b      	ands	r3, r1
 8004b58:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	6959      	ldr	r1, [r3, #20]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b7e:	021b      	lsls	r3, r3, #8
 8004b80:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004b9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004bae:	431a      	orrs	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0206 	orr.w	r2, r2, #6
 8004bc6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	699a      	ldr	r2, [r3, #24]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	f000f800 	.word	0xf000f800

08004bf8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004bf8:	b5b0      	push	{r4, r5, r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d101      	bne.n	8004c12 <HAL_LTDC_ConfigLayer+0x1a>
 8004c0e:	2302      	movs	r3, #2
 8004c10:	e02c      	b.n	8004c6c <HAL_LTDC_ConfigLayer+0x74>
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2202      	movs	r2, #2
 8004c1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2134      	movs	r1, #52	@ 0x34
 8004c28:	fb01 f303 	mul.w	r3, r1, r3
 8004c2c:	4413      	add	r3, r2
 8004c2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	4614      	mov	r4, r2
 8004c36:	461d      	mov	r5, r3
 8004c38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c44:	682b      	ldr	r3, [r5, #0]
 8004c46:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	68b9      	ldr	r1, [r7, #8]
 8004c4c:	68f8      	ldr	r0, [r7, #12]
 8004c4e:	f000 f811 	bl	8004c74 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	2201      	movs	r2, #1
 8004c58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bdb0      	pop	{r4, r5, r7, pc}

08004c74 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	@ 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	685a      	ldr	r2, [r3, #4]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	0c1b      	lsrs	r3, r3, #16
 8004c8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c90:	4413      	add	r3, r2
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	01db      	lsls	r3, r3, #7
 8004ca0:	4413      	add	r3, r2
 8004ca2:	3384      	adds	r3, #132	@ 0x84
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	4611      	mov	r1, r2
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	01d2      	lsls	r2, r2, #7
 8004cb0:	440a      	add	r2, r1
 8004cb2:	3284      	adds	r2, #132	@ 0x84
 8004cb4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004cb8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cca:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004ccc:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	01db      	lsls	r3, r3, #7
 8004cd8:	440b      	add	r3, r1
 8004cda:	3384      	adds	r3, #132	@ 0x84
 8004cdc:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004cde:	69fb      	ldr	r3, [r7, #28]
 8004ce0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004ce2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	68da      	ldr	r2, [r3, #12]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cf2:	4413      	add	r3, r2
 8004cf4:	041b      	lsls	r3, r3, #16
 8004cf6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	01db      	lsls	r3, r3, #7
 8004d02:	4413      	add	r3, r2
 8004d04:	3384      	adds	r3, #132	@ 0x84
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	6812      	ldr	r2, [r2, #0]
 8004d0c:	4611      	mov	r1, r2
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	01d2      	lsls	r2, r2, #7
 8004d12:	440a      	add	r2, r1
 8004d14:	3284      	adds	r2, #132	@ 0x84
 8004d16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004d1a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d2a:	4413      	add	r3, r2
 8004d2c:	1c5a      	adds	r2, r3, #1
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4619      	mov	r1, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	01db      	lsls	r3, r3, #7
 8004d38:	440b      	add	r3, r1
 8004d3a:	3384      	adds	r3, #132	@ 0x84
 8004d3c:	4619      	mov	r1, r3
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	461a      	mov	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	01db      	lsls	r3, r3, #7
 8004d4e:	4413      	add	r3, r2
 8004d50:	3384      	adds	r3, #132	@ 0x84
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	6812      	ldr	r2, [r2, #0]
 8004d58:	4611      	mov	r1, r2
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	01d2      	lsls	r2, r2, #7
 8004d5e:	440a      	add	r2, r1
 8004d60:	3284      	adds	r2, #132	@ 0x84
 8004d62:	f023 0307 	bic.w	r3, r3, #7
 8004d66:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	461a      	mov	r2, r3
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	01db      	lsls	r3, r3, #7
 8004d72:	4413      	add	r3, r2
 8004d74:	3384      	adds	r3, #132	@ 0x84
 8004d76:	461a      	mov	r2, r3
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004d84:	021b      	lsls	r3, r3, #8
 8004d86:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004d8e:	041b      	lsls	r3, r3, #16
 8004d90:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	061b      	lsls	r3, r3, #24
 8004d98:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	461a      	mov	r2, r3
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	01db      	lsls	r3, r3, #7
 8004da4:	4413      	add	r3, r2
 8004da6:	3384      	adds	r3, #132	@ 0x84
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	461a      	mov	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	01db      	lsls	r3, r3, #7
 8004db4:	4413      	add	r3, r2
 8004db6:	3384      	adds	r3, #132	@ 0x84
 8004db8:	461a      	mov	r2, r3
 8004dba:	2300      	movs	r3, #0
 8004dbc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	431a      	orrs	r2, r3
 8004dca:	69bb      	ldr	r3, [r7, #24]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	4619      	mov	r1, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	01db      	lsls	r3, r3, #7
 8004dd8:	440b      	add	r3, r1
 8004dda:	3384      	adds	r3, #132	@ 0x84
 8004ddc:	4619      	mov	r1, r3
 8004dde:	697b      	ldr	r3, [r7, #20]
 8004de0:	4313      	orrs	r3, r2
 8004de2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	461a      	mov	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	01db      	lsls	r3, r3, #7
 8004dee:	4413      	add	r3, r2
 8004df0:	3384      	adds	r3, #132	@ 0x84
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	68fa      	ldr	r2, [r7, #12]
 8004df6:	6812      	ldr	r2, [r2, #0]
 8004df8:	4611      	mov	r1, r2
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	01d2      	lsls	r2, r2, #7
 8004dfe:	440a      	add	r2, r1
 8004e00:	3284      	adds	r2, #132	@ 0x84
 8004e02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e06:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	01db      	lsls	r3, r3, #7
 8004e12:	4413      	add	r3, r2
 8004e14:	3384      	adds	r3, #132	@ 0x84
 8004e16:	461a      	mov	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	695b      	ldr	r3, [r3, #20]
 8004e1c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	461a      	mov	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	01db      	lsls	r3, r3, #7
 8004e28:	4413      	add	r3, r2
 8004e2a:	3384      	adds	r3, #132	@ 0x84
 8004e2c:	69db      	ldr	r3, [r3, #28]
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	6812      	ldr	r2, [r2, #0]
 8004e32:	4611      	mov	r1, r2
 8004e34:	687a      	ldr	r2, [r7, #4]
 8004e36:	01d2      	lsls	r2, r2, #7
 8004e38:	440a      	add	r2, r1
 8004e3a:	3284      	adds	r2, #132	@ 0x84
 8004e3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e40:	f023 0307 	bic.w	r3, r3, #7
 8004e44:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	69da      	ldr	r2, [r3, #28]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	6809      	ldr	r1, [r1, #0]
 8004e52:	4608      	mov	r0, r1
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	01c9      	lsls	r1, r1, #7
 8004e58:	4401      	add	r1, r0
 8004e5a:	3184      	adds	r1, #132	@ 0x84
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	01db      	lsls	r3, r3, #7
 8004e6a:	4413      	add	r3, r2
 8004e6c:	3384      	adds	r3, #132	@ 0x84
 8004e6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	461a      	mov	r2, r3
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	01db      	lsls	r3, r3, #7
 8004e7a:	4413      	add	r3, r2
 8004e7c:	3384      	adds	r3, #132	@ 0x84
 8004e7e:	461a      	mov	r2, r3
 8004e80:	2300      	movs	r3, #0
 8004e82:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	461a      	mov	r2, r3
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	01db      	lsls	r3, r3, #7
 8004e8e:	4413      	add	r3, r2
 8004e90:	3384      	adds	r3, #132	@ 0x84
 8004e92:	461a      	mov	r2, r3
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d102      	bne.n	8004ea8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004ea2:	2304      	movs	r3, #4
 8004ea4:	61fb      	str	r3, [r7, #28]
 8004ea6:	e01b      	b.n	8004ee0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	691b      	ldr	r3, [r3, #16]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	d102      	bne.n	8004eb6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004eb0:	2303      	movs	r3, #3
 8004eb2:	61fb      	str	r3, [r7, #28]
 8004eb4:	e014      	b.n	8004ee0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	2b04      	cmp	r3, #4
 8004ebc:	d00b      	beq.n	8004ed6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d007      	beq.n	8004ed6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004eca:	2b03      	cmp	r3, #3
 8004ecc:	d003      	beq.n	8004ed6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004ed2:	2b07      	cmp	r3, #7
 8004ed4:	d102      	bne.n	8004edc <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	61fb      	str	r3, [r7, #28]
 8004eda:	e001      	b.n	8004ee0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004edc:	2301      	movs	r3, #1
 8004ede:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	01db      	lsls	r3, r3, #7
 8004eea:	4413      	add	r3, r2
 8004eec:	3384      	adds	r3, #132	@ 0x84
 8004eee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	6812      	ldr	r2, [r2, #0]
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	01d2      	lsls	r2, r2, #7
 8004efa:	440a      	add	r2, r1
 8004efc:	3284      	adds	r2, #132	@ 0x84
 8004efe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004f02:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f08:	69fa      	ldr	r2, [r7, #28]
 8004f0a:	fb02 f303 	mul.w	r3, r2, r3
 8004f0e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	6859      	ldr	r1, [r3, #4]
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	1acb      	subs	r3, r1, r3
 8004f1a:	69f9      	ldr	r1, [r7, #28]
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004f22:	68f9      	ldr	r1, [r7, #12]
 8004f24:	6809      	ldr	r1, [r1, #0]
 8004f26:	4608      	mov	r0, r1
 8004f28:	6879      	ldr	r1, [r7, #4]
 8004f2a:	01c9      	lsls	r1, r1, #7
 8004f2c:	4401      	add	r1, r0
 8004f2e:	3184      	adds	r1, #132	@ 0x84
 8004f30:	4313      	orrs	r3, r2
 8004f32:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	461a      	mov	r2, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	01db      	lsls	r3, r3, #7
 8004f3e:	4413      	add	r3, r2
 8004f40:	3384      	adds	r3, #132	@ 0x84
 8004f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f44:	68fa      	ldr	r2, [r7, #12]
 8004f46:	6812      	ldr	r2, [r2, #0]
 8004f48:	4611      	mov	r1, r2
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	01d2      	lsls	r2, r2, #7
 8004f4e:	440a      	add	r2, r1
 8004f50:	3284      	adds	r2, #132	@ 0x84
 8004f52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f56:	f023 0307 	bic.w	r3, r3, #7
 8004f5a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	461a      	mov	r2, r3
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	01db      	lsls	r3, r3, #7
 8004f66:	4413      	add	r3, r2
 8004f68:	3384      	adds	r3, #132	@ 0x84
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f70:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	01db      	lsls	r3, r3, #7
 8004f7c:	4413      	add	r3, r2
 8004f7e:	3384      	adds	r3, #132	@ 0x84
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	68fa      	ldr	r2, [r7, #12]
 8004f84:	6812      	ldr	r2, [r2, #0]
 8004f86:	4611      	mov	r1, r2
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	01d2      	lsls	r2, r2, #7
 8004f8c:	440a      	add	r2, r1
 8004f8e:	3284      	adds	r2, #132	@ 0x84
 8004f90:	f043 0301 	orr.w	r3, r3, #1
 8004f94:	6013      	str	r3, [r2, #0]
}
 8004f96:	bf00      	nop
 8004f98:	3724      	adds	r7, #36	@ 0x24
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
	...

08004fa4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b086      	sub	sp, #24
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d101      	bne.n	8004fb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	e267      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0301 	and.w	r3, r3, #1
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d075      	beq.n	80050ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fc2:	4b88      	ldr	r3, [pc, #544]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f003 030c 	and.w	r3, r3, #12
 8004fca:	2b04      	cmp	r3, #4
 8004fcc:	d00c      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fce:	4b85      	ldr	r3, [pc, #532]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fd0:	689b      	ldr	r3, [r3, #8]
 8004fd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fd6:	2b08      	cmp	r3, #8
 8004fd8:	d112      	bne.n	8005000 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fda:	4b82      	ldr	r3, [pc, #520]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fe2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fe6:	d10b      	bne.n	8005000 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	4b7e      	ldr	r3, [pc, #504]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d05b      	beq.n	80050ac <HAL_RCC_OscConfig+0x108>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d157      	bne.n	80050ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e242      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005008:	d106      	bne.n	8005018 <HAL_RCC_OscConfig+0x74>
 800500a:	4b76      	ldr	r3, [pc, #472]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a75      	ldr	r2, [pc, #468]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005010:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	e01d      	b.n	8005054 <HAL_RCC_OscConfig+0xb0>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005020:	d10c      	bne.n	800503c <HAL_RCC_OscConfig+0x98>
 8005022:	4b70      	ldr	r3, [pc, #448]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a6f      	ldr	r2, [pc, #444]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005028:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800502c:	6013      	str	r3, [r2, #0]
 800502e:	4b6d      	ldr	r3, [pc, #436]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	4a6c      	ldr	r2, [pc, #432]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005034:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005038:	6013      	str	r3, [r2, #0]
 800503a:	e00b      	b.n	8005054 <HAL_RCC_OscConfig+0xb0>
 800503c:	4b69      	ldr	r3, [pc, #420]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a68      	ldr	r2, [pc, #416]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005042:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005046:	6013      	str	r3, [r2, #0]
 8005048:	4b66      	ldr	r3, [pc, #408]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a65      	ldr	r2, [pc, #404]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 800504e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005052:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d013      	beq.n	8005084 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800505c:	f7fe f892 	bl	8003184 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005064:	f7fe f88e 	bl	8003184 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b64      	cmp	r3, #100	@ 0x64
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e207      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005076:	4b5b      	ldr	r3, [pc, #364]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800507e:	2b00      	cmp	r3, #0
 8005080:	d0f0      	beq.n	8005064 <HAL_RCC_OscConfig+0xc0>
 8005082:	e014      	b.n	80050ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005084:	f7fe f87e 	bl	8003184 <HAL_GetTick>
 8005088:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800508a:	e008      	b.n	800509e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800508c:	f7fe f87a 	bl	8003184 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	2b64      	cmp	r3, #100	@ 0x64
 8005098:	d901      	bls.n	800509e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800509a:	2303      	movs	r3, #3
 800509c:	e1f3      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800509e:	4b51      	ldr	r3, [pc, #324]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d1f0      	bne.n	800508c <HAL_RCC_OscConfig+0xe8>
 80050aa:	e000      	b.n	80050ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d063      	beq.n	8005182 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ba:	4b4a      	ldr	r3, [pc, #296]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	f003 030c 	and.w	r3, r3, #12
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00b      	beq.n	80050de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050c6:	4b47      	ldr	r3, [pc, #284]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d11c      	bne.n	800510c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050d2:	4b44      	ldr	r3, [pc, #272]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d116      	bne.n	800510c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050de:	4b41      	ldr	r3, [pc, #260]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f003 0302 	and.w	r3, r3, #2
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d005      	beq.n	80050f6 <HAL_RCC_OscConfig+0x152>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d001      	beq.n	80050f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e1c7      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050f6:	4b3b      	ldr	r3, [pc, #236]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	691b      	ldr	r3, [r3, #16]
 8005102:	00db      	lsls	r3, r3, #3
 8005104:	4937      	ldr	r1, [pc, #220]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005106:	4313      	orrs	r3, r2
 8005108:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800510a:	e03a      	b.n	8005182 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d020      	beq.n	8005156 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005114:	4b34      	ldr	r3, [pc, #208]	@ (80051e8 <HAL_RCC_OscConfig+0x244>)
 8005116:	2201      	movs	r2, #1
 8005118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800511a:	f7fe f833 	bl	8003184 <HAL_GetTick>
 800511e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005122:	f7fe f82f 	bl	8003184 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e1a8      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005134:	4b2b      	ldr	r3, [pc, #172]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005140:	4b28      	ldr	r3, [pc, #160]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4925      	ldr	r1, [pc, #148]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005150:	4313      	orrs	r3, r2
 8005152:	600b      	str	r3, [r1, #0]
 8005154:	e015      	b.n	8005182 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005156:	4b24      	ldr	r3, [pc, #144]	@ (80051e8 <HAL_RCC_OscConfig+0x244>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800515c:	f7fe f812 	bl	8003184 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005164:	f7fe f80e 	bl	8003184 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e187      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005176:	4b1b      	ldr	r3, [pc, #108]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0308 	and.w	r3, r3, #8
 800518a:	2b00      	cmp	r3, #0
 800518c:	d036      	beq.n	80051fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	695b      	ldr	r3, [r3, #20]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d016      	beq.n	80051c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005196:	4b15      	ldr	r3, [pc, #84]	@ (80051ec <HAL_RCC_OscConfig+0x248>)
 8005198:	2201      	movs	r2, #1
 800519a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fd fff2 	bl	8003184 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051a4:	f7fd ffee 	bl	8003184 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80051b2:	2303      	movs	r3, #3
 80051b4:	e167      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80051b6:	4b0b      	ldr	r3, [pc, #44]	@ (80051e4 <HAL_RCC_OscConfig+0x240>)
 80051b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d0f0      	beq.n	80051a4 <HAL_RCC_OscConfig+0x200>
 80051c2:	e01b      	b.n	80051fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051c4:	4b09      	ldr	r3, [pc, #36]	@ (80051ec <HAL_RCC_OscConfig+0x248>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051ca:	f7fd ffdb 	bl	8003184 <HAL_GetTick>
 80051ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d0:	e00e      	b.n	80051f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051d2:	f7fd ffd7 	bl	8003184 <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	2b02      	cmp	r3, #2
 80051de:	d907      	bls.n	80051f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051e0:	2303      	movs	r3, #3
 80051e2:	e150      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
 80051e4:	40023800 	.word	0x40023800
 80051e8:	42470000 	.word	0x42470000
 80051ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051f0:	4b88      	ldr	r3, [pc, #544]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80051f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1ea      	bne.n	80051d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f003 0304 	and.w	r3, r3, #4
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 8097 	beq.w	8005338 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800520a:	2300      	movs	r3, #0
 800520c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800520e:	4b81      	ldr	r3, [pc, #516]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005212:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d10f      	bne.n	800523a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800521a:	2300      	movs	r3, #0
 800521c:	60bb      	str	r3, [r7, #8]
 800521e:	4b7d      	ldr	r3, [pc, #500]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005222:	4a7c      	ldr	r2, [pc, #496]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005224:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005228:	6413      	str	r3, [r2, #64]	@ 0x40
 800522a:	4b7a      	ldr	r3, [pc, #488]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 800522c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800522e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005232:	60bb      	str	r3, [r7, #8]
 8005234:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005236:	2301      	movs	r3, #1
 8005238:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800523a:	4b77      	ldr	r3, [pc, #476]	@ (8005418 <HAL_RCC_OscConfig+0x474>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d118      	bne.n	8005278 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005246:	4b74      	ldr	r3, [pc, #464]	@ (8005418 <HAL_RCC_OscConfig+0x474>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a73      	ldr	r2, [pc, #460]	@ (8005418 <HAL_RCC_OscConfig+0x474>)
 800524c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005250:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005252:	f7fd ff97 	bl	8003184 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005258:	e008      	b.n	800526c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800525a:	f7fd ff93 	bl	8003184 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d901      	bls.n	800526c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e10c      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800526c:	4b6a      	ldr	r3, [pc, #424]	@ (8005418 <HAL_RCC_OscConfig+0x474>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d0f0      	beq.n	800525a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d106      	bne.n	800528e <HAL_RCC_OscConfig+0x2ea>
 8005280:	4b64      	ldr	r3, [pc, #400]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005282:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005284:	4a63      	ldr	r2, [pc, #396]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005286:	f043 0301 	orr.w	r3, r3, #1
 800528a:	6713      	str	r3, [r2, #112]	@ 0x70
 800528c:	e01c      	b.n	80052c8 <HAL_RCC_OscConfig+0x324>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	2b05      	cmp	r3, #5
 8005294:	d10c      	bne.n	80052b0 <HAL_RCC_OscConfig+0x30c>
 8005296:	4b5f      	ldr	r3, [pc, #380]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005298:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529a:	4a5e      	ldr	r2, [pc, #376]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 800529c:	f043 0304 	orr.w	r3, r3, #4
 80052a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052a8:	f043 0301 	orr.w	r3, r3, #1
 80052ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ae:	e00b      	b.n	80052c8 <HAL_RCC_OscConfig+0x324>
 80052b0:	4b58      	ldr	r3, [pc, #352]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052b4:	4a57      	ldr	r2, [pc, #348]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052b6:	f023 0301 	bic.w	r3, r3, #1
 80052ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80052bc:	4b55      	ldr	r3, [pc, #340]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c0:	4a54      	ldr	r2, [pc, #336]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052c2:	f023 0304 	bic.w	r3, r3, #4
 80052c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d015      	beq.n	80052fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052d0:	f7fd ff58 	bl	8003184 <HAL_GetTick>
 80052d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d6:	e00a      	b.n	80052ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052d8:	f7fd ff54 	bl	8003184 <HAL_GetTick>
 80052dc:	4602      	mov	r2, r0
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	1ad3      	subs	r3, r2, r3
 80052e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d901      	bls.n	80052ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052ea:	2303      	movs	r3, #3
 80052ec:	e0cb      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052ee:	4b49      	ldr	r3, [pc, #292]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f2:	f003 0302 	and.w	r3, r3, #2
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d0ee      	beq.n	80052d8 <HAL_RCC_OscConfig+0x334>
 80052fa:	e014      	b.n	8005326 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052fc:	f7fd ff42 	bl	8003184 <HAL_GetTick>
 8005300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005302:	e00a      	b.n	800531a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fd ff3e 	bl	8003184 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0b5      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800531a:	4b3e      	ldr	r3, [pc, #248]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d1ee      	bne.n	8005304 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005326:	7dfb      	ldrb	r3, [r7, #23]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d105      	bne.n	8005338 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800532c:	4b39      	ldr	r3, [pc, #228]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 800532e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005330:	4a38      	ldr	r2, [pc, #224]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005332:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005336:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	699b      	ldr	r3, [r3, #24]
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80a1 	beq.w	8005484 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005342:	4b34      	ldr	r3, [pc, #208]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005344:	689b      	ldr	r3, [r3, #8]
 8005346:	f003 030c 	and.w	r3, r3, #12
 800534a:	2b08      	cmp	r3, #8
 800534c:	d05c      	beq.n	8005408 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	2b02      	cmp	r3, #2
 8005354:	d141      	bne.n	80053da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005356:	4b31      	ldr	r3, [pc, #196]	@ (800541c <HAL_RCC_OscConfig+0x478>)
 8005358:	2200      	movs	r2, #0
 800535a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800535c:	f7fd ff12 	bl	8003184 <HAL_GetTick>
 8005360:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005362:	e008      	b.n	8005376 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005364:	f7fd ff0e 	bl	8003184 <HAL_GetTick>
 8005368:	4602      	mov	r2, r0
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	1ad3      	subs	r3, r2, r3
 800536e:	2b02      	cmp	r3, #2
 8005370:	d901      	bls.n	8005376 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005372:	2303      	movs	r3, #3
 8005374:	e087      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005376:	4b27      	ldr	r3, [pc, #156]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800537e:	2b00      	cmp	r3, #0
 8005380:	d1f0      	bne.n	8005364 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	69da      	ldr	r2, [r3, #28]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6a1b      	ldr	r3, [r3, #32]
 800538a:	431a      	orrs	r2, r3
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005390:	019b      	lsls	r3, r3, #6
 8005392:	431a      	orrs	r2, r3
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005398:	085b      	lsrs	r3, r3, #1
 800539a:	3b01      	subs	r3, #1
 800539c:	041b      	lsls	r3, r3, #16
 800539e:	431a      	orrs	r2, r3
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053a4:	061b      	lsls	r3, r3, #24
 80053a6:	491b      	ldr	r1, [pc, #108]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053ac:	4b1b      	ldr	r3, [pc, #108]	@ (800541c <HAL_RCC_OscConfig+0x478>)
 80053ae:	2201      	movs	r2, #1
 80053b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053b2:	f7fd fee7 	bl	8003184 <HAL_GetTick>
 80053b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b8:	e008      	b.n	80053cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053ba:	f7fd fee3 	bl	8003184 <HAL_GetTick>
 80053be:	4602      	mov	r2, r0
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	1ad3      	subs	r3, r2, r3
 80053c4:	2b02      	cmp	r3, #2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e05c      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053cc:	4b11      	ldr	r3, [pc, #68]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0f0      	beq.n	80053ba <HAL_RCC_OscConfig+0x416>
 80053d8:	e054      	b.n	8005484 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053da:	4b10      	ldr	r3, [pc, #64]	@ (800541c <HAL_RCC_OscConfig+0x478>)
 80053dc:	2200      	movs	r2, #0
 80053de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053e0:	f7fd fed0 	bl	8003184 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053e8:	f7fd fecc 	bl	8003184 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e045      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053fa:	4b06      	ldr	r3, [pc, #24]	@ (8005414 <HAL_RCC_OscConfig+0x470>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d1f0      	bne.n	80053e8 <HAL_RCC_OscConfig+0x444>
 8005406:	e03d      	b.n	8005484 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	2b01      	cmp	r3, #1
 800540e:	d107      	bne.n	8005420 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	e038      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
 8005414:	40023800 	.word	0x40023800
 8005418:	40007000 	.word	0x40007000
 800541c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005420:	4b1b      	ldr	r3, [pc, #108]	@ (8005490 <HAL_RCC_OscConfig+0x4ec>)
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	2b01      	cmp	r3, #1
 800542c:	d028      	beq.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005438:	429a      	cmp	r2, r3
 800543a:	d121      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005446:	429a      	cmp	r2, r3
 8005448:	d11a      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005450:	4013      	ands	r3, r2
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005456:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005458:	4293      	cmp	r3, r2
 800545a:	d111      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005466:	085b      	lsrs	r3, r3, #1
 8005468:	3b01      	subs	r3, #1
 800546a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800546c:	429a      	cmp	r2, r3
 800546e:	d107      	bne.n	8005480 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800547a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800547c:	429a      	cmp	r2, r3
 800547e:	d001      	beq.n	8005484 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005484:	2300      	movs	r3, #0
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	40023800 	.word	0x40023800

08005494 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b084      	sub	sp, #16
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e0cc      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054a8:	4b68      	ldr	r3, [pc, #416]	@ (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f003 030f 	and.w	r3, r3, #15
 80054b0:	683a      	ldr	r2, [r7, #0]
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d90c      	bls.n	80054d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054b6:	4b65      	ldr	r3, [pc, #404]	@ (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	b2d2      	uxtb	r2, r2
 80054bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	4b63      	ldr	r3, [pc, #396]	@ (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 030f 	and.w	r3, r3, #15
 80054c6:	683a      	ldr	r2, [r7, #0]
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d001      	beq.n	80054d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054cc:	2301      	movs	r3, #1
 80054ce:	e0b8      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0302 	and.w	r3, r3, #2
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d020      	beq.n	800551e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054e8:	4b59      	ldr	r3, [pc, #356]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a58      	ldr	r2, [pc, #352]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 0308 	and.w	r3, r3, #8
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d005      	beq.n	800550c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005500:	4b53      	ldr	r3, [pc, #332]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	4a52      	ldr	r2, [pc, #328]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005506:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800550a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800550c:	4b50      	ldr	r3, [pc, #320]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	494d      	ldr	r1, [pc, #308]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d044      	beq.n	80055b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d107      	bne.n	8005542 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005532:	4b47      	ldr	r3, [pc, #284]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d119      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e07f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2b02      	cmp	r3, #2
 8005548:	d003      	beq.n	8005552 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800554e:	2b03      	cmp	r3, #3
 8005550:	d107      	bne.n	8005562 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005552:	4b3f      	ldr	r3, [pc, #252]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d109      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e06f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005562:	4b3b      	ldr	r3, [pc, #236]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	f003 0302 	and.w	r3, r3, #2
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800556e:	2301      	movs	r3, #1
 8005570:	e067      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005572:	4b37      	ldr	r3, [pc, #220]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	f023 0203 	bic.w	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	685b      	ldr	r3, [r3, #4]
 800557e:	4934      	ldr	r1, [pc, #208]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005580:	4313      	orrs	r3, r2
 8005582:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005584:	f7fd fdfe 	bl	8003184 <HAL_GetTick>
 8005588:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	e00a      	b.n	80055a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800558c:	f7fd fdfa 	bl	8003184 <HAL_GetTick>
 8005590:	4602      	mov	r2, r0
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	f241 3288 	movw	r2, #5000	@ 0x1388
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e04f      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	689b      	ldr	r3, [r3, #8]
 80055a6:	f003 020c 	and.w	r2, r3, #12
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	429a      	cmp	r2, r3
 80055b2:	d1eb      	bne.n	800558c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80055b4:	4b25      	ldr	r3, [pc, #148]	@ (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 030f 	and.w	r3, r3, #15
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d20c      	bcs.n	80055dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b22      	ldr	r3, [pc, #136]	@ (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b20      	ldr	r3, [pc, #128]	@ (800564c <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 030f 	and.w	r3, r3, #15
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e032      	b.n	8005642 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d008      	beq.n	80055fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055e8:	4b19      	ldr	r3, [pc, #100]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4916      	ldr	r1, [pc, #88]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005606:	4b12      	ldr	r3, [pc, #72]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	691b      	ldr	r3, [r3, #16]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	490e      	ldr	r1, [pc, #56]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	4313      	orrs	r3, r2
 8005618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800561a:	f000 f821 	bl	8005660 <HAL_RCC_GetSysClockFreq>
 800561e:	4602      	mov	r2, r0
 8005620:	4b0b      	ldr	r3, [pc, #44]	@ (8005650 <HAL_RCC_ClockConfig+0x1bc>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	091b      	lsrs	r3, r3, #4
 8005626:	f003 030f 	and.w	r3, r3, #15
 800562a:	490a      	ldr	r1, [pc, #40]	@ (8005654 <HAL_RCC_ClockConfig+0x1c0>)
 800562c:	5ccb      	ldrb	r3, [r1, r3]
 800562e:	fa22 f303 	lsr.w	r3, r2, r3
 8005632:	4a09      	ldr	r2, [pc, #36]	@ (8005658 <HAL_RCC_ClockConfig+0x1c4>)
 8005634:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005636:	4b09      	ldr	r3, [pc, #36]	@ (800565c <HAL_RCC_ClockConfig+0x1c8>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4618      	mov	r0, r3
 800563c:	f7fd fd5e 	bl	80030fc <HAL_InitTick>

  return HAL_OK;
 8005640:	2300      	movs	r3, #0
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	40023c00 	.word	0x40023c00
 8005650:	40023800 	.word	0x40023800
 8005654:	08008d14 	.word	0x08008d14
 8005658:	20000e10 	.word	0x20000e10
 800565c:	20000e14 	.word	0x20000e14

08005660 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b094      	sub	sp, #80	@ 0x50
 8005666:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005668:	2300      	movs	r3, #0
 800566a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800566c:	2300      	movs	r3, #0
 800566e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005670:	2300      	movs	r3, #0
 8005672:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005674:	2300      	movs	r3, #0
 8005676:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005678:	4b79      	ldr	r3, [pc, #484]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	f003 030c 	and.w	r3, r3, #12
 8005680:	2b08      	cmp	r3, #8
 8005682:	d00d      	beq.n	80056a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005684:	2b08      	cmp	r3, #8
 8005686:	f200 80e1 	bhi.w	800584c <HAL_RCC_GetSysClockFreq+0x1ec>
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <HAL_RCC_GetSysClockFreq+0x34>
 800568e:	2b04      	cmp	r3, #4
 8005690:	d003      	beq.n	800569a <HAL_RCC_GetSysClockFreq+0x3a>
 8005692:	e0db      	b.n	800584c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005694:	4b73      	ldr	r3, [pc, #460]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x204>)
 8005696:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005698:	e0db      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800569a:	4b73      	ldr	r3, [pc, #460]	@ (8005868 <HAL_RCC_GetSysClockFreq+0x208>)
 800569c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800569e:	e0d8      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80056a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80056aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d063      	beq.n	800577e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	099b      	lsrs	r3, r3, #6
 80056bc:	2200      	movs	r2, #0
 80056be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80056c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80056c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80056ca:	2300      	movs	r3, #0
 80056cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80056ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80056d2:	4622      	mov	r2, r4
 80056d4:	462b      	mov	r3, r5
 80056d6:	f04f 0000 	mov.w	r0, #0
 80056da:	f04f 0100 	mov.w	r1, #0
 80056de:	0159      	lsls	r1, r3, #5
 80056e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056e4:	0150      	lsls	r0, r2, #5
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4621      	mov	r1, r4
 80056ec:	1a51      	subs	r1, r2, r1
 80056ee:	6139      	str	r1, [r7, #16]
 80056f0:	4629      	mov	r1, r5
 80056f2:	eb63 0301 	sbc.w	r3, r3, r1
 80056f6:	617b      	str	r3, [r7, #20]
 80056f8:	f04f 0200 	mov.w	r2, #0
 80056fc:	f04f 0300 	mov.w	r3, #0
 8005700:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005704:	4659      	mov	r1, fp
 8005706:	018b      	lsls	r3, r1, #6
 8005708:	4651      	mov	r1, sl
 800570a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800570e:	4651      	mov	r1, sl
 8005710:	018a      	lsls	r2, r1, #6
 8005712:	4651      	mov	r1, sl
 8005714:	ebb2 0801 	subs.w	r8, r2, r1
 8005718:	4659      	mov	r1, fp
 800571a:	eb63 0901 	sbc.w	r9, r3, r1
 800571e:	f04f 0200 	mov.w	r2, #0
 8005722:	f04f 0300 	mov.w	r3, #0
 8005726:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800572a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800572e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005732:	4690      	mov	r8, r2
 8005734:	4699      	mov	r9, r3
 8005736:	4623      	mov	r3, r4
 8005738:	eb18 0303 	adds.w	r3, r8, r3
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	462b      	mov	r3, r5
 8005740:	eb49 0303 	adc.w	r3, r9, r3
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	f04f 0200 	mov.w	r2, #0
 800574a:	f04f 0300 	mov.w	r3, #0
 800574e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005752:	4629      	mov	r1, r5
 8005754:	024b      	lsls	r3, r1, #9
 8005756:	4621      	mov	r1, r4
 8005758:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800575c:	4621      	mov	r1, r4
 800575e:	024a      	lsls	r2, r1, #9
 8005760:	4610      	mov	r0, r2
 8005762:	4619      	mov	r1, r3
 8005764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005766:	2200      	movs	r2, #0
 8005768:	62bb      	str	r3, [r7, #40]	@ 0x28
 800576a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800576c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005770:	f7fa fd96 	bl	80002a0 <__aeabi_uldivmod>
 8005774:	4602      	mov	r2, r0
 8005776:	460b      	mov	r3, r1
 8005778:	4613      	mov	r3, r2
 800577a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800577c:	e058      	b.n	8005830 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577e:	4b38      	ldr	r3, [pc, #224]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	099b      	lsrs	r3, r3, #6
 8005784:	2200      	movs	r2, #0
 8005786:	4618      	mov	r0, r3
 8005788:	4611      	mov	r1, r2
 800578a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800578e:	623b      	str	r3, [r7, #32]
 8005790:	2300      	movs	r3, #0
 8005792:	627b      	str	r3, [r7, #36]	@ 0x24
 8005794:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005798:	4642      	mov	r2, r8
 800579a:	464b      	mov	r3, r9
 800579c:	f04f 0000 	mov.w	r0, #0
 80057a0:	f04f 0100 	mov.w	r1, #0
 80057a4:	0159      	lsls	r1, r3, #5
 80057a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057aa:	0150      	lsls	r0, r2, #5
 80057ac:	4602      	mov	r2, r0
 80057ae:	460b      	mov	r3, r1
 80057b0:	4641      	mov	r1, r8
 80057b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057b6:	4649      	mov	r1, r9
 80057b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057bc:	f04f 0200 	mov.w	r2, #0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80057c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80057cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80057d0:	ebb2 040a 	subs.w	r4, r2, sl
 80057d4:	eb63 050b 	sbc.w	r5, r3, fp
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	00eb      	lsls	r3, r5, #3
 80057e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80057e6:	00e2      	lsls	r2, r4, #3
 80057e8:	4614      	mov	r4, r2
 80057ea:	461d      	mov	r5, r3
 80057ec:	4643      	mov	r3, r8
 80057ee:	18e3      	adds	r3, r4, r3
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	464b      	mov	r3, r9
 80057f4:	eb45 0303 	adc.w	r3, r5, r3
 80057f8:	607b      	str	r3, [r7, #4]
 80057fa:	f04f 0200 	mov.w	r2, #0
 80057fe:	f04f 0300 	mov.w	r3, #0
 8005802:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005806:	4629      	mov	r1, r5
 8005808:	028b      	lsls	r3, r1, #10
 800580a:	4621      	mov	r1, r4
 800580c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005810:	4621      	mov	r1, r4
 8005812:	028a      	lsls	r2, r1, #10
 8005814:	4610      	mov	r0, r2
 8005816:	4619      	mov	r1, r3
 8005818:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800581a:	2200      	movs	r2, #0
 800581c:	61bb      	str	r3, [r7, #24]
 800581e:	61fa      	str	r2, [r7, #28]
 8005820:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005824:	f7fa fd3c 	bl	80002a0 <__aeabi_uldivmod>
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	4613      	mov	r3, r2
 800582e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <HAL_RCC_GetSysClockFreq+0x200>)
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	0c1b      	lsrs	r3, r3, #16
 8005836:	f003 0303 	and.w	r3, r3, #3
 800583a:	3301      	adds	r3, #1
 800583c:	005b      	lsls	r3, r3, #1
 800583e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005840:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005844:	fbb2 f3f3 	udiv	r3, r2, r3
 8005848:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800584a:	e002      	b.n	8005852 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800584c:	4b05      	ldr	r3, [pc, #20]	@ (8005864 <HAL_RCC_GetSysClockFreq+0x204>)
 800584e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005850:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005852:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005854:	4618      	mov	r0, r3
 8005856:	3750      	adds	r7, #80	@ 0x50
 8005858:	46bd      	mov	sp, r7
 800585a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800585e:	bf00      	nop
 8005860:	40023800 	.word	0x40023800
 8005864:	00f42400 	.word	0x00f42400
 8005868:	007a1200 	.word	0x007a1200

0800586c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800586c:	b480      	push	{r7}
 800586e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005870:	4b03      	ldr	r3, [pc, #12]	@ (8005880 <HAL_RCC_GetHCLKFreq+0x14>)
 8005872:	681b      	ldr	r3, [r3, #0]
}
 8005874:	4618      	mov	r0, r3
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000e10 	.word	0x20000e10

08005884 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005884:	b580      	push	{r7, lr}
 8005886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005888:	f7ff fff0 	bl	800586c <HAL_RCC_GetHCLKFreq>
 800588c:	4602      	mov	r2, r0
 800588e:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	0a9b      	lsrs	r3, r3, #10
 8005894:	f003 0307 	and.w	r3, r3, #7
 8005898:	4903      	ldr	r1, [pc, #12]	@ (80058a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800589a:	5ccb      	ldrb	r3, [r1, r3]
 800589c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	40023800 	.word	0x40023800
 80058a8:	08008d24 	.word	0x08008d24

080058ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d10b      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d105      	bne.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d075      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058e0:	4b91      	ldr	r3, [pc, #580]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80058e6:	f7fd fc4d 	bl	8003184 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058ec:	e008      	b.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ee:	f7fd fc49 	bl	8003184 <HAL_GetTick>
 80058f2:	4602      	mov	r2, r0
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	1ad3      	subs	r3, r2, r3
 80058f8:	2b02      	cmp	r3, #2
 80058fa:	d901      	bls.n	8005900 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e189      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005900:	4b8a      	ldr	r3, [pc, #552]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005908:	2b00      	cmp	r3, #0
 800590a:	d1f0      	bne.n	80058ee <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d009      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	071b      	lsls	r3, r3, #28
 8005924:	4981      	ldr	r1, [pc, #516]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0302 	and.w	r3, r3, #2
 8005934:	2b00      	cmp	r3, #0
 8005936:	d01f      	beq.n	8005978 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005938:	4b7c      	ldr	r3, [pc, #496]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800593a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800593e:	0f1b      	lsrs	r3, r3, #28
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	019a      	lsls	r2, r3, #6
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	061b      	lsls	r3, r3, #24
 8005952:	431a      	orrs	r2, r3
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	071b      	lsls	r3, r3, #28
 8005958:	4974      	ldr	r1, [pc, #464]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800595a:	4313      	orrs	r3, r2
 800595c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005960:	4b72      	ldr	r3, [pc, #456]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005966:	f023 021f 	bic.w	r2, r3, #31
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	69db      	ldr	r3, [r3, #28]
 800596e:	3b01      	subs	r3, #1
 8005970:	496e      	ldr	r1, [pc, #440]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005972:	4313      	orrs	r3, r2
 8005974:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00d      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	019a      	lsls	r2, r3, #6
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	68db      	ldr	r3, [r3, #12]
 800598e:	061b      	lsls	r3, r3, #24
 8005990:	431a      	orrs	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	071b      	lsls	r3, r3, #28
 8005998:	4964      	ldr	r1, [pc, #400]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80059a0:	4b61      	ldr	r3, [pc, #388]	@ (8005b28 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059a6:	f7fd fbed 	bl	8003184 <HAL_GetTick>
 80059aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80059ae:	f7fd fbe9 	bl	8003184 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e129      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80059c0:	4b5a      	ldr	r3, [pc, #360]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 0304 	and.w	r3, r3, #4
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d105      	bne.n	80059e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d079      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80059e4:	4b52      	ldr	r3, [pc, #328]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059ea:	f7fd fbcb 	bl	8003184 <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80059f0:	e008      	b.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059f2:	f7fd fbc7 	bl	8003184 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	697b      	ldr	r3, [r7, #20]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	2b02      	cmp	r3, #2
 80059fe:	d901      	bls.n	8005a04 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e107      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a04:	4b49      	ldr	r3, [pc, #292]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a10:	d0ef      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d020      	beq.n	8005a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005a1e:	4b43      	ldr	r3, [pc, #268]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a24:	0f1b      	lsrs	r3, r3, #28
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	691b      	ldr	r3, [r3, #16]
 8005a30:	019a      	lsls	r2, r3, #6
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	695b      	ldr	r3, [r3, #20]
 8005a36:	061b      	lsls	r3, r3, #24
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	071b      	lsls	r3, r3, #28
 8005a3e:	493b      	ldr	r1, [pc, #236]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a40:	4313      	orrs	r3, r2
 8005a42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005a46:	4b39      	ldr	r3, [pc, #228]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a4c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a1b      	ldr	r3, [r3, #32]
 8005a54:	3b01      	subs	r3, #1
 8005a56:	021b      	lsls	r3, r3, #8
 8005a58:	4934      	ldr	r1, [pc, #208]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0308 	and.w	r3, r3, #8
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d01e      	beq.n	8005aaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005a6c:	4b2f      	ldr	r3, [pc, #188]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a72:	0e1b      	lsrs	r3, r3, #24
 8005a74:	f003 030f 	and.w	r3, r3, #15
 8005a78:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	019a      	lsls	r2, r3, #6
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	061b      	lsls	r3, r3, #24
 8005a84:	431a      	orrs	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	071b      	lsls	r3, r3, #28
 8005a8c:	4927      	ldr	r1, [pc, #156]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a94:	4b25      	ldr	r3, [pc, #148]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a9a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aa2:	4922      	ldr	r1, [pc, #136]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005aaa:	4b21      	ldr	r3, [pc, #132]	@ (8005b30 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005ab0:	f7fd fb68 	bl	8003184 <HAL_GetTick>
 8005ab4:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005ab6:	e008      	b.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005ab8:	f7fd fb64 	bl	8003184 <HAL_GetTick>
 8005abc:	4602      	mov	r2, r0
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	1ad3      	subs	r3, r2, r3
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d901      	bls.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ac6:	2303      	movs	r3, #3
 8005ac8:	e0a4      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005aca:	4b18      	ldr	r3, [pc, #96]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ad6:	d1ef      	bne.n	8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 0320 	and.w	r3, r3, #32
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	f000 808b 	beq.w	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	4b10      	ldr	r3, [pc, #64]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aee:	4a0f      	ldr	r2, [pc, #60]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005af4:	6413      	str	r3, [r2, #64]	@ 0x40
 8005af6:	4b0d      	ldr	r3, [pc, #52]	@ (8005b2c <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005afa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005b02:	4b0c      	ldr	r3, [pc, #48]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	4a0b      	ldr	r2, [pc, #44]	@ (8005b34 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005b08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b0c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b0e:	f7fd fb39 	bl	8003184 <HAL_GetTick>
 8005b12:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b14:	e010      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b16:	f7fd fb35 	bl	8003184 <HAL_GetTick>
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	1ad3      	subs	r3, r2, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d909      	bls.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e075      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b28:	42470068 	.word	0x42470068
 8005b2c:	40023800 	.word	0x40023800
 8005b30:	42470070 	.word	0x42470070
 8005b34:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005b38:	4b38      	ldr	r3, [pc, #224]	@ (8005c1c <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d0e8      	beq.n	8005b16 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005b44:	4b36      	ldr	r3, [pc, #216]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b48:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b4c:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d02f      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d028      	beq.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005b62:	4b2f      	ldr	r3, [pc, #188]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b66:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b6a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005b72:	4b2c      	ldr	r3, [pc, #176]	@ (8005c24 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005b78:	4a29      	ldr	r2, [pc, #164]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005b7e:	4b28      	ldr	r3, [pc, #160]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b82:	f003 0301 	and.w	r3, r3, #1
 8005b86:	2b01      	cmp	r3, #1
 8005b88:	d114      	bne.n	8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005b8a:	f7fd fafb 	bl	8003184 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b90:	e00a      	b.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b92:	f7fd faf7 	bl	8003184 <HAL_GetTick>
 8005b96:	4602      	mov	r2, r0
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	1ad3      	subs	r3, r2, r3
 8005b9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d901      	bls.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005ba4:	2303      	movs	r3, #3
 8005ba6:	e035      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005baa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bac:	f003 0302 	and.w	r3, r3, #2
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d0ee      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bb8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bbc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005bc0:	d10d      	bne.n	8005bde <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005bc2:	4b17      	ldr	r3, [pc, #92]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bce:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005bd2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd6:	4912      	ldr	r1, [pc, #72]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bd8:	4313      	orrs	r3, r2
 8005bda:	608b      	str	r3, [r1, #8]
 8005bdc:	e005      	b.n	8005bea <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005bde:	4b10      	ldr	r3, [pc, #64]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a0f      	ldr	r2, [pc, #60]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005be4:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005be8:	6093      	str	r3, [r2, #8]
 8005bea:	4b0d      	ldr	r3, [pc, #52]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bec:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bf6:	490a      	ldr	r1, [pc, #40]	@ (8005c20 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f003 0310 	and.w	r3, r3, #16
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d004      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005c0e:	4b06      	ldr	r3, [pc, #24]	@ (8005c28 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005c10:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3718      	adds	r7, #24
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}
 8005c1c:	40007000 	.word	0x40007000
 8005c20:	40023800 	.word	0x40023800
 8005c24:	42470e40 	.word	0x42470e40
 8005c28:	424711e0 	.word	0x424711e0

08005c2c <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d101      	bne.n	8005c3e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e01c      	b.n	8005c78 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	795b      	ldrb	r3, [r3, #5]
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d105      	bne.n	8005c54 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7fc fdc0 	bl	80027d4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2202      	movs	r2, #2
 8005c58:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	681a      	ldr	r2, [r3, #0]
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	f042 0204 	orr.w	r2, r2, #4
 8005c68:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2201      	movs	r2, #1
 8005c6e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005c76:	2300      	movs	r3, #0
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3708      	adds	r7, #8
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	791b      	ldrb	r3, [r3, #4]
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d101      	bne.n	8005c9a <HAL_RNG_GenerateRandomNumber+0x1a>
 8005c96:	2302      	movs	r3, #2
 8005c98:	e044      	b.n	8005d24 <HAL_RNG_GenerateRandomNumber+0xa4>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	795b      	ldrb	r3, [r3, #5]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d133      	bne.n	8005d12 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2202      	movs	r2, #2
 8005cae:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005cb0:	f7fd fa68 	bl	8003184 <HAL_GetTick>
 8005cb4:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005cb6:	e018      	b.n	8005cea <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8005cb8:	f7fd fa64 	bl	8003184 <HAL_GetTick>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	2b02      	cmp	r3, #2
 8005cc4:	d911      	bls.n	8005cea <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	f003 0301 	and.w	r3, r3, #1
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d00a      	beq.n	8005cea <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2202      	movs	r2, #2
 8005cde:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e01c      	b.n	8005d24 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	f003 0301 	and.w	r3, r3, #1
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d1df      	bne.n	8005cb8 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	689a      	ldr	r2, [r3, #8]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	715a      	strb	r2, [r3, #5]
 8005d10:	e004      	b.n	8005d1c <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2204      	movs	r2, #4
 8005d16:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	711a      	strb	r2, [r3, #4]

  return status;
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3710      	adds	r7, #16
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b082      	sub	sp, #8
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d101      	bne.n	8005d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d3a:	2301      	movs	r3, #1
 8005d3c:	e07b      	b.n	8005e36 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d108      	bne.n	8005d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	685b      	ldr	r3, [r3, #4]
 8005d4a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d4e:	d009      	beq.n	8005d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	61da      	str	r2, [r3, #28]
 8005d56:	e005      	b.n	8005d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d106      	bne.n	8005d84 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	f7fc fd4a 	bl	8002818 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2202      	movs	r2, #2
 8005d88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d9a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005dac:	431a      	orrs	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005db6:	431a      	orrs	r2, r3
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	f003 0302 	and.w	r3, r3, #2
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	431a      	orrs	r2, r3
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005dd4:	431a      	orrs	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005dde:	431a      	orrs	r2, r3
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005de8:	ea42 0103 	orr.w	r1, r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005df0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	0c1b      	lsrs	r3, r3, #16
 8005e02:	f003 0104 	and.w	r1, r3, #4
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0a:	f003 0210 	and.w	r2, r3, #16
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	430a      	orrs	r2, r1
 8005e14:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	69da      	ldr	r2, [r3, #28]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e24:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2201      	movs	r2, #1
 8005e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3708      	adds	r7, #8
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}

08005e3e <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8005e3e:	b580      	push	{r7, lr}
 8005e40:	b082      	sub	sp, #8
 8005e42:	af00      	add	r7, sp, #0
 8005e44:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d101      	bne.n	8005e50 <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e01a      	b.n	8005e86 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2202      	movs	r2, #2
 8005e54:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e66:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f7fc fd1d 	bl	80028a8 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3708      	adds	r7, #8
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}

08005e8e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e8e:	b580      	push	{r7, lr}
 8005e90:	b088      	sub	sp, #32
 8005e92:	af00      	add	r7, sp, #0
 8005e94:	60f8      	str	r0, [r7, #12]
 8005e96:	60b9      	str	r1, [r7, #8]
 8005e98:	603b      	str	r3, [r7, #0]
 8005e9a:	4613      	mov	r3, r2
 8005e9c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e9e:	f7fd f971 	bl	8003184 <HAL_GetTick>
 8005ea2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005ea4:	88fb      	ldrh	r3, [r7, #6]
 8005ea6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d001      	beq.n	8005eb8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	e12a      	b.n	800610e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d002      	beq.n	8005ec4 <HAL_SPI_Transmit+0x36>
 8005ebe:	88fb      	ldrh	r3, [r7, #6]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d101      	bne.n	8005ec8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e122      	b.n	800610e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d101      	bne.n	8005ed6 <HAL_SPI_Transmit+0x48>
 8005ed2:	2302      	movs	r3, #2
 8005ed4:	e11b      	b.n	800610e <HAL_SPI_Transmit+0x280>
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	2203      	movs	r2, #3
 8005ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	88fa      	ldrh	r2, [r7, #6]
 8005ef6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	88fa      	ldrh	r2, [r7, #6]
 8005efc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	2200      	movs	r2, #0
 8005f14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f24:	d10f      	bne.n	8005f46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681a      	ldr	r2, [r3, #0]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f50:	2b40      	cmp	r3, #64	@ 0x40
 8005f52:	d007      	beq.n	8005f64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	681a      	ldr	r2, [r3, #0]
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	68db      	ldr	r3, [r3, #12]
 8005f68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f6c:	d152      	bne.n	8006014 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d002      	beq.n	8005f7c <HAL_SPI_Transmit+0xee>
 8005f76:	8b7b      	ldrh	r3, [r7, #26]
 8005f78:	2b01      	cmp	r3, #1
 8005f7a:	d145      	bne.n	8006008 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f80:	881a      	ldrh	r2, [r3, #0]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8c:	1c9a      	adds	r2, r3, #2
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f96:	b29b      	uxth	r3, r3
 8005f98:	3b01      	subs	r3, #1
 8005f9a:	b29a      	uxth	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005fa0:	e032      	b.n	8006008 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	689b      	ldr	r3, [r3, #8]
 8005fa8:	f003 0302 	and.w	r3, r3, #2
 8005fac:	2b02      	cmp	r3, #2
 8005fae:	d112      	bne.n	8005fd6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb4:	881a      	ldrh	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc0:	1c9a      	adds	r2, r3, #2
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fca:	b29b      	uxth	r3, r3
 8005fcc:	3b01      	subs	r3, #1
 8005fce:	b29a      	uxth	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fd4:	e018      	b.n	8006008 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fd6:	f7fd f8d5 	bl	8003184 <HAL_GetTick>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	1ad3      	subs	r3, r2, r3
 8005fe0:	683a      	ldr	r2, [r7, #0]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	d803      	bhi.n	8005fee <HAL_SPI_Transmit+0x160>
 8005fe6:	683b      	ldr	r3, [r7, #0]
 8005fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fec:	d102      	bne.n	8005ff4 <HAL_SPI_Transmit+0x166>
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d109      	bne.n	8006008 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e082      	b.n	800610e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800600c:	b29b      	uxth	r3, r3
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1c7      	bne.n	8005fa2 <HAL_SPI_Transmit+0x114>
 8006012:	e053      	b.n	80060bc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d002      	beq.n	8006022 <HAL_SPI_Transmit+0x194>
 800601c:	8b7b      	ldrh	r3, [r7, #26]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d147      	bne.n	80060b2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	330c      	adds	r3, #12
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006034:	1c5a      	adds	r2, r3, #1
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006048:	e033      	b.n	80060b2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b02      	cmp	r3, #2
 8006056:	d113      	bne.n	8006080 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	330c      	adds	r3, #12
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800606a:	1c5a      	adds	r2, r3, #1
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006074:	b29b      	uxth	r3, r3
 8006076:	3b01      	subs	r3, #1
 8006078:	b29a      	uxth	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800607e:	e018      	b.n	80060b2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006080:	f7fd f880 	bl	8003184 <HAL_GetTick>
 8006084:	4602      	mov	r2, r0
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	1ad3      	subs	r3, r2, r3
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	429a      	cmp	r2, r3
 800608e:	d803      	bhi.n	8006098 <HAL_SPI_Transmit+0x20a>
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006096:	d102      	bne.n	800609e <HAL_SPI_Transmit+0x210>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d109      	bne.n	80060b2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80060ae:	2303      	movs	r3, #3
 80060b0:	e02d      	b.n	800610e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1c6      	bne.n	800604a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060bc:	69fa      	ldr	r2, [r7, #28]
 80060be:	6839      	ldr	r1, [r7, #0]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f8bf 	bl	8006244 <SPI_EndRxTxTransaction>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d10a      	bne.n	80060f0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060da:	2300      	movs	r3, #0
 80060dc:	617b      	str	r3, [r7, #20]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	617b      	str	r3, [r7, #20]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2201      	movs	r2, #1
 80060f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2200      	movs	r2, #0
 80060fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006104:	2b00      	cmp	r3, #0
 8006106:	d001      	beq.n	800610c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e000      	b.n	800610e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800610c:	2300      	movs	r3, #0
  }
}
 800610e:	4618      	mov	r0, r3
 8006110:	3720      	adds	r7, #32
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8006116:	b480      	push	{r7}
 8006118:	b083      	sub	sp, #12
 800611a:	af00      	add	r7, sp, #0
 800611c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006124:	b2db      	uxtb	r3, r3
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
	...

08006134 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b088      	sub	sp, #32
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	603b      	str	r3, [r7, #0]
 8006140:	4613      	mov	r3, r2
 8006142:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006144:	f7fd f81e 	bl	8003184 <HAL_GetTick>
 8006148:	4602      	mov	r2, r0
 800614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800614c:	1a9b      	subs	r3, r3, r2
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4413      	add	r3, r2
 8006152:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006154:	f7fd f816 	bl	8003184 <HAL_GetTick>
 8006158:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800615a:	4b39      	ldr	r3, [pc, #228]	@ (8006240 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	015b      	lsls	r3, r3, #5
 8006160:	0d1b      	lsrs	r3, r3, #20
 8006162:	69fa      	ldr	r2, [r7, #28]
 8006164:	fb02 f303 	mul.w	r3, r2, r3
 8006168:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800616a:	e054      	b.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d050      	beq.n	8006216 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006174:	f7fd f806 	bl	8003184 <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	69bb      	ldr	r3, [r7, #24]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	429a      	cmp	r2, r3
 8006182:	d902      	bls.n	800618a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006184:	69fb      	ldr	r3, [r7, #28]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d13d      	bne.n	8006206 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	685a      	ldr	r2, [r3, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006198:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061a2:	d111      	bne.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ac:	d004      	beq.n	80061b8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b6:	d107      	bne.n	80061c8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	681a      	ldr	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061d0:	d10f      	bne.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061e0:	601a      	str	r2, [r3, #0]
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681a      	ldr	r2, [r3, #0]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061f0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2200      	movs	r2, #0
 80061fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006202:	2303      	movs	r3, #3
 8006204:	e017      	b.n	8006236 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800620c:	2300      	movs	r3, #0
 800620e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	3b01      	subs	r3, #1
 8006214:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	4013      	ands	r3, r2
 8006220:	68ba      	ldr	r2, [r7, #8]
 8006222:	429a      	cmp	r2, r3
 8006224:	bf0c      	ite	eq
 8006226:	2301      	moveq	r3, #1
 8006228:	2300      	movne	r3, #0
 800622a:	b2db      	uxtb	r3, r3
 800622c:	461a      	mov	r2, r3
 800622e:	79fb      	ldrb	r3, [r7, #7]
 8006230:	429a      	cmp	r2, r3
 8006232:	d19b      	bne.n	800616c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006234:	2300      	movs	r3, #0
}
 8006236:	4618      	mov	r0, r3
 8006238:	3720      	adds	r7, #32
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}
 800623e:	bf00      	nop
 8006240:	20000e10 	.word	0x20000e10

08006244 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b088      	sub	sp, #32
 8006248:	af02      	add	r7, sp, #8
 800624a:	60f8      	str	r0, [r7, #12]
 800624c:	60b9      	str	r1, [r7, #8]
 800624e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2201      	movs	r2, #1
 8006258:	2102      	movs	r1, #2
 800625a:	68f8      	ldr	r0, [r7, #12]
 800625c:	f7ff ff6a 	bl	8006134 <SPI_WaitFlagStateUntilTimeout>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d007      	beq.n	8006276 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800626a:	f043 0220 	orr.w	r2, r3, #32
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e032      	b.n	80062dc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006276:	4b1b      	ldr	r3, [pc, #108]	@ (80062e4 <SPI_EndRxTxTransaction+0xa0>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <SPI_EndRxTxTransaction+0xa4>)
 800627c:	fba2 2303 	umull	r2, r3, r2, r3
 8006280:	0d5b      	lsrs	r3, r3, #21
 8006282:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006286:	fb02 f303 	mul.w	r3, r2, r3
 800628a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	685b      	ldr	r3, [r3, #4]
 8006290:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006294:	d112      	bne.n	80062bc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	9300      	str	r3, [sp, #0]
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	2200      	movs	r2, #0
 800629e:	2180      	movs	r1, #128	@ 0x80
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff ff47 	bl	8006134 <SPI_WaitFlagStateUntilTimeout>
 80062a6:	4603      	mov	r3, r0
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d016      	beq.n	80062da <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b0:	f043 0220 	orr.w	r2, r3, #32
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e00f      	b.n	80062dc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	3b01      	subs	r3, #1
 80062c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d2:	2b80      	cmp	r3, #128	@ 0x80
 80062d4:	d0f2      	beq.n	80062bc <SPI_EndRxTxTransaction+0x78>
 80062d6:	e000      	b.n	80062da <SPI_EndRxTxTransaction+0x96>
        break;
 80062d8:	bf00      	nop
  }

  return HAL_OK;
 80062da:	2300      	movs	r3, #0
}
 80062dc:	4618      	mov	r0, r3
 80062de:	3718      	adds	r7, #24
 80062e0:	46bd      	mov	sp, r7
 80062e2:	bd80      	pop	{r7, pc}
 80062e4:	20000e10 	.word	0x20000e10
 80062e8:	165e9f81 	.word	0x165e9f81

080062ec <findslot>:
 80062ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006318 <findslot+0x2c>)
 80062ee:	b510      	push	{r4, lr}
 80062f0:	4604      	mov	r4, r0
 80062f2:	6818      	ldr	r0, [r3, #0]
 80062f4:	b118      	cbz	r0, 80062fe <findslot+0x12>
 80062f6:	6a03      	ldr	r3, [r0, #32]
 80062f8:	b90b      	cbnz	r3, 80062fe <findslot+0x12>
 80062fa:	f000 fb19 	bl	8006930 <__sinit>
 80062fe:	2c13      	cmp	r4, #19
 8006300:	d807      	bhi.n	8006312 <findslot+0x26>
 8006302:	4806      	ldr	r0, [pc, #24]	@ (800631c <findslot+0x30>)
 8006304:	f850 2034 	ldr.w	r2, [r0, r4, lsl #3]
 8006308:	3201      	adds	r2, #1
 800630a:	d002      	beq.n	8006312 <findslot+0x26>
 800630c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8006310:	bd10      	pop	{r4, pc}
 8006312:	2000      	movs	r0, #0
 8006314:	e7fc      	b.n	8006310 <findslot+0x24>
 8006316:	bf00      	nop
 8006318:	20000e30 	.word	0x20000e30
 800631c:	200272cc 	.word	0x200272cc

08006320 <error>:
 8006320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006322:	4604      	mov	r4, r0
 8006324:	f000 fcf0 	bl	8006d08 <__errno>
 8006328:	2613      	movs	r6, #19
 800632a:	4605      	mov	r5, r0
 800632c:	2700      	movs	r7, #0
 800632e:	4630      	mov	r0, r6
 8006330:	4639      	mov	r1, r7
 8006332:	beab      	bkpt	0x00ab
 8006334:	4606      	mov	r6, r0
 8006336:	602e      	str	r6, [r5, #0]
 8006338:	4620      	mov	r0, r4
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800633c <checkerror>:
 800633c:	1c43      	adds	r3, r0, #1
 800633e:	d101      	bne.n	8006344 <checkerror+0x8>
 8006340:	f7ff bfee 	b.w	8006320 <error>
 8006344:	4770      	bx	lr

08006346 <_swiread>:
 8006346:	b530      	push	{r4, r5, lr}
 8006348:	b085      	sub	sp, #20
 800634a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800634e:	9203      	str	r2, [sp, #12]
 8006350:	2406      	movs	r4, #6
 8006352:	ad01      	add	r5, sp, #4
 8006354:	4620      	mov	r0, r4
 8006356:	4629      	mov	r1, r5
 8006358:	beab      	bkpt	0x00ab
 800635a:	4604      	mov	r4, r0
 800635c:	4620      	mov	r0, r4
 800635e:	f7ff ffed 	bl	800633c <checkerror>
 8006362:	b005      	add	sp, #20
 8006364:	bd30      	pop	{r4, r5, pc}

08006366 <_read>:
 8006366:	b570      	push	{r4, r5, r6, lr}
 8006368:	460e      	mov	r6, r1
 800636a:	4614      	mov	r4, r2
 800636c:	f7ff ffbe 	bl	80062ec <findslot>
 8006370:	4605      	mov	r5, r0
 8006372:	b930      	cbnz	r0, 8006382 <_read+0x1c>
 8006374:	f000 fcc8 	bl	8006d08 <__errno>
 8006378:	2309      	movs	r3, #9
 800637a:	6003      	str	r3, [r0, #0]
 800637c:	f04f 30ff 	mov.w	r0, #4294967295
 8006380:	bd70      	pop	{r4, r5, r6, pc}
 8006382:	6800      	ldr	r0, [r0, #0]
 8006384:	4622      	mov	r2, r4
 8006386:	4631      	mov	r1, r6
 8006388:	f7ff ffdd 	bl	8006346 <_swiread>
 800638c:	1c43      	adds	r3, r0, #1
 800638e:	d0f5      	beq.n	800637c <_read+0x16>
 8006390:	686b      	ldr	r3, [r5, #4]
 8006392:	1a20      	subs	r0, r4, r0
 8006394:	4403      	add	r3, r0
 8006396:	606b      	str	r3, [r5, #4]
 8006398:	e7f2      	b.n	8006380 <_read+0x1a>

0800639a <_swilseek>:
 800639a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800639c:	460c      	mov	r4, r1
 800639e:	4616      	mov	r6, r2
 80063a0:	f7ff ffa4 	bl	80062ec <findslot>
 80063a4:	4605      	mov	r5, r0
 80063a6:	b940      	cbnz	r0, 80063ba <_swilseek+0x20>
 80063a8:	f000 fcae 	bl	8006d08 <__errno>
 80063ac:	2309      	movs	r3, #9
 80063ae:	6003      	str	r3, [r0, #0]
 80063b0:	f04f 34ff 	mov.w	r4, #4294967295
 80063b4:	4620      	mov	r0, r4
 80063b6:	b003      	add	sp, #12
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ba:	2e02      	cmp	r6, #2
 80063bc:	d903      	bls.n	80063c6 <_swilseek+0x2c>
 80063be:	f000 fca3 	bl	8006d08 <__errno>
 80063c2:	2316      	movs	r3, #22
 80063c4:	e7f3      	b.n	80063ae <_swilseek+0x14>
 80063c6:	2e01      	cmp	r6, #1
 80063c8:	d112      	bne.n	80063f0 <_swilseek+0x56>
 80063ca:	6843      	ldr	r3, [r0, #4]
 80063cc:	18e4      	adds	r4, r4, r3
 80063ce:	d4f6      	bmi.n	80063be <_swilseek+0x24>
 80063d0:	682b      	ldr	r3, [r5, #0]
 80063d2:	260a      	movs	r6, #10
 80063d4:	e9cd 3400 	strd	r3, r4, [sp]
 80063d8:	466f      	mov	r7, sp
 80063da:	4630      	mov	r0, r6
 80063dc:	4639      	mov	r1, r7
 80063de:	beab      	bkpt	0x00ab
 80063e0:	4606      	mov	r6, r0
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7ff ffaa 	bl	800633c <checkerror>
 80063e8:	2800      	cmp	r0, #0
 80063ea:	dbe1      	blt.n	80063b0 <_swilseek+0x16>
 80063ec:	606c      	str	r4, [r5, #4]
 80063ee:	e7e1      	b.n	80063b4 <_swilseek+0x1a>
 80063f0:	2e02      	cmp	r6, #2
 80063f2:	6803      	ldr	r3, [r0, #0]
 80063f4:	d1ec      	bne.n	80063d0 <_swilseek+0x36>
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	260c      	movs	r6, #12
 80063fa:	466f      	mov	r7, sp
 80063fc:	4630      	mov	r0, r6
 80063fe:	4639      	mov	r1, r7
 8006400:	beab      	bkpt	0x00ab
 8006402:	4606      	mov	r6, r0
 8006404:	4630      	mov	r0, r6
 8006406:	f7ff ff99 	bl	800633c <checkerror>
 800640a:	1c43      	adds	r3, r0, #1
 800640c:	d0d0      	beq.n	80063b0 <_swilseek+0x16>
 800640e:	4404      	add	r4, r0
 8006410:	e7de      	b.n	80063d0 <_swilseek+0x36>

08006412 <_lseek>:
 8006412:	f7ff bfc2 	b.w	800639a <_swilseek>

08006416 <_swiwrite>:
 8006416:	b530      	push	{r4, r5, lr}
 8006418:	b085      	sub	sp, #20
 800641a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800641e:	9203      	str	r2, [sp, #12]
 8006420:	2405      	movs	r4, #5
 8006422:	ad01      	add	r5, sp, #4
 8006424:	4620      	mov	r0, r4
 8006426:	4629      	mov	r1, r5
 8006428:	beab      	bkpt	0x00ab
 800642a:	4604      	mov	r4, r0
 800642c:	4620      	mov	r0, r4
 800642e:	f7ff ff85 	bl	800633c <checkerror>
 8006432:	b005      	add	sp, #20
 8006434:	bd30      	pop	{r4, r5, pc}

08006436 <_write>:
 8006436:	b570      	push	{r4, r5, r6, lr}
 8006438:	460e      	mov	r6, r1
 800643a:	4615      	mov	r5, r2
 800643c:	f7ff ff56 	bl	80062ec <findslot>
 8006440:	4604      	mov	r4, r0
 8006442:	b930      	cbnz	r0, 8006452 <_write+0x1c>
 8006444:	f000 fc60 	bl	8006d08 <__errno>
 8006448:	2309      	movs	r3, #9
 800644a:	6003      	str	r3, [r0, #0]
 800644c:	f04f 30ff 	mov.w	r0, #4294967295
 8006450:	bd70      	pop	{r4, r5, r6, pc}
 8006452:	6800      	ldr	r0, [r0, #0]
 8006454:	462a      	mov	r2, r5
 8006456:	4631      	mov	r1, r6
 8006458:	f7ff ffdd 	bl	8006416 <_swiwrite>
 800645c:	1e03      	subs	r3, r0, #0
 800645e:	dbf5      	blt.n	800644c <_write+0x16>
 8006460:	6862      	ldr	r2, [r4, #4]
 8006462:	1ae8      	subs	r0, r5, r3
 8006464:	4402      	add	r2, r0
 8006466:	42ab      	cmp	r3, r5
 8006468:	6062      	str	r2, [r4, #4]
 800646a:	d1f1      	bne.n	8006450 <_write+0x1a>
 800646c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006470:	2000      	movs	r0, #0
 8006472:	f7ff bf55 	b.w	8006320 <error>

08006476 <_swiclose>:
 8006476:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006478:	2402      	movs	r4, #2
 800647a:	9001      	str	r0, [sp, #4]
 800647c:	ad01      	add	r5, sp, #4
 800647e:	4620      	mov	r0, r4
 8006480:	4629      	mov	r1, r5
 8006482:	beab      	bkpt	0x00ab
 8006484:	4604      	mov	r4, r0
 8006486:	4620      	mov	r0, r4
 8006488:	f7ff ff58 	bl	800633c <checkerror>
 800648c:	b003      	add	sp, #12
 800648e:	bd30      	pop	{r4, r5, pc}

08006490 <_close>:
 8006490:	b538      	push	{r3, r4, r5, lr}
 8006492:	4605      	mov	r5, r0
 8006494:	f7ff ff2a 	bl	80062ec <findslot>
 8006498:	4604      	mov	r4, r0
 800649a:	b930      	cbnz	r0, 80064aa <_close+0x1a>
 800649c:	f000 fc34 	bl	8006d08 <__errno>
 80064a0:	2309      	movs	r3, #9
 80064a2:	6003      	str	r3, [r0, #0]
 80064a4:	f04f 30ff 	mov.w	r0, #4294967295
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	3d01      	subs	r5, #1
 80064ac:	2d01      	cmp	r5, #1
 80064ae:	d809      	bhi.n	80064c4 <_close+0x34>
 80064b0:	4b07      	ldr	r3, [pc, #28]	@ (80064d0 <_close+0x40>)
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d104      	bne.n	80064c4 <_close+0x34>
 80064ba:	f04f 33ff 	mov.w	r3, #4294967295
 80064be:	6023      	str	r3, [r4, #0]
 80064c0:	2000      	movs	r0, #0
 80064c2:	e7f1      	b.n	80064a8 <_close+0x18>
 80064c4:	6820      	ldr	r0, [r4, #0]
 80064c6:	f7ff ffd6 	bl	8006476 <_swiclose>
 80064ca:	2800      	cmp	r0, #0
 80064cc:	d0f5      	beq.n	80064ba <_close+0x2a>
 80064ce:	e7eb      	b.n	80064a8 <_close+0x18>
 80064d0:	200272cc 	.word	0x200272cc

080064d4 <_swistat>:
 80064d4:	b570      	push	{r4, r5, r6, lr}
 80064d6:	460c      	mov	r4, r1
 80064d8:	f7ff ff08 	bl	80062ec <findslot>
 80064dc:	4605      	mov	r5, r0
 80064de:	b930      	cbnz	r0, 80064ee <_swistat+0x1a>
 80064e0:	f000 fc12 	bl	8006d08 <__errno>
 80064e4:	2309      	movs	r3, #9
 80064e6:	6003      	str	r3, [r0, #0]
 80064e8:	f04f 30ff 	mov.w	r0, #4294967295
 80064ec:	bd70      	pop	{r4, r5, r6, pc}
 80064ee:	6863      	ldr	r3, [r4, #4]
 80064f0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80064fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80064fc:	260c      	movs	r6, #12
 80064fe:	4630      	mov	r0, r6
 8006500:	4629      	mov	r1, r5
 8006502:	beab      	bkpt	0x00ab
 8006504:	4605      	mov	r5, r0
 8006506:	4628      	mov	r0, r5
 8006508:	f7ff ff18 	bl	800633c <checkerror>
 800650c:	1c43      	adds	r3, r0, #1
 800650e:	d0eb      	beq.n	80064e8 <_swistat+0x14>
 8006510:	6120      	str	r0, [r4, #16]
 8006512:	2000      	movs	r0, #0
 8006514:	e7ea      	b.n	80064ec <_swistat+0x18>

08006516 <_fstat>:
 8006516:	460b      	mov	r3, r1
 8006518:	b510      	push	{r4, lr}
 800651a:	2100      	movs	r1, #0
 800651c:	4604      	mov	r4, r0
 800651e:	2258      	movs	r2, #88	@ 0x58
 8006520:	4618      	mov	r0, r3
 8006522:	f000 fba3 	bl	8006c6c <memset>
 8006526:	4601      	mov	r1, r0
 8006528:	4620      	mov	r0, r4
 800652a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800652e:	f7ff bfd1 	b.w	80064d4 <_swistat>

08006532 <_stat>:
 8006532:	b538      	push	{r3, r4, r5, lr}
 8006534:	460d      	mov	r5, r1
 8006536:	4604      	mov	r4, r0
 8006538:	2258      	movs	r2, #88	@ 0x58
 800653a:	2100      	movs	r1, #0
 800653c:	4628      	mov	r0, r5
 800653e:	f000 fb95 	bl	8006c6c <memset>
 8006542:	4620      	mov	r0, r4
 8006544:	2100      	movs	r1, #0
 8006546:	f000 f811 	bl	800656c <_swiopen>
 800654a:	1c43      	adds	r3, r0, #1
 800654c:	4604      	mov	r4, r0
 800654e:	d00b      	beq.n	8006568 <_stat+0x36>
 8006550:	686b      	ldr	r3, [r5, #4]
 8006552:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8006556:	606b      	str	r3, [r5, #4]
 8006558:	4629      	mov	r1, r5
 800655a:	f7ff ffbb 	bl	80064d4 <_swistat>
 800655e:	4605      	mov	r5, r0
 8006560:	4620      	mov	r0, r4
 8006562:	f7ff ff95 	bl	8006490 <_close>
 8006566:	462c      	mov	r4, r5
 8006568:	4620      	mov	r0, r4
 800656a:	bd38      	pop	{r3, r4, r5, pc}

0800656c <_swiopen>:
 800656c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006570:	4f29      	ldr	r7, [pc, #164]	@ (8006618 <_swiopen+0xac>)
 8006572:	b096      	sub	sp, #88	@ 0x58
 8006574:	4682      	mov	sl, r0
 8006576:	460e      	mov	r6, r1
 8006578:	2400      	movs	r4, #0
 800657a:	f857 3034 	ldr.w	r3, [r7, r4, lsl #3]
 800657e:	3301      	adds	r3, #1
 8006580:	ea4f 08c4 	mov.w	r8, r4, lsl #3
 8006584:	d00c      	beq.n	80065a0 <_swiopen+0x34>
 8006586:	3401      	adds	r4, #1
 8006588:	2c14      	cmp	r4, #20
 800658a:	d1f6      	bne.n	800657a <_swiopen+0xe>
 800658c:	f000 fbbc 	bl	8006d08 <__errno>
 8006590:	2318      	movs	r3, #24
 8006592:	6003      	str	r3, [r0, #0]
 8006594:	f04f 34ff 	mov.w	r4, #4294967295
 8006598:	4620      	mov	r0, r4
 800659a:	b016      	add	sp, #88	@ 0x58
 800659c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065a0:	f406 6320 	and.w	r3, r6, #2560	@ 0xa00
 80065a4:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 80065a8:	46e9      	mov	r9, sp
 80065aa:	d109      	bne.n	80065c0 <_swiopen+0x54>
 80065ac:	4649      	mov	r1, r9
 80065ae:	4650      	mov	r0, sl
 80065b0:	f7ff ffbf 	bl	8006532 <_stat>
 80065b4:	3001      	adds	r0, #1
 80065b6:	d003      	beq.n	80065c0 <_swiopen+0x54>
 80065b8:	f000 fba6 	bl	8006d08 <__errno>
 80065bc:	2311      	movs	r3, #17
 80065be:	e7e8      	b.n	8006592 <_swiopen+0x26>
 80065c0:	f3c6 4500 	ubfx	r5, r6, #16, #1
 80065c4:	f240 6301 	movw	r3, #1537	@ 0x601
 80065c8:	07b2      	lsls	r2, r6, #30
 80065ca:	bf48      	it	mi
 80065cc:	f045 0502 	orrmi.w	r5, r5, #2
 80065d0:	421e      	tst	r6, r3
 80065d2:	bf18      	it	ne
 80065d4:	f045 0504 	orrne.w	r5, r5, #4
 80065d8:	0733      	lsls	r3, r6, #28
 80065da:	bf48      	it	mi
 80065dc:	f025 0504 	bicmi.w	r5, r5, #4
 80065e0:	4650      	mov	r0, sl
 80065e2:	bf48      	it	mi
 80065e4:	f045 0508 	orrmi.w	r5, r5, #8
 80065e8:	f8cd a000 	str.w	sl, [sp]
 80065ec:	f7f9 fe00 	bl	80001f0 <strlen>
 80065f0:	e9cd 5001 	strd	r5, r0, [sp, #4]
 80065f4:	2501      	movs	r5, #1
 80065f6:	4628      	mov	r0, r5
 80065f8:	4649      	mov	r1, r9
 80065fa:	beab      	bkpt	0x00ab
 80065fc:	4605      	mov	r5, r0
 80065fe:	2d00      	cmp	r5, #0
 8006600:	db05      	blt.n	800660e <_swiopen+0xa2>
 8006602:	f847 5034 	str.w	r5, [r7, r4, lsl #3]
 8006606:	4447      	add	r7, r8
 8006608:	2300      	movs	r3, #0
 800660a:	607b      	str	r3, [r7, #4]
 800660c:	e7c4      	b.n	8006598 <_swiopen+0x2c>
 800660e:	4628      	mov	r0, r5
 8006610:	f7ff fe86 	bl	8006320 <error>
 8006614:	4604      	mov	r4, r0
 8006616:	e7bf      	b.n	8006598 <_swiopen+0x2c>
 8006618:	200272cc 	.word	0x200272cc

0800661c <_get_semihosting_exts>:
 800661c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006620:	4606      	mov	r6, r0
 8006622:	460f      	mov	r7, r1
 8006624:	4829      	ldr	r0, [pc, #164]	@ (80066cc <_get_semihosting_exts+0xb0>)
 8006626:	2100      	movs	r1, #0
 8006628:	4615      	mov	r5, r2
 800662a:	f7ff ff9f 	bl	800656c <_swiopen>
 800662e:	462a      	mov	r2, r5
 8006630:	4604      	mov	r4, r0
 8006632:	2100      	movs	r1, #0
 8006634:	4630      	mov	r0, r6
 8006636:	f000 fb19 	bl	8006c6c <memset>
 800663a:	1c63      	adds	r3, r4, #1
 800663c:	d014      	beq.n	8006668 <_get_semihosting_exts+0x4c>
 800663e:	4620      	mov	r0, r4
 8006640:	f7ff fe54 	bl	80062ec <findslot>
 8006644:	f04f 080c 	mov.w	r8, #12
 8006648:	4681      	mov	r9, r0
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	beab      	bkpt	0x00ab
 8006650:	4680      	mov	r8, r0
 8006652:	4640      	mov	r0, r8
 8006654:	f7ff fe72 	bl	800633c <checkerror>
 8006658:	2803      	cmp	r0, #3
 800665a:	dd02      	ble.n	8006662 <_get_semihosting_exts+0x46>
 800665c:	1ec3      	subs	r3, r0, #3
 800665e:	42ab      	cmp	r3, r5
 8006660:	dc07      	bgt.n	8006672 <_get_semihosting_exts+0x56>
 8006662:	4620      	mov	r0, r4
 8006664:	f7ff ff14 	bl	8006490 <_close>
 8006668:	f04f 30ff 	mov.w	r0, #4294967295
 800666c:	b003      	add	sp, #12
 800666e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006672:	2204      	movs	r2, #4
 8006674:	eb0d 0102 	add.w	r1, sp, r2
 8006678:	4620      	mov	r0, r4
 800667a:	f7ff fe74 	bl	8006366 <_read>
 800667e:	2803      	cmp	r0, #3
 8006680:	ddef      	ble.n	8006662 <_get_semihosting_exts+0x46>
 8006682:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8006686:	2b53      	cmp	r3, #83	@ 0x53
 8006688:	d1eb      	bne.n	8006662 <_get_semihosting_exts+0x46>
 800668a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800668e:	2b48      	cmp	r3, #72	@ 0x48
 8006690:	d1e7      	bne.n	8006662 <_get_semihosting_exts+0x46>
 8006692:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006696:	2b46      	cmp	r3, #70	@ 0x46
 8006698:	d1e3      	bne.n	8006662 <_get_semihosting_exts+0x46>
 800669a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800669e:	2b42      	cmp	r3, #66	@ 0x42
 80066a0:	d1df      	bne.n	8006662 <_get_semihosting_exts+0x46>
 80066a2:	2201      	movs	r2, #1
 80066a4:	4639      	mov	r1, r7
 80066a6:	4620      	mov	r0, r4
 80066a8:	f7ff fe77 	bl	800639a <_swilseek>
 80066ac:	2800      	cmp	r0, #0
 80066ae:	dbd8      	blt.n	8006662 <_get_semihosting_exts+0x46>
 80066b0:	462a      	mov	r2, r5
 80066b2:	4631      	mov	r1, r6
 80066b4:	4620      	mov	r0, r4
 80066b6:	f7ff fe56 	bl	8006366 <_read>
 80066ba:	4605      	mov	r5, r0
 80066bc:	4620      	mov	r0, r4
 80066be:	f7ff fee7 	bl	8006490 <_close>
 80066c2:	4628      	mov	r0, r5
 80066c4:	f7ff fe3a 	bl	800633c <checkerror>
 80066c8:	e7d0      	b.n	800666c <_get_semihosting_exts+0x50>
 80066ca:	bf00      	nop
 80066cc:	08008d2c 	.word	0x08008d2c

080066d0 <initialise_semihosting_exts>:
 80066d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80066d2:	4d0a      	ldr	r5, [pc, #40]	@ (80066fc <initialise_semihosting_exts+0x2c>)
 80066d4:	4c0a      	ldr	r4, [pc, #40]	@ (8006700 <initialise_semihosting_exts+0x30>)
 80066d6:	2100      	movs	r1, #0
 80066d8:	2201      	movs	r2, #1
 80066da:	a801      	add	r0, sp, #4
 80066dc:	6029      	str	r1, [r5, #0]
 80066de:	6022      	str	r2, [r4, #0]
 80066e0:	f7ff ff9c 	bl	800661c <_get_semihosting_exts>
 80066e4:	2800      	cmp	r0, #0
 80066e6:	dd07      	ble.n	80066f8 <initialise_semihosting_exts+0x28>
 80066e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80066ec:	f003 0201 	and.w	r2, r3, #1
 80066f0:	f003 0302 	and.w	r3, r3, #2
 80066f4:	602a      	str	r2, [r5, #0]
 80066f6:	6023      	str	r3, [r4, #0]
 80066f8:	b003      	add	sp, #12
 80066fa:	bd30      	pop	{r4, r5, pc}
 80066fc:	20000e20 	.word	0x20000e20
 8006700:	20000e1c 	.word	0x20000e1c

08006704 <_has_ext_stdout_stderr>:
 8006704:	b510      	push	{r4, lr}
 8006706:	4c04      	ldr	r4, [pc, #16]	@ (8006718 <_has_ext_stdout_stderr+0x14>)
 8006708:	6823      	ldr	r3, [r4, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	da01      	bge.n	8006712 <_has_ext_stdout_stderr+0xe>
 800670e:	f7ff ffdf 	bl	80066d0 <initialise_semihosting_exts>
 8006712:	6820      	ldr	r0, [r4, #0]
 8006714:	bd10      	pop	{r4, pc}
 8006716:	bf00      	nop
 8006718:	20000e1c 	.word	0x20000e1c

0800671c <initialise_monitor_handles>:
 800671c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006720:	b085      	sub	sp, #20
 8006722:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 80067d4 <initialise_monitor_handles+0xb8>
 8006726:	f8cd 9004 	str.w	r9, [sp, #4]
 800672a:	2303      	movs	r3, #3
 800672c:	2400      	movs	r4, #0
 800672e:	9303      	str	r3, [sp, #12]
 8006730:	af01      	add	r7, sp, #4
 8006732:	9402      	str	r4, [sp, #8]
 8006734:	2501      	movs	r5, #1
 8006736:	4628      	mov	r0, r5
 8006738:	4639      	mov	r1, r7
 800673a:	beab      	bkpt	0x00ab
 800673c:	4605      	mov	r5, r0
 800673e:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80067d8 <initialise_monitor_handles+0xbc>
 8006742:	4623      	mov	r3, r4
 8006744:	4c20      	ldr	r4, [pc, #128]	@ (80067c8 <initialise_monitor_handles+0xac>)
 8006746:	f8c8 5000 	str.w	r5, [r8]
 800674a:	f04f 32ff 	mov.w	r2, #4294967295
 800674e:	f844 2033 	str.w	r2, [r4, r3, lsl #3]
 8006752:	3301      	adds	r3, #1
 8006754:	2b14      	cmp	r3, #20
 8006756:	d1fa      	bne.n	800674e <initialise_monitor_handles+0x32>
 8006758:	f7ff ffd4 	bl	8006704 <_has_ext_stdout_stderr>
 800675c:	4d1b      	ldr	r5, [pc, #108]	@ (80067cc <initialise_monitor_handles+0xb0>)
 800675e:	b1d0      	cbz	r0, 8006796 <initialise_monitor_handles+0x7a>
 8006760:	f04f 0a03 	mov.w	sl, #3
 8006764:	2304      	movs	r3, #4
 8006766:	f8cd 9004 	str.w	r9, [sp, #4]
 800676a:	2601      	movs	r6, #1
 800676c:	f8cd a00c 	str.w	sl, [sp, #12]
 8006770:	9302      	str	r3, [sp, #8]
 8006772:	4630      	mov	r0, r6
 8006774:	4639      	mov	r1, r7
 8006776:	beab      	bkpt	0x00ab
 8006778:	4683      	mov	fp, r0
 800677a:	4b15      	ldr	r3, [pc, #84]	@ (80067d0 <initialise_monitor_handles+0xb4>)
 800677c:	f8cd 9004 	str.w	r9, [sp, #4]
 8006780:	f8c3 b000 	str.w	fp, [r3]
 8006784:	2308      	movs	r3, #8
 8006786:	f8cd a00c 	str.w	sl, [sp, #12]
 800678a:	9302      	str	r3, [sp, #8]
 800678c:	4630      	mov	r0, r6
 800678e:	4639      	mov	r1, r7
 8006790:	beab      	bkpt	0x00ab
 8006792:	4606      	mov	r6, r0
 8006794:	602e      	str	r6, [r5, #0]
 8006796:	682b      	ldr	r3, [r5, #0]
 8006798:	3301      	adds	r3, #1
 800679a:	bf02      	ittt	eq
 800679c:	4b0c      	ldreq	r3, [pc, #48]	@ (80067d0 <initialise_monitor_handles+0xb4>)
 800679e:	681b      	ldreq	r3, [r3, #0]
 80067a0:	602b      	streq	r3, [r5, #0]
 80067a2:	2600      	movs	r6, #0
 80067a4:	f8d8 3000 	ldr.w	r3, [r8]
 80067a8:	6023      	str	r3, [r4, #0]
 80067aa:	6066      	str	r6, [r4, #4]
 80067ac:	f7ff ffaa 	bl	8006704 <_has_ext_stdout_stderr>
 80067b0:	b130      	cbz	r0, 80067c0 <initialise_monitor_handles+0xa4>
 80067b2:	4b07      	ldr	r3, [pc, #28]	@ (80067d0 <initialise_monitor_handles+0xb4>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80067ba:	682b      	ldr	r3, [r5, #0]
 80067bc:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80067c0:	b005      	add	sp, #20
 80067c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067c6:	bf00      	nop
 80067c8:	200272cc 	.word	0x200272cc
 80067cc:	200272c0 	.word	0x200272c0
 80067d0:	200272c4 	.word	0x200272c4
 80067d4:	08008d42 	.word	0x08008d42
 80067d8:	200272c8 	.word	0x200272c8

080067dc <_isatty>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	f7ff fd85 	bl	80062ec <findslot>
 80067e2:	2409      	movs	r4, #9
 80067e4:	4605      	mov	r5, r0
 80067e6:	b920      	cbnz	r0, 80067f2 <_isatty+0x16>
 80067e8:	f000 fa8e 	bl	8006d08 <__errno>
 80067ec:	6004      	str	r4, [r0, #0]
 80067ee:	2000      	movs	r0, #0
 80067f0:	bd70      	pop	{r4, r5, r6, pc}
 80067f2:	4620      	mov	r0, r4
 80067f4:	4629      	mov	r1, r5
 80067f6:	beab      	bkpt	0x00ab
 80067f8:	4604      	mov	r4, r0
 80067fa:	2c01      	cmp	r4, #1
 80067fc:	4620      	mov	r0, r4
 80067fe:	d0f7      	beq.n	80067f0 <_isatty+0x14>
 8006800:	f000 fa82 	bl	8006d08 <__errno>
 8006804:	2513      	movs	r5, #19
 8006806:	4604      	mov	r4, r0
 8006808:	2600      	movs	r6, #0
 800680a:	4628      	mov	r0, r5
 800680c:	4631      	mov	r1, r6
 800680e:	beab      	bkpt	0x00ab
 8006810:	4605      	mov	r5, r0
 8006812:	6025      	str	r5, [r4, #0]
 8006814:	e7eb      	b.n	80067ee <_isatty+0x12>
	...

08006818 <std>:
 8006818:	2300      	movs	r3, #0
 800681a:	b510      	push	{r4, lr}
 800681c:	4604      	mov	r4, r0
 800681e:	e9c0 3300 	strd	r3, r3, [r0]
 8006822:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006826:	6083      	str	r3, [r0, #8]
 8006828:	8181      	strh	r1, [r0, #12]
 800682a:	6643      	str	r3, [r0, #100]	@ 0x64
 800682c:	81c2      	strh	r2, [r0, #14]
 800682e:	6183      	str	r3, [r0, #24]
 8006830:	4619      	mov	r1, r3
 8006832:	2208      	movs	r2, #8
 8006834:	305c      	adds	r0, #92	@ 0x5c
 8006836:	f000 fa19 	bl	8006c6c <memset>
 800683a:	4b0d      	ldr	r3, [pc, #52]	@ (8006870 <std+0x58>)
 800683c:	6263      	str	r3, [r4, #36]	@ 0x24
 800683e:	4b0d      	ldr	r3, [pc, #52]	@ (8006874 <std+0x5c>)
 8006840:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006842:	4b0d      	ldr	r3, [pc, #52]	@ (8006878 <std+0x60>)
 8006844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006846:	4b0d      	ldr	r3, [pc, #52]	@ (800687c <std+0x64>)
 8006848:	6323      	str	r3, [r4, #48]	@ 0x30
 800684a:	4b0d      	ldr	r3, [pc, #52]	@ (8006880 <std+0x68>)
 800684c:	6224      	str	r4, [r4, #32]
 800684e:	429c      	cmp	r4, r3
 8006850:	d006      	beq.n	8006860 <std+0x48>
 8006852:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006856:	4294      	cmp	r4, r2
 8006858:	d002      	beq.n	8006860 <std+0x48>
 800685a:	33d0      	adds	r3, #208	@ 0xd0
 800685c:	429c      	cmp	r4, r3
 800685e:	d105      	bne.n	800686c <std+0x54>
 8006860:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006868:	f000 ba78 	b.w	8006d5c <__retarget_lock_init_recursive>
 800686c:	bd10      	pop	{r4, pc}
 800686e:	bf00      	nop
 8006870:	08006abd 	.word	0x08006abd
 8006874:	08006adf 	.word	0x08006adf
 8006878:	08006b17 	.word	0x08006b17
 800687c:	08006b3b 	.word	0x08006b3b
 8006880:	2002736c 	.word	0x2002736c

08006884 <stdio_exit_handler>:
 8006884:	4a02      	ldr	r2, [pc, #8]	@ (8006890 <stdio_exit_handler+0xc>)
 8006886:	4903      	ldr	r1, [pc, #12]	@ (8006894 <stdio_exit_handler+0x10>)
 8006888:	4803      	ldr	r0, [pc, #12]	@ (8006898 <stdio_exit_handler+0x14>)
 800688a:	f000 b869 	b.w	8006960 <_fwalk_sglue>
 800688e:	bf00      	nop
 8006890:	20000e24 	.word	0x20000e24
 8006894:	080078c9 	.word	0x080078c9
 8006898:	20000e34 	.word	0x20000e34

0800689c <cleanup_stdio>:
 800689c:	6841      	ldr	r1, [r0, #4]
 800689e:	4b0c      	ldr	r3, [pc, #48]	@ (80068d0 <cleanup_stdio+0x34>)
 80068a0:	4299      	cmp	r1, r3
 80068a2:	b510      	push	{r4, lr}
 80068a4:	4604      	mov	r4, r0
 80068a6:	d001      	beq.n	80068ac <cleanup_stdio+0x10>
 80068a8:	f001 f80e 	bl	80078c8 <_fflush_r>
 80068ac:	68a1      	ldr	r1, [r4, #8]
 80068ae:	4b09      	ldr	r3, [pc, #36]	@ (80068d4 <cleanup_stdio+0x38>)
 80068b0:	4299      	cmp	r1, r3
 80068b2:	d002      	beq.n	80068ba <cleanup_stdio+0x1e>
 80068b4:	4620      	mov	r0, r4
 80068b6:	f001 f807 	bl	80078c8 <_fflush_r>
 80068ba:	68e1      	ldr	r1, [r4, #12]
 80068bc:	4b06      	ldr	r3, [pc, #24]	@ (80068d8 <cleanup_stdio+0x3c>)
 80068be:	4299      	cmp	r1, r3
 80068c0:	d004      	beq.n	80068cc <cleanup_stdio+0x30>
 80068c2:	4620      	mov	r0, r4
 80068c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068c8:	f000 bffe 	b.w	80078c8 <_fflush_r>
 80068cc:	bd10      	pop	{r4, pc}
 80068ce:	bf00      	nop
 80068d0:	2002736c 	.word	0x2002736c
 80068d4:	200273d4 	.word	0x200273d4
 80068d8:	2002743c 	.word	0x2002743c

080068dc <global_stdio_init.part.0>:
 80068dc:	b510      	push	{r4, lr}
 80068de:	4b0b      	ldr	r3, [pc, #44]	@ (800690c <global_stdio_init.part.0+0x30>)
 80068e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006910 <global_stdio_init.part.0+0x34>)
 80068e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006914 <global_stdio_init.part.0+0x38>)
 80068e4:	601a      	str	r2, [r3, #0]
 80068e6:	4620      	mov	r0, r4
 80068e8:	2200      	movs	r2, #0
 80068ea:	2104      	movs	r1, #4
 80068ec:	f7ff ff94 	bl	8006818 <std>
 80068f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80068f4:	2201      	movs	r2, #1
 80068f6:	2109      	movs	r1, #9
 80068f8:	f7ff ff8e 	bl	8006818 <std>
 80068fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006900:	2202      	movs	r2, #2
 8006902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006906:	2112      	movs	r1, #18
 8006908:	f7ff bf86 	b.w	8006818 <std>
 800690c:	200274a4 	.word	0x200274a4
 8006910:	2002736c 	.word	0x2002736c
 8006914:	08006885 	.word	0x08006885

08006918 <__sfp_lock_acquire>:
 8006918:	4801      	ldr	r0, [pc, #4]	@ (8006920 <__sfp_lock_acquire+0x8>)
 800691a:	f000 ba20 	b.w	8006d5e <__retarget_lock_acquire_recursive>
 800691e:	bf00      	nop
 8006920:	200274ad 	.word	0x200274ad

08006924 <__sfp_lock_release>:
 8006924:	4801      	ldr	r0, [pc, #4]	@ (800692c <__sfp_lock_release+0x8>)
 8006926:	f000 ba1b 	b.w	8006d60 <__retarget_lock_release_recursive>
 800692a:	bf00      	nop
 800692c:	200274ad 	.word	0x200274ad

08006930 <__sinit>:
 8006930:	b510      	push	{r4, lr}
 8006932:	4604      	mov	r4, r0
 8006934:	f7ff fff0 	bl	8006918 <__sfp_lock_acquire>
 8006938:	6a23      	ldr	r3, [r4, #32]
 800693a:	b11b      	cbz	r3, 8006944 <__sinit+0x14>
 800693c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006940:	f7ff bff0 	b.w	8006924 <__sfp_lock_release>
 8006944:	4b04      	ldr	r3, [pc, #16]	@ (8006958 <__sinit+0x28>)
 8006946:	6223      	str	r3, [r4, #32]
 8006948:	4b04      	ldr	r3, [pc, #16]	@ (800695c <__sinit+0x2c>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d1f5      	bne.n	800693c <__sinit+0xc>
 8006950:	f7ff ffc4 	bl	80068dc <global_stdio_init.part.0>
 8006954:	e7f2      	b.n	800693c <__sinit+0xc>
 8006956:	bf00      	nop
 8006958:	0800689d 	.word	0x0800689d
 800695c:	200274a4 	.word	0x200274a4

08006960 <_fwalk_sglue>:
 8006960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006964:	4607      	mov	r7, r0
 8006966:	4688      	mov	r8, r1
 8006968:	4614      	mov	r4, r2
 800696a:	2600      	movs	r6, #0
 800696c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006970:	f1b9 0901 	subs.w	r9, r9, #1
 8006974:	d505      	bpl.n	8006982 <_fwalk_sglue+0x22>
 8006976:	6824      	ldr	r4, [r4, #0]
 8006978:	2c00      	cmp	r4, #0
 800697a:	d1f7      	bne.n	800696c <_fwalk_sglue+0xc>
 800697c:	4630      	mov	r0, r6
 800697e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006982:	89ab      	ldrh	r3, [r5, #12]
 8006984:	2b01      	cmp	r3, #1
 8006986:	d907      	bls.n	8006998 <_fwalk_sglue+0x38>
 8006988:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800698c:	3301      	adds	r3, #1
 800698e:	d003      	beq.n	8006998 <_fwalk_sglue+0x38>
 8006990:	4629      	mov	r1, r5
 8006992:	4638      	mov	r0, r7
 8006994:	47c0      	blx	r8
 8006996:	4306      	orrs	r6, r0
 8006998:	3568      	adds	r5, #104	@ 0x68
 800699a:	e7e9      	b.n	8006970 <_fwalk_sglue+0x10>

0800699c <iprintf>:
 800699c:	b40f      	push	{r0, r1, r2, r3}
 800699e:	b507      	push	{r0, r1, r2, lr}
 80069a0:	4906      	ldr	r1, [pc, #24]	@ (80069bc <iprintf+0x20>)
 80069a2:	ab04      	add	r3, sp, #16
 80069a4:	6808      	ldr	r0, [r1, #0]
 80069a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069aa:	6881      	ldr	r1, [r0, #8]
 80069ac:	9301      	str	r3, [sp, #4]
 80069ae:	f000 fc61 	bl	8007274 <_vfiprintf_r>
 80069b2:	b003      	add	sp, #12
 80069b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069b8:	b004      	add	sp, #16
 80069ba:	4770      	bx	lr
 80069bc:	20000e30 	.word	0x20000e30

080069c0 <_puts_r>:
 80069c0:	6a03      	ldr	r3, [r0, #32]
 80069c2:	b570      	push	{r4, r5, r6, lr}
 80069c4:	6884      	ldr	r4, [r0, #8]
 80069c6:	4605      	mov	r5, r0
 80069c8:	460e      	mov	r6, r1
 80069ca:	b90b      	cbnz	r3, 80069d0 <_puts_r+0x10>
 80069cc:	f7ff ffb0 	bl	8006930 <__sinit>
 80069d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069d2:	07db      	lsls	r3, r3, #31
 80069d4:	d405      	bmi.n	80069e2 <_puts_r+0x22>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	0598      	lsls	r0, r3, #22
 80069da:	d402      	bmi.n	80069e2 <_puts_r+0x22>
 80069dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069de:	f000 f9be 	bl	8006d5e <__retarget_lock_acquire_recursive>
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	0719      	lsls	r1, r3, #28
 80069e6:	d502      	bpl.n	80069ee <_puts_r+0x2e>
 80069e8:	6923      	ldr	r3, [r4, #16]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d135      	bne.n	8006a5a <_puts_r+0x9a>
 80069ee:	4621      	mov	r1, r4
 80069f0:	4628      	mov	r0, r5
 80069f2:	f000 f8e5 	bl	8006bc0 <__swsetup_r>
 80069f6:	b380      	cbz	r0, 8006a5a <_puts_r+0x9a>
 80069f8:	f04f 35ff 	mov.w	r5, #4294967295
 80069fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069fe:	07da      	lsls	r2, r3, #31
 8006a00:	d405      	bmi.n	8006a0e <_puts_r+0x4e>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	059b      	lsls	r3, r3, #22
 8006a06:	d402      	bmi.n	8006a0e <_puts_r+0x4e>
 8006a08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006a0a:	f000 f9a9 	bl	8006d60 <__retarget_lock_release_recursive>
 8006a0e:	4628      	mov	r0, r5
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	da04      	bge.n	8006a20 <_puts_r+0x60>
 8006a16:	69a2      	ldr	r2, [r4, #24]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	dc17      	bgt.n	8006a4c <_puts_r+0x8c>
 8006a1c:	290a      	cmp	r1, #10
 8006a1e:	d015      	beq.n	8006a4c <_puts_r+0x8c>
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	7019      	strb	r1, [r3, #0]
 8006a28:	68a3      	ldr	r3, [r4, #8]
 8006a2a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	2900      	cmp	r1, #0
 8006a34:	d1ed      	bne.n	8006a12 <_puts_r+0x52>
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	da11      	bge.n	8006a5e <_puts_r+0x9e>
 8006a3a:	4622      	mov	r2, r4
 8006a3c:	210a      	movs	r1, #10
 8006a3e:	4628      	mov	r0, r5
 8006a40:	f000 f87f 	bl	8006b42 <__swbuf_r>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d0d7      	beq.n	80069f8 <_puts_r+0x38>
 8006a48:	250a      	movs	r5, #10
 8006a4a:	e7d7      	b.n	80069fc <_puts_r+0x3c>
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4628      	mov	r0, r5
 8006a50:	f000 f877 	bl	8006b42 <__swbuf_r>
 8006a54:	3001      	adds	r0, #1
 8006a56:	d1e7      	bne.n	8006a28 <_puts_r+0x68>
 8006a58:	e7ce      	b.n	80069f8 <_puts_r+0x38>
 8006a5a:	3e01      	subs	r6, #1
 8006a5c:	e7e4      	b.n	8006a28 <_puts_r+0x68>
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	1c5a      	adds	r2, r3, #1
 8006a62:	6022      	str	r2, [r4, #0]
 8006a64:	220a      	movs	r2, #10
 8006a66:	701a      	strb	r2, [r3, #0]
 8006a68:	e7ee      	b.n	8006a48 <_puts_r+0x88>
	...

08006a6c <puts>:
 8006a6c:	4b02      	ldr	r3, [pc, #8]	@ (8006a78 <puts+0xc>)
 8006a6e:	4601      	mov	r1, r0
 8006a70:	6818      	ldr	r0, [r3, #0]
 8006a72:	f7ff bfa5 	b.w	80069c0 <_puts_r>
 8006a76:	bf00      	nop
 8006a78:	20000e30 	.word	0x20000e30

08006a7c <siprintf>:
 8006a7c:	b40e      	push	{r1, r2, r3}
 8006a7e:	b500      	push	{lr}
 8006a80:	b09c      	sub	sp, #112	@ 0x70
 8006a82:	ab1d      	add	r3, sp, #116	@ 0x74
 8006a84:	9002      	str	r0, [sp, #8]
 8006a86:	9006      	str	r0, [sp, #24]
 8006a88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006a8c:	4809      	ldr	r0, [pc, #36]	@ (8006ab4 <siprintf+0x38>)
 8006a8e:	9107      	str	r1, [sp, #28]
 8006a90:	9104      	str	r1, [sp, #16]
 8006a92:	4909      	ldr	r1, [pc, #36]	@ (8006ab8 <siprintf+0x3c>)
 8006a94:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a98:	9105      	str	r1, [sp, #20]
 8006a9a:	6800      	ldr	r0, [r0, #0]
 8006a9c:	9301      	str	r3, [sp, #4]
 8006a9e:	a902      	add	r1, sp, #8
 8006aa0:	f000 fac2 	bl	8007028 <_svfiprintf_r>
 8006aa4:	9b02      	ldr	r3, [sp, #8]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	701a      	strb	r2, [r3, #0]
 8006aaa:	b01c      	add	sp, #112	@ 0x70
 8006aac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006ab0:	b003      	add	sp, #12
 8006ab2:	4770      	bx	lr
 8006ab4:	20000e30 	.word	0x20000e30
 8006ab8:	ffff0208 	.word	0xffff0208

08006abc <__sread>:
 8006abc:	b510      	push	{r4, lr}
 8006abe:	460c      	mov	r4, r1
 8006ac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ac4:	f000 f8fc 	bl	8006cc0 <_read_r>
 8006ac8:	2800      	cmp	r0, #0
 8006aca:	bfab      	itete	ge
 8006acc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ace:	89a3      	ldrhlt	r3, [r4, #12]
 8006ad0:	181b      	addge	r3, r3, r0
 8006ad2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ad6:	bfac      	ite	ge
 8006ad8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ada:	81a3      	strhlt	r3, [r4, #12]
 8006adc:	bd10      	pop	{r4, pc}

08006ade <__swrite>:
 8006ade:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ae2:	461f      	mov	r7, r3
 8006ae4:	898b      	ldrh	r3, [r1, #12]
 8006ae6:	05db      	lsls	r3, r3, #23
 8006ae8:	4605      	mov	r5, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	4616      	mov	r6, r2
 8006aee:	d505      	bpl.n	8006afc <__swrite+0x1e>
 8006af0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af4:	2302      	movs	r3, #2
 8006af6:	2200      	movs	r2, #0
 8006af8:	f000 f8d0 	bl	8006c9c <_lseek_r>
 8006afc:	89a3      	ldrh	r3, [r4, #12]
 8006afe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006b06:	81a3      	strh	r3, [r4, #12]
 8006b08:	4632      	mov	r2, r6
 8006b0a:	463b      	mov	r3, r7
 8006b0c:	4628      	mov	r0, r5
 8006b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006b12:	f000 b8e7 	b.w	8006ce4 <_write_r>

08006b16 <__sseek>:
 8006b16:	b510      	push	{r4, lr}
 8006b18:	460c      	mov	r4, r1
 8006b1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b1e:	f000 f8bd 	bl	8006c9c <_lseek_r>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	89a3      	ldrh	r3, [r4, #12]
 8006b26:	bf15      	itete	ne
 8006b28:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006b2a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006b2e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006b32:	81a3      	strheq	r3, [r4, #12]
 8006b34:	bf18      	it	ne
 8006b36:	81a3      	strhne	r3, [r4, #12]
 8006b38:	bd10      	pop	{r4, pc}

08006b3a <__sclose>:
 8006b3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b3e:	f000 b89d 	b.w	8006c7c <_close_r>

08006b42 <__swbuf_r>:
 8006b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b44:	460e      	mov	r6, r1
 8006b46:	4614      	mov	r4, r2
 8006b48:	4605      	mov	r5, r0
 8006b4a:	b118      	cbz	r0, 8006b54 <__swbuf_r+0x12>
 8006b4c:	6a03      	ldr	r3, [r0, #32]
 8006b4e:	b90b      	cbnz	r3, 8006b54 <__swbuf_r+0x12>
 8006b50:	f7ff feee 	bl	8006930 <__sinit>
 8006b54:	69a3      	ldr	r3, [r4, #24]
 8006b56:	60a3      	str	r3, [r4, #8]
 8006b58:	89a3      	ldrh	r3, [r4, #12]
 8006b5a:	071a      	lsls	r2, r3, #28
 8006b5c:	d501      	bpl.n	8006b62 <__swbuf_r+0x20>
 8006b5e:	6923      	ldr	r3, [r4, #16]
 8006b60:	b943      	cbnz	r3, 8006b74 <__swbuf_r+0x32>
 8006b62:	4621      	mov	r1, r4
 8006b64:	4628      	mov	r0, r5
 8006b66:	f000 f82b 	bl	8006bc0 <__swsetup_r>
 8006b6a:	b118      	cbz	r0, 8006b74 <__swbuf_r+0x32>
 8006b6c:	f04f 37ff 	mov.w	r7, #4294967295
 8006b70:	4638      	mov	r0, r7
 8006b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b74:	6823      	ldr	r3, [r4, #0]
 8006b76:	6922      	ldr	r2, [r4, #16]
 8006b78:	1a98      	subs	r0, r3, r2
 8006b7a:	6963      	ldr	r3, [r4, #20]
 8006b7c:	b2f6      	uxtb	r6, r6
 8006b7e:	4283      	cmp	r3, r0
 8006b80:	4637      	mov	r7, r6
 8006b82:	dc05      	bgt.n	8006b90 <__swbuf_r+0x4e>
 8006b84:	4621      	mov	r1, r4
 8006b86:	4628      	mov	r0, r5
 8006b88:	f000 fe9e 	bl	80078c8 <_fflush_r>
 8006b8c:	2800      	cmp	r0, #0
 8006b8e:	d1ed      	bne.n	8006b6c <__swbuf_r+0x2a>
 8006b90:	68a3      	ldr	r3, [r4, #8]
 8006b92:	3b01      	subs	r3, #1
 8006b94:	60a3      	str	r3, [r4, #8]
 8006b96:	6823      	ldr	r3, [r4, #0]
 8006b98:	1c5a      	adds	r2, r3, #1
 8006b9a:	6022      	str	r2, [r4, #0]
 8006b9c:	701e      	strb	r6, [r3, #0]
 8006b9e:	6962      	ldr	r2, [r4, #20]
 8006ba0:	1c43      	adds	r3, r0, #1
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d004      	beq.n	8006bb0 <__swbuf_r+0x6e>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	07db      	lsls	r3, r3, #31
 8006baa:	d5e1      	bpl.n	8006b70 <__swbuf_r+0x2e>
 8006bac:	2e0a      	cmp	r6, #10
 8006bae:	d1df      	bne.n	8006b70 <__swbuf_r+0x2e>
 8006bb0:	4621      	mov	r1, r4
 8006bb2:	4628      	mov	r0, r5
 8006bb4:	f000 fe88 	bl	80078c8 <_fflush_r>
 8006bb8:	2800      	cmp	r0, #0
 8006bba:	d0d9      	beq.n	8006b70 <__swbuf_r+0x2e>
 8006bbc:	e7d6      	b.n	8006b6c <__swbuf_r+0x2a>
	...

08006bc0 <__swsetup_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4b29      	ldr	r3, [pc, #164]	@ (8006c68 <__swsetup_r+0xa8>)
 8006bc4:	4605      	mov	r5, r0
 8006bc6:	6818      	ldr	r0, [r3, #0]
 8006bc8:	460c      	mov	r4, r1
 8006bca:	b118      	cbz	r0, 8006bd4 <__swsetup_r+0x14>
 8006bcc:	6a03      	ldr	r3, [r0, #32]
 8006bce:	b90b      	cbnz	r3, 8006bd4 <__swsetup_r+0x14>
 8006bd0:	f7ff feae 	bl	8006930 <__sinit>
 8006bd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bd8:	0719      	lsls	r1, r3, #28
 8006bda:	d422      	bmi.n	8006c22 <__swsetup_r+0x62>
 8006bdc:	06da      	lsls	r2, r3, #27
 8006bde:	d407      	bmi.n	8006bf0 <__swsetup_r+0x30>
 8006be0:	2209      	movs	r2, #9
 8006be2:	602a      	str	r2, [r5, #0]
 8006be4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be8:	81a3      	strh	r3, [r4, #12]
 8006bea:	f04f 30ff 	mov.w	r0, #4294967295
 8006bee:	e033      	b.n	8006c58 <__swsetup_r+0x98>
 8006bf0:	0758      	lsls	r0, r3, #29
 8006bf2:	d512      	bpl.n	8006c1a <__swsetup_r+0x5a>
 8006bf4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006bf6:	b141      	cbz	r1, 8006c0a <__swsetup_r+0x4a>
 8006bf8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	d002      	beq.n	8006c06 <__swsetup_r+0x46>
 8006c00:	4628      	mov	r0, r5
 8006c02:	f000 f8bd 	bl	8006d80 <_free_r>
 8006c06:	2300      	movs	r3, #0
 8006c08:	6363      	str	r3, [r4, #52]	@ 0x34
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006c10:	81a3      	strh	r3, [r4, #12]
 8006c12:	2300      	movs	r3, #0
 8006c14:	6063      	str	r3, [r4, #4]
 8006c16:	6923      	ldr	r3, [r4, #16]
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	89a3      	ldrh	r3, [r4, #12]
 8006c1c:	f043 0308 	orr.w	r3, r3, #8
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	6923      	ldr	r3, [r4, #16]
 8006c24:	b94b      	cbnz	r3, 8006c3a <__swsetup_r+0x7a>
 8006c26:	89a3      	ldrh	r3, [r4, #12]
 8006c28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006c2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c30:	d003      	beq.n	8006c3a <__swsetup_r+0x7a>
 8006c32:	4621      	mov	r1, r4
 8006c34:	4628      	mov	r0, r5
 8006c36:	f000 fe95 	bl	8007964 <__smakebuf_r>
 8006c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c3e:	f013 0201 	ands.w	r2, r3, #1
 8006c42:	d00a      	beq.n	8006c5a <__swsetup_r+0x9a>
 8006c44:	2200      	movs	r2, #0
 8006c46:	60a2      	str	r2, [r4, #8]
 8006c48:	6962      	ldr	r2, [r4, #20]
 8006c4a:	4252      	negs	r2, r2
 8006c4c:	61a2      	str	r2, [r4, #24]
 8006c4e:	6922      	ldr	r2, [r4, #16]
 8006c50:	b942      	cbnz	r2, 8006c64 <__swsetup_r+0xa4>
 8006c52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006c56:	d1c5      	bne.n	8006be4 <__swsetup_r+0x24>
 8006c58:	bd38      	pop	{r3, r4, r5, pc}
 8006c5a:	0799      	lsls	r1, r3, #30
 8006c5c:	bf58      	it	pl
 8006c5e:	6962      	ldrpl	r2, [r4, #20]
 8006c60:	60a2      	str	r2, [r4, #8]
 8006c62:	e7f4      	b.n	8006c4e <__swsetup_r+0x8e>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e7f7      	b.n	8006c58 <__swsetup_r+0x98>
 8006c68:	20000e30 	.word	0x20000e30

08006c6c <memset>:
 8006c6c:	4402      	add	r2, r0
 8006c6e:	4603      	mov	r3, r0
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d100      	bne.n	8006c76 <memset+0xa>
 8006c74:	4770      	bx	lr
 8006c76:	f803 1b01 	strb.w	r1, [r3], #1
 8006c7a:	e7f9      	b.n	8006c70 <memset+0x4>

08006c7c <_close_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d06      	ldr	r5, [pc, #24]	@ (8006c98 <_close_r+0x1c>)
 8006c80:	2300      	movs	r3, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	f7ff fc02 	bl	8006490 <_close>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_close_r+0x1a>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_close_r+0x1a>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200274a8 	.word	0x200274a8

08006c9c <_lseek_r>:
 8006c9c:	b538      	push	{r3, r4, r5, lr}
 8006c9e:	4d07      	ldr	r5, [pc, #28]	@ (8006cbc <_lseek_r+0x20>)
 8006ca0:	4604      	mov	r4, r0
 8006ca2:	4608      	mov	r0, r1
 8006ca4:	4611      	mov	r1, r2
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	602a      	str	r2, [r5, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	f7ff fbb1 	bl	8006412 <_lseek>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d102      	bne.n	8006cba <_lseek_r+0x1e>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	b103      	cbz	r3, 8006cba <_lseek_r+0x1e>
 8006cb8:	6023      	str	r3, [r4, #0]
 8006cba:	bd38      	pop	{r3, r4, r5, pc}
 8006cbc:	200274a8 	.word	0x200274a8

08006cc0 <_read_r>:
 8006cc0:	b538      	push	{r3, r4, r5, lr}
 8006cc2:	4d07      	ldr	r5, [pc, #28]	@ (8006ce0 <_read_r+0x20>)
 8006cc4:	4604      	mov	r4, r0
 8006cc6:	4608      	mov	r0, r1
 8006cc8:	4611      	mov	r1, r2
 8006cca:	2200      	movs	r2, #0
 8006ccc:	602a      	str	r2, [r5, #0]
 8006cce:	461a      	mov	r2, r3
 8006cd0:	f7ff fb49 	bl	8006366 <_read>
 8006cd4:	1c43      	adds	r3, r0, #1
 8006cd6:	d102      	bne.n	8006cde <_read_r+0x1e>
 8006cd8:	682b      	ldr	r3, [r5, #0]
 8006cda:	b103      	cbz	r3, 8006cde <_read_r+0x1e>
 8006cdc:	6023      	str	r3, [r4, #0]
 8006cde:	bd38      	pop	{r3, r4, r5, pc}
 8006ce0:	200274a8 	.word	0x200274a8

08006ce4 <_write_r>:
 8006ce4:	b538      	push	{r3, r4, r5, lr}
 8006ce6:	4d07      	ldr	r5, [pc, #28]	@ (8006d04 <_write_r+0x20>)
 8006ce8:	4604      	mov	r4, r0
 8006cea:	4608      	mov	r0, r1
 8006cec:	4611      	mov	r1, r2
 8006cee:	2200      	movs	r2, #0
 8006cf0:	602a      	str	r2, [r5, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f7ff fb9f 	bl	8006436 <_write>
 8006cf8:	1c43      	adds	r3, r0, #1
 8006cfa:	d102      	bne.n	8006d02 <_write_r+0x1e>
 8006cfc:	682b      	ldr	r3, [r5, #0]
 8006cfe:	b103      	cbz	r3, 8006d02 <_write_r+0x1e>
 8006d00:	6023      	str	r3, [r4, #0]
 8006d02:	bd38      	pop	{r3, r4, r5, pc}
 8006d04:	200274a8 	.word	0x200274a8

08006d08 <__errno>:
 8006d08:	4b01      	ldr	r3, [pc, #4]	@ (8006d10 <__errno+0x8>)
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	20000e30 	.word	0x20000e30

08006d14 <__libc_init_array>:
 8006d14:	b570      	push	{r4, r5, r6, lr}
 8006d16:	4d0d      	ldr	r5, [pc, #52]	@ (8006d4c <__libc_init_array+0x38>)
 8006d18:	4c0d      	ldr	r4, [pc, #52]	@ (8006d50 <__libc_init_array+0x3c>)
 8006d1a:	1b64      	subs	r4, r4, r5
 8006d1c:	10a4      	asrs	r4, r4, #2
 8006d1e:	2600      	movs	r6, #0
 8006d20:	42a6      	cmp	r6, r4
 8006d22:	d109      	bne.n	8006d38 <__libc_init_array+0x24>
 8006d24:	4d0b      	ldr	r5, [pc, #44]	@ (8006d54 <__libc_init_array+0x40>)
 8006d26:	4c0c      	ldr	r4, [pc, #48]	@ (8006d58 <__libc_init_array+0x44>)
 8006d28:	f000 feda 	bl	8007ae0 <_init>
 8006d2c:	1b64      	subs	r4, r4, r5
 8006d2e:	10a4      	asrs	r4, r4, #2
 8006d30:	2600      	movs	r6, #0
 8006d32:	42a6      	cmp	r6, r4
 8006d34:	d105      	bne.n	8006d42 <__libc_init_array+0x2e>
 8006d36:	bd70      	pop	{r4, r5, r6, pc}
 8006d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d3c:	4798      	blx	r3
 8006d3e:	3601      	adds	r6, #1
 8006d40:	e7ee      	b.n	8006d20 <__libc_init_array+0xc>
 8006d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d46:	4798      	blx	r3
 8006d48:	3601      	adds	r6, #1
 8006d4a:	e7f2      	b.n	8006d32 <__libc_init_array+0x1e>
 8006d4c:	08008d84 	.word	0x08008d84
 8006d50:	08008d84 	.word	0x08008d84
 8006d54:	08008d84 	.word	0x08008d84
 8006d58:	08008d88 	.word	0x08008d88

08006d5c <__retarget_lock_init_recursive>:
 8006d5c:	4770      	bx	lr

08006d5e <__retarget_lock_acquire_recursive>:
 8006d5e:	4770      	bx	lr

08006d60 <__retarget_lock_release_recursive>:
 8006d60:	4770      	bx	lr

08006d62 <memcpy>:
 8006d62:	440a      	add	r2, r1
 8006d64:	4291      	cmp	r1, r2
 8006d66:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d6a:	d100      	bne.n	8006d6e <memcpy+0xc>
 8006d6c:	4770      	bx	lr
 8006d6e:	b510      	push	{r4, lr}
 8006d70:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d74:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d78:	4291      	cmp	r1, r2
 8006d7a:	d1f9      	bne.n	8006d70 <memcpy+0xe>
 8006d7c:	bd10      	pop	{r4, pc}
	...

08006d80 <_free_r>:
 8006d80:	b538      	push	{r3, r4, r5, lr}
 8006d82:	4605      	mov	r5, r0
 8006d84:	2900      	cmp	r1, #0
 8006d86:	d041      	beq.n	8006e0c <_free_r+0x8c>
 8006d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d8c:	1f0c      	subs	r4, r1, #4
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	bfb8      	it	lt
 8006d92:	18e4      	addlt	r4, r4, r3
 8006d94:	f000 f8e0 	bl	8006f58 <__malloc_lock>
 8006d98:	4a1d      	ldr	r2, [pc, #116]	@ (8006e10 <_free_r+0x90>)
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	b933      	cbnz	r3, 8006dac <_free_r+0x2c>
 8006d9e:	6063      	str	r3, [r4, #4]
 8006da0:	6014      	str	r4, [r2, #0]
 8006da2:	4628      	mov	r0, r5
 8006da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006da8:	f000 b8dc 	b.w	8006f64 <__malloc_unlock>
 8006dac:	42a3      	cmp	r3, r4
 8006dae:	d908      	bls.n	8006dc2 <_free_r+0x42>
 8006db0:	6820      	ldr	r0, [r4, #0]
 8006db2:	1821      	adds	r1, r4, r0
 8006db4:	428b      	cmp	r3, r1
 8006db6:	bf01      	itttt	eq
 8006db8:	6819      	ldreq	r1, [r3, #0]
 8006dba:	685b      	ldreq	r3, [r3, #4]
 8006dbc:	1809      	addeq	r1, r1, r0
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	e7ed      	b.n	8006d9e <_free_r+0x1e>
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	b10b      	cbz	r3, 8006dcc <_free_r+0x4c>
 8006dc8:	42a3      	cmp	r3, r4
 8006dca:	d9fa      	bls.n	8006dc2 <_free_r+0x42>
 8006dcc:	6811      	ldr	r1, [r2, #0]
 8006dce:	1850      	adds	r0, r2, r1
 8006dd0:	42a0      	cmp	r0, r4
 8006dd2:	d10b      	bne.n	8006dec <_free_r+0x6c>
 8006dd4:	6820      	ldr	r0, [r4, #0]
 8006dd6:	4401      	add	r1, r0
 8006dd8:	1850      	adds	r0, r2, r1
 8006dda:	4283      	cmp	r3, r0
 8006ddc:	6011      	str	r1, [r2, #0]
 8006dde:	d1e0      	bne.n	8006da2 <_free_r+0x22>
 8006de0:	6818      	ldr	r0, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	6053      	str	r3, [r2, #4]
 8006de6:	4408      	add	r0, r1
 8006de8:	6010      	str	r0, [r2, #0]
 8006dea:	e7da      	b.n	8006da2 <_free_r+0x22>
 8006dec:	d902      	bls.n	8006df4 <_free_r+0x74>
 8006dee:	230c      	movs	r3, #12
 8006df0:	602b      	str	r3, [r5, #0]
 8006df2:	e7d6      	b.n	8006da2 <_free_r+0x22>
 8006df4:	6820      	ldr	r0, [r4, #0]
 8006df6:	1821      	adds	r1, r4, r0
 8006df8:	428b      	cmp	r3, r1
 8006dfa:	bf04      	itt	eq
 8006dfc:	6819      	ldreq	r1, [r3, #0]
 8006dfe:	685b      	ldreq	r3, [r3, #4]
 8006e00:	6063      	str	r3, [r4, #4]
 8006e02:	bf04      	itt	eq
 8006e04:	1809      	addeq	r1, r1, r0
 8006e06:	6021      	streq	r1, [r4, #0]
 8006e08:	6054      	str	r4, [r2, #4]
 8006e0a:	e7ca      	b.n	8006da2 <_free_r+0x22>
 8006e0c:	bd38      	pop	{r3, r4, r5, pc}
 8006e0e:	bf00      	nop
 8006e10:	200274b4 	.word	0x200274b4

08006e14 <sbrk_aligned>:
 8006e14:	b570      	push	{r4, r5, r6, lr}
 8006e16:	4e0f      	ldr	r6, [pc, #60]	@ (8006e54 <sbrk_aligned+0x40>)
 8006e18:	460c      	mov	r4, r1
 8006e1a:	6831      	ldr	r1, [r6, #0]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	b911      	cbnz	r1, 8006e26 <sbrk_aligned+0x12>
 8006e20:	f000 fe18 	bl	8007a54 <_sbrk_r>
 8006e24:	6030      	str	r0, [r6, #0]
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 fe13 	bl	8007a54 <_sbrk_r>
 8006e2e:	1c43      	adds	r3, r0, #1
 8006e30:	d103      	bne.n	8006e3a <sbrk_aligned+0x26>
 8006e32:	f04f 34ff 	mov.w	r4, #4294967295
 8006e36:	4620      	mov	r0, r4
 8006e38:	bd70      	pop	{r4, r5, r6, pc}
 8006e3a:	1cc4      	adds	r4, r0, #3
 8006e3c:	f024 0403 	bic.w	r4, r4, #3
 8006e40:	42a0      	cmp	r0, r4
 8006e42:	d0f8      	beq.n	8006e36 <sbrk_aligned+0x22>
 8006e44:	1a21      	subs	r1, r4, r0
 8006e46:	4628      	mov	r0, r5
 8006e48:	f000 fe04 	bl	8007a54 <_sbrk_r>
 8006e4c:	3001      	adds	r0, #1
 8006e4e:	d1f2      	bne.n	8006e36 <sbrk_aligned+0x22>
 8006e50:	e7ef      	b.n	8006e32 <sbrk_aligned+0x1e>
 8006e52:	bf00      	nop
 8006e54:	200274b0 	.word	0x200274b0

08006e58 <_malloc_r>:
 8006e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e5c:	1ccd      	adds	r5, r1, #3
 8006e5e:	f025 0503 	bic.w	r5, r5, #3
 8006e62:	3508      	adds	r5, #8
 8006e64:	2d0c      	cmp	r5, #12
 8006e66:	bf38      	it	cc
 8006e68:	250c      	movcc	r5, #12
 8006e6a:	2d00      	cmp	r5, #0
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	db01      	blt.n	8006e74 <_malloc_r+0x1c>
 8006e70:	42a9      	cmp	r1, r5
 8006e72:	d904      	bls.n	8006e7e <_malloc_r+0x26>
 8006e74:	230c      	movs	r3, #12
 8006e76:	6033      	str	r3, [r6, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006f54 <_malloc_r+0xfc>
 8006e82:	f000 f869 	bl	8006f58 <__malloc_lock>
 8006e86:	f8d8 3000 	ldr.w	r3, [r8]
 8006e8a:	461c      	mov	r4, r3
 8006e8c:	bb44      	cbnz	r4, 8006ee0 <_malloc_r+0x88>
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4630      	mov	r0, r6
 8006e92:	f7ff ffbf 	bl	8006e14 <sbrk_aligned>
 8006e96:	1c43      	adds	r3, r0, #1
 8006e98:	4604      	mov	r4, r0
 8006e9a:	d158      	bne.n	8006f4e <_malloc_r+0xf6>
 8006e9c:	f8d8 4000 	ldr.w	r4, [r8]
 8006ea0:	4627      	mov	r7, r4
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d143      	bne.n	8006f2e <_malloc_r+0xd6>
 8006ea6:	2c00      	cmp	r4, #0
 8006ea8:	d04b      	beq.n	8006f42 <_malloc_r+0xea>
 8006eaa:	6823      	ldr	r3, [r4, #0]
 8006eac:	4639      	mov	r1, r7
 8006eae:	4630      	mov	r0, r6
 8006eb0:	eb04 0903 	add.w	r9, r4, r3
 8006eb4:	f000 fdce 	bl	8007a54 <_sbrk_r>
 8006eb8:	4581      	cmp	r9, r0
 8006eba:	d142      	bne.n	8006f42 <_malloc_r+0xea>
 8006ebc:	6821      	ldr	r1, [r4, #0]
 8006ebe:	1a6d      	subs	r5, r5, r1
 8006ec0:	4629      	mov	r1, r5
 8006ec2:	4630      	mov	r0, r6
 8006ec4:	f7ff ffa6 	bl	8006e14 <sbrk_aligned>
 8006ec8:	3001      	adds	r0, #1
 8006eca:	d03a      	beq.n	8006f42 <_malloc_r+0xea>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	442b      	add	r3, r5
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	f8d8 3000 	ldr.w	r3, [r8]
 8006ed6:	685a      	ldr	r2, [r3, #4]
 8006ed8:	bb62      	cbnz	r2, 8006f34 <_malloc_r+0xdc>
 8006eda:	f8c8 7000 	str.w	r7, [r8]
 8006ede:	e00f      	b.n	8006f00 <_malloc_r+0xa8>
 8006ee0:	6822      	ldr	r2, [r4, #0]
 8006ee2:	1b52      	subs	r2, r2, r5
 8006ee4:	d420      	bmi.n	8006f28 <_malloc_r+0xd0>
 8006ee6:	2a0b      	cmp	r2, #11
 8006ee8:	d917      	bls.n	8006f1a <_malloc_r+0xc2>
 8006eea:	1961      	adds	r1, r4, r5
 8006eec:	42a3      	cmp	r3, r4
 8006eee:	6025      	str	r5, [r4, #0]
 8006ef0:	bf18      	it	ne
 8006ef2:	6059      	strne	r1, [r3, #4]
 8006ef4:	6863      	ldr	r3, [r4, #4]
 8006ef6:	bf08      	it	eq
 8006ef8:	f8c8 1000 	streq.w	r1, [r8]
 8006efc:	5162      	str	r2, [r4, r5]
 8006efe:	604b      	str	r3, [r1, #4]
 8006f00:	4630      	mov	r0, r6
 8006f02:	f000 f82f 	bl	8006f64 <__malloc_unlock>
 8006f06:	f104 000b 	add.w	r0, r4, #11
 8006f0a:	1d23      	adds	r3, r4, #4
 8006f0c:	f020 0007 	bic.w	r0, r0, #7
 8006f10:	1ac2      	subs	r2, r0, r3
 8006f12:	bf1c      	itt	ne
 8006f14:	1a1b      	subne	r3, r3, r0
 8006f16:	50a3      	strne	r3, [r4, r2]
 8006f18:	e7af      	b.n	8006e7a <_malloc_r+0x22>
 8006f1a:	6862      	ldr	r2, [r4, #4]
 8006f1c:	42a3      	cmp	r3, r4
 8006f1e:	bf0c      	ite	eq
 8006f20:	f8c8 2000 	streq.w	r2, [r8]
 8006f24:	605a      	strne	r2, [r3, #4]
 8006f26:	e7eb      	b.n	8006f00 <_malloc_r+0xa8>
 8006f28:	4623      	mov	r3, r4
 8006f2a:	6864      	ldr	r4, [r4, #4]
 8006f2c:	e7ae      	b.n	8006e8c <_malloc_r+0x34>
 8006f2e:	463c      	mov	r4, r7
 8006f30:	687f      	ldr	r7, [r7, #4]
 8006f32:	e7b6      	b.n	8006ea2 <_malloc_r+0x4a>
 8006f34:	461a      	mov	r2, r3
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	42a3      	cmp	r3, r4
 8006f3a:	d1fb      	bne.n	8006f34 <_malloc_r+0xdc>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	6053      	str	r3, [r2, #4]
 8006f40:	e7de      	b.n	8006f00 <_malloc_r+0xa8>
 8006f42:	230c      	movs	r3, #12
 8006f44:	6033      	str	r3, [r6, #0]
 8006f46:	4630      	mov	r0, r6
 8006f48:	f000 f80c 	bl	8006f64 <__malloc_unlock>
 8006f4c:	e794      	b.n	8006e78 <_malloc_r+0x20>
 8006f4e:	6005      	str	r5, [r0, #0]
 8006f50:	e7d6      	b.n	8006f00 <_malloc_r+0xa8>
 8006f52:	bf00      	nop
 8006f54:	200274b4 	.word	0x200274b4

08006f58 <__malloc_lock>:
 8006f58:	4801      	ldr	r0, [pc, #4]	@ (8006f60 <__malloc_lock+0x8>)
 8006f5a:	f7ff bf00 	b.w	8006d5e <__retarget_lock_acquire_recursive>
 8006f5e:	bf00      	nop
 8006f60:	200274ac 	.word	0x200274ac

08006f64 <__malloc_unlock>:
 8006f64:	4801      	ldr	r0, [pc, #4]	@ (8006f6c <__malloc_unlock+0x8>)
 8006f66:	f7ff befb 	b.w	8006d60 <__retarget_lock_release_recursive>
 8006f6a:	bf00      	nop
 8006f6c:	200274ac 	.word	0x200274ac

08006f70 <__ssputs_r>:
 8006f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f74:	688e      	ldr	r6, [r1, #8]
 8006f76:	461f      	mov	r7, r3
 8006f78:	42be      	cmp	r6, r7
 8006f7a:	680b      	ldr	r3, [r1, #0]
 8006f7c:	4682      	mov	sl, r0
 8006f7e:	460c      	mov	r4, r1
 8006f80:	4690      	mov	r8, r2
 8006f82:	d82d      	bhi.n	8006fe0 <__ssputs_r+0x70>
 8006f84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006f8c:	d026      	beq.n	8006fdc <__ssputs_r+0x6c>
 8006f8e:	6965      	ldr	r5, [r4, #20]
 8006f90:	6909      	ldr	r1, [r1, #16]
 8006f92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f96:	eba3 0901 	sub.w	r9, r3, r1
 8006f9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f9e:	1c7b      	adds	r3, r7, #1
 8006fa0:	444b      	add	r3, r9
 8006fa2:	106d      	asrs	r5, r5, #1
 8006fa4:	429d      	cmp	r5, r3
 8006fa6:	bf38      	it	cc
 8006fa8:	461d      	movcc	r5, r3
 8006faa:	0553      	lsls	r3, r2, #21
 8006fac:	d527      	bpl.n	8006ffe <__ssputs_r+0x8e>
 8006fae:	4629      	mov	r1, r5
 8006fb0:	f7ff ff52 	bl	8006e58 <_malloc_r>
 8006fb4:	4606      	mov	r6, r0
 8006fb6:	b360      	cbz	r0, 8007012 <__ssputs_r+0xa2>
 8006fb8:	6921      	ldr	r1, [r4, #16]
 8006fba:	464a      	mov	r2, r9
 8006fbc:	f7ff fed1 	bl	8006d62 <memcpy>
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006fc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006fca:	81a3      	strh	r3, [r4, #12]
 8006fcc:	6126      	str	r6, [r4, #16]
 8006fce:	6165      	str	r5, [r4, #20]
 8006fd0:	444e      	add	r6, r9
 8006fd2:	eba5 0509 	sub.w	r5, r5, r9
 8006fd6:	6026      	str	r6, [r4, #0]
 8006fd8:	60a5      	str	r5, [r4, #8]
 8006fda:	463e      	mov	r6, r7
 8006fdc:	42be      	cmp	r6, r7
 8006fde:	d900      	bls.n	8006fe2 <__ssputs_r+0x72>
 8006fe0:	463e      	mov	r6, r7
 8006fe2:	6820      	ldr	r0, [r4, #0]
 8006fe4:	4632      	mov	r2, r6
 8006fe6:	4641      	mov	r1, r8
 8006fe8:	f000 fcf8 	bl	80079dc <memmove>
 8006fec:	68a3      	ldr	r3, [r4, #8]
 8006fee:	1b9b      	subs	r3, r3, r6
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6823      	ldr	r3, [r4, #0]
 8006ff4:	4433      	add	r3, r6
 8006ff6:	6023      	str	r3, [r4, #0]
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ffe:	462a      	mov	r2, r5
 8007000:	f000 fd38 	bl	8007a74 <_realloc_r>
 8007004:	4606      	mov	r6, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d1e0      	bne.n	8006fcc <__ssputs_r+0x5c>
 800700a:	6921      	ldr	r1, [r4, #16]
 800700c:	4650      	mov	r0, sl
 800700e:	f7ff feb7 	bl	8006d80 <_free_r>
 8007012:	230c      	movs	r3, #12
 8007014:	f8ca 3000 	str.w	r3, [sl]
 8007018:	89a3      	ldrh	r3, [r4, #12]
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e7e9      	b.n	8006ffa <__ssputs_r+0x8a>
	...

08007028 <_svfiprintf_r>:
 8007028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702c:	4698      	mov	r8, r3
 800702e:	898b      	ldrh	r3, [r1, #12]
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	b09d      	sub	sp, #116	@ 0x74
 8007034:	4607      	mov	r7, r0
 8007036:	460d      	mov	r5, r1
 8007038:	4614      	mov	r4, r2
 800703a:	d510      	bpl.n	800705e <_svfiprintf_r+0x36>
 800703c:	690b      	ldr	r3, [r1, #16]
 800703e:	b973      	cbnz	r3, 800705e <_svfiprintf_r+0x36>
 8007040:	2140      	movs	r1, #64	@ 0x40
 8007042:	f7ff ff09 	bl	8006e58 <_malloc_r>
 8007046:	6028      	str	r0, [r5, #0]
 8007048:	6128      	str	r0, [r5, #16]
 800704a:	b930      	cbnz	r0, 800705a <_svfiprintf_r+0x32>
 800704c:	230c      	movs	r3, #12
 800704e:	603b      	str	r3, [r7, #0]
 8007050:	f04f 30ff 	mov.w	r0, #4294967295
 8007054:	b01d      	add	sp, #116	@ 0x74
 8007056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800705a:	2340      	movs	r3, #64	@ 0x40
 800705c:	616b      	str	r3, [r5, #20]
 800705e:	2300      	movs	r3, #0
 8007060:	9309      	str	r3, [sp, #36]	@ 0x24
 8007062:	2320      	movs	r3, #32
 8007064:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007068:	f8cd 800c 	str.w	r8, [sp, #12]
 800706c:	2330      	movs	r3, #48	@ 0x30
 800706e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800720c <_svfiprintf_r+0x1e4>
 8007072:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007076:	f04f 0901 	mov.w	r9, #1
 800707a:	4623      	mov	r3, r4
 800707c:	469a      	mov	sl, r3
 800707e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007082:	b10a      	cbz	r2, 8007088 <_svfiprintf_r+0x60>
 8007084:	2a25      	cmp	r2, #37	@ 0x25
 8007086:	d1f9      	bne.n	800707c <_svfiprintf_r+0x54>
 8007088:	ebba 0b04 	subs.w	fp, sl, r4
 800708c:	d00b      	beq.n	80070a6 <_svfiprintf_r+0x7e>
 800708e:	465b      	mov	r3, fp
 8007090:	4622      	mov	r2, r4
 8007092:	4629      	mov	r1, r5
 8007094:	4638      	mov	r0, r7
 8007096:	f7ff ff6b 	bl	8006f70 <__ssputs_r>
 800709a:	3001      	adds	r0, #1
 800709c:	f000 80a7 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80070a2:	445a      	add	r2, fp
 80070a4:	9209      	str	r2, [sp, #36]	@ 0x24
 80070a6:	f89a 3000 	ldrb.w	r3, [sl]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f000 809f 	beq.w	80071ee <_svfiprintf_r+0x1c6>
 80070b0:	2300      	movs	r3, #0
 80070b2:	f04f 32ff 	mov.w	r2, #4294967295
 80070b6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070ba:	f10a 0a01 	add.w	sl, sl, #1
 80070be:	9304      	str	r3, [sp, #16]
 80070c0:	9307      	str	r3, [sp, #28]
 80070c2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80070c6:	931a      	str	r3, [sp, #104]	@ 0x68
 80070c8:	4654      	mov	r4, sl
 80070ca:	2205      	movs	r2, #5
 80070cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d0:	484e      	ldr	r0, [pc, #312]	@ (800720c <_svfiprintf_r+0x1e4>)
 80070d2:	f7f9 f895 	bl	8000200 <memchr>
 80070d6:	9a04      	ldr	r2, [sp, #16]
 80070d8:	b9d8      	cbnz	r0, 8007112 <_svfiprintf_r+0xea>
 80070da:	06d0      	lsls	r0, r2, #27
 80070dc:	bf44      	itt	mi
 80070de:	2320      	movmi	r3, #32
 80070e0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070e4:	0711      	lsls	r1, r2, #28
 80070e6:	bf44      	itt	mi
 80070e8:	232b      	movmi	r3, #43	@ 0x2b
 80070ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80070ee:	f89a 3000 	ldrb.w	r3, [sl]
 80070f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80070f4:	d015      	beq.n	8007122 <_svfiprintf_r+0xfa>
 80070f6:	9a07      	ldr	r2, [sp, #28]
 80070f8:	4654      	mov	r4, sl
 80070fa:	2000      	movs	r0, #0
 80070fc:	f04f 0c0a 	mov.w	ip, #10
 8007100:	4621      	mov	r1, r4
 8007102:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007106:	3b30      	subs	r3, #48	@ 0x30
 8007108:	2b09      	cmp	r3, #9
 800710a:	d94b      	bls.n	80071a4 <_svfiprintf_r+0x17c>
 800710c:	b1b0      	cbz	r0, 800713c <_svfiprintf_r+0x114>
 800710e:	9207      	str	r2, [sp, #28]
 8007110:	e014      	b.n	800713c <_svfiprintf_r+0x114>
 8007112:	eba0 0308 	sub.w	r3, r0, r8
 8007116:	fa09 f303 	lsl.w	r3, r9, r3
 800711a:	4313      	orrs	r3, r2
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	46a2      	mov	sl, r4
 8007120:	e7d2      	b.n	80070c8 <_svfiprintf_r+0xa0>
 8007122:	9b03      	ldr	r3, [sp, #12]
 8007124:	1d19      	adds	r1, r3, #4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	9103      	str	r1, [sp, #12]
 800712a:	2b00      	cmp	r3, #0
 800712c:	bfbb      	ittet	lt
 800712e:	425b      	neglt	r3, r3
 8007130:	f042 0202 	orrlt.w	r2, r2, #2
 8007134:	9307      	strge	r3, [sp, #28]
 8007136:	9307      	strlt	r3, [sp, #28]
 8007138:	bfb8      	it	lt
 800713a:	9204      	strlt	r2, [sp, #16]
 800713c:	7823      	ldrb	r3, [r4, #0]
 800713e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007140:	d10a      	bne.n	8007158 <_svfiprintf_r+0x130>
 8007142:	7863      	ldrb	r3, [r4, #1]
 8007144:	2b2a      	cmp	r3, #42	@ 0x2a
 8007146:	d132      	bne.n	80071ae <_svfiprintf_r+0x186>
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	9203      	str	r2, [sp, #12]
 8007150:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007154:	3402      	adds	r4, #2
 8007156:	9305      	str	r3, [sp, #20]
 8007158:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800721c <_svfiprintf_r+0x1f4>
 800715c:	7821      	ldrb	r1, [r4, #0]
 800715e:	2203      	movs	r2, #3
 8007160:	4650      	mov	r0, sl
 8007162:	f7f9 f84d 	bl	8000200 <memchr>
 8007166:	b138      	cbz	r0, 8007178 <_svfiprintf_r+0x150>
 8007168:	9b04      	ldr	r3, [sp, #16]
 800716a:	eba0 000a 	sub.w	r0, r0, sl
 800716e:	2240      	movs	r2, #64	@ 0x40
 8007170:	4082      	lsls	r2, r0
 8007172:	4313      	orrs	r3, r2
 8007174:	3401      	adds	r4, #1
 8007176:	9304      	str	r3, [sp, #16]
 8007178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717c:	4824      	ldr	r0, [pc, #144]	@ (8007210 <_svfiprintf_r+0x1e8>)
 800717e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007182:	2206      	movs	r2, #6
 8007184:	f7f9 f83c 	bl	8000200 <memchr>
 8007188:	2800      	cmp	r0, #0
 800718a:	d036      	beq.n	80071fa <_svfiprintf_r+0x1d2>
 800718c:	4b21      	ldr	r3, [pc, #132]	@ (8007214 <_svfiprintf_r+0x1ec>)
 800718e:	bb1b      	cbnz	r3, 80071d8 <_svfiprintf_r+0x1b0>
 8007190:	9b03      	ldr	r3, [sp, #12]
 8007192:	3307      	adds	r3, #7
 8007194:	f023 0307 	bic.w	r3, r3, #7
 8007198:	3308      	adds	r3, #8
 800719a:	9303      	str	r3, [sp, #12]
 800719c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800719e:	4433      	add	r3, r6
 80071a0:	9309      	str	r3, [sp, #36]	@ 0x24
 80071a2:	e76a      	b.n	800707a <_svfiprintf_r+0x52>
 80071a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a8:	460c      	mov	r4, r1
 80071aa:	2001      	movs	r0, #1
 80071ac:	e7a8      	b.n	8007100 <_svfiprintf_r+0xd8>
 80071ae:	2300      	movs	r3, #0
 80071b0:	3401      	adds	r4, #1
 80071b2:	9305      	str	r3, [sp, #20]
 80071b4:	4619      	mov	r1, r3
 80071b6:	f04f 0c0a 	mov.w	ip, #10
 80071ba:	4620      	mov	r0, r4
 80071bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071c0:	3a30      	subs	r2, #48	@ 0x30
 80071c2:	2a09      	cmp	r2, #9
 80071c4:	d903      	bls.n	80071ce <_svfiprintf_r+0x1a6>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d0c6      	beq.n	8007158 <_svfiprintf_r+0x130>
 80071ca:	9105      	str	r1, [sp, #20]
 80071cc:	e7c4      	b.n	8007158 <_svfiprintf_r+0x130>
 80071ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d2:	4604      	mov	r4, r0
 80071d4:	2301      	movs	r3, #1
 80071d6:	e7f0      	b.n	80071ba <_svfiprintf_r+0x192>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b0e      	ldr	r3, [pc, #56]	@ (8007218 <_svfiprintf_r+0x1f0>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4638      	mov	r0, r7
 80071e4:	f3af 8000 	nop.w
 80071e8:	1c42      	adds	r2, r0, #1
 80071ea:	4606      	mov	r6, r0
 80071ec:	d1d6      	bne.n	800719c <_svfiprintf_r+0x174>
 80071ee:	89ab      	ldrh	r3, [r5, #12]
 80071f0:	065b      	lsls	r3, r3, #25
 80071f2:	f53f af2d 	bmi.w	8007050 <_svfiprintf_r+0x28>
 80071f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80071f8:	e72c      	b.n	8007054 <_svfiprintf_r+0x2c>
 80071fa:	ab03      	add	r3, sp, #12
 80071fc:	9300      	str	r3, [sp, #0]
 80071fe:	462a      	mov	r2, r5
 8007200:	4b05      	ldr	r3, [pc, #20]	@ (8007218 <_svfiprintf_r+0x1f0>)
 8007202:	a904      	add	r1, sp, #16
 8007204:	4638      	mov	r0, r7
 8007206:	f000 f9bb 	bl	8007580 <_printf_i>
 800720a:	e7ed      	b.n	80071e8 <_svfiprintf_r+0x1c0>
 800720c:	08008d46 	.word	0x08008d46
 8007210:	08008d50 	.word	0x08008d50
 8007214:	00000000 	.word	0x00000000
 8007218:	08006f71 	.word	0x08006f71
 800721c:	08008d4c 	.word	0x08008d4c

08007220 <__sfputc_r>:
 8007220:	6893      	ldr	r3, [r2, #8]
 8007222:	3b01      	subs	r3, #1
 8007224:	2b00      	cmp	r3, #0
 8007226:	b410      	push	{r4}
 8007228:	6093      	str	r3, [r2, #8]
 800722a:	da08      	bge.n	800723e <__sfputc_r+0x1e>
 800722c:	6994      	ldr	r4, [r2, #24]
 800722e:	42a3      	cmp	r3, r4
 8007230:	db01      	blt.n	8007236 <__sfputc_r+0x16>
 8007232:	290a      	cmp	r1, #10
 8007234:	d103      	bne.n	800723e <__sfputc_r+0x1e>
 8007236:	f85d 4b04 	ldr.w	r4, [sp], #4
 800723a:	f7ff bc82 	b.w	8006b42 <__swbuf_r>
 800723e:	6813      	ldr	r3, [r2, #0]
 8007240:	1c58      	adds	r0, r3, #1
 8007242:	6010      	str	r0, [r2, #0]
 8007244:	7019      	strb	r1, [r3, #0]
 8007246:	4608      	mov	r0, r1
 8007248:	f85d 4b04 	ldr.w	r4, [sp], #4
 800724c:	4770      	bx	lr

0800724e <__sfputs_r>:
 800724e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007250:	4606      	mov	r6, r0
 8007252:	460f      	mov	r7, r1
 8007254:	4614      	mov	r4, r2
 8007256:	18d5      	adds	r5, r2, r3
 8007258:	42ac      	cmp	r4, r5
 800725a:	d101      	bne.n	8007260 <__sfputs_r+0x12>
 800725c:	2000      	movs	r0, #0
 800725e:	e007      	b.n	8007270 <__sfputs_r+0x22>
 8007260:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007264:	463a      	mov	r2, r7
 8007266:	4630      	mov	r0, r6
 8007268:	f7ff ffda 	bl	8007220 <__sfputc_r>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	d1f3      	bne.n	8007258 <__sfputs_r+0xa>
 8007270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007274 <_vfiprintf_r>:
 8007274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007278:	460d      	mov	r5, r1
 800727a:	b09d      	sub	sp, #116	@ 0x74
 800727c:	4614      	mov	r4, r2
 800727e:	4698      	mov	r8, r3
 8007280:	4606      	mov	r6, r0
 8007282:	b118      	cbz	r0, 800728c <_vfiprintf_r+0x18>
 8007284:	6a03      	ldr	r3, [r0, #32]
 8007286:	b90b      	cbnz	r3, 800728c <_vfiprintf_r+0x18>
 8007288:	f7ff fb52 	bl	8006930 <__sinit>
 800728c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800728e:	07d9      	lsls	r1, r3, #31
 8007290:	d405      	bmi.n	800729e <_vfiprintf_r+0x2a>
 8007292:	89ab      	ldrh	r3, [r5, #12]
 8007294:	059a      	lsls	r2, r3, #22
 8007296:	d402      	bmi.n	800729e <_vfiprintf_r+0x2a>
 8007298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800729a:	f7ff fd60 	bl	8006d5e <__retarget_lock_acquire_recursive>
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	071b      	lsls	r3, r3, #28
 80072a2:	d501      	bpl.n	80072a8 <_vfiprintf_r+0x34>
 80072a4:	692b      	ldr	r3, [r5, #16]
 80072a6:	b99b      	cbnz	r3, 80072d0 <_vfiprintf_r+0x5c>
 80072a8:	4629      	mov	r1, r5
 80072aa:	4630      	mov	r0, r6
 80072ac:	f7ff fc88 	bl	8006bc0 <__swsetup_r>
 80072b0:	b170      	cbz	r0, 80072d0 <_vfiprintf_r+0x5c>
 80072b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072b4:	07dc      	lsls	r4, r3, #31
 80072b6:	d504      	bpl.n	80072c2 <_vfiprintf_r+0x4e>
 80072b8:	f04f 30ff 	mov.w	r0, #4294967295
 80072bc:	b01d      	add	sp, #116	@ 0x74
 80072be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072c2:	89ab      	ldrh	r3, [r5, #12]
 80072c4:	0598      	lsls	r0, r3, #22
 80072c6:	d4f7      	bmi.n	80072b8 <_vfiprintf_r+0x44>
 80072c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ca:	f7ff fd49 	bl	8006d60 <__retarget_lock_release_recursive>
 80072ce:	e7f3      	b.n	80072b8 <_vfiprintf_r+0x44>
 80072d0:	2300      	movs	r3, #0
 80072d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80072d4:	2320      	movs	r3, #32
 80072d6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072da:	f8cd 800c 	str.w	r8, [sp, #12]
 80072de:	2330      	movs	r3, #48	@ 0x30
 80072e0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007490 <_vfiprintf_r+0x21c>
 80072e4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072e8:	f04f 0901 	mov.w	r9, #1
 80072ec:	4623      	mov	r3, r4
 80072ee:	469a      	mov	sl, r3
 80072f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072f4:	b10a      	cbz	r2, 80072fa <_vfiprintf_r+0x86>
 80072f6:	2a25      	cmp	r2, #37	@ 0x25
 80072f8:	d1f9      	bne.n	80072ee <_vfiprintf_r+0x7a>
 80072fa:	ebba 0b04 	subs.w	fp, sl, r4
 80072fe:	d00b      	beq.n	8007318 <_vfiprintf_r+0xa4>
 8007300:	465b      	mov	r3, fp
 8007302:	4622      	mov	r2, r4
 8007304:	4629      	mov	r1, r5
 8007306:	4630      	mov	r0, r6
 8007308:	f7ff ffa1 	bl	800724e <__sfputs_r>
 800730c:	3001      	adds	r0, #1
 800730e:	f000 80a7 	beq.w	8007460 <_vfiprintf_r+0x1ec>
 8007312:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007314:	445a      	add	r2, fp
 8007316:	9209      	str	r2, [sp, #36]	@ 0x24
 8007318:	f89a 3000 	ldrb.w	r3, [sl]
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 809f 	beq.w	8007460 <_vfiprintf_r+0x1ec>
 8007322:	2300      	movs	r3, #0
 8007324:	f04f 32ff 	mov.w	r2, #4294967295
 8007328:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800732c:	f10a 0a01 	add.w	sl, sl, #1
 8007330:	9304      	str	r3, [sp, #16]
 8007332:	9307      	str	r3, [sp, #28]
 8007334:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007338:	931a      	str	r3, [sp, #104]	@ 0x68
 800733a:	4654      	mov	r4, sl
 800733c:	2205      	movs	r2, #5
 800733e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007342:	4853      	ldr	r0, [pc, #332]	@ (8007490 <_vfiprintf_r+0x21c>)
 8007344:	f7f8 ff5c 	bl	8000200 <memchr>
 8007348:	9a04      	ldr	r2, [sp, #16]
 800734a:	b9d8      	cbnz	r0, 8007384 <_vfiprintf_r+0x110>
 800734c:	06d1      	lsls	r1, r2, #27
 800734e:	bf44      	itt	mi
 8007350:	2320      	movmi	r3, #32
 8007352:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007356:	0713      	lsls	r3, r2, #28
 8007358:	bf44      	itt	mi
 800735a:	232b      	movmi	r3, #43	@ 0x2b
 800735c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007360:	f89a 3000 	ldrb.w	r3, [sl]
 8007364:	2b2a      	cmp	r3, #42	@ 0x2a
 8007366:	d015      	beq.n	8007394 <_vfiprintf_r+0x120>
 8007368:	9a07      	ldr	r2, [sp, #28]
 800736a:	4654      	mov	r4, sl
 800736c:	2000      	movs	r0, #0
 800736e:	f04f 0c0a 	mov.w	ip, #10
 8007372:	4621      	mov	r1, r4
 8007374:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007378:	3b30      	subs	r3, #48	@ 0x30
 800737a:	2b09      	cmp	r3, #9
 800737c:	d94b      	bls.n	8007416 <_vfiprintf_r+0x1a2>
 800737e:	b1b0      	cbz	r0, 80073ae <_vfiprintf_r+0x13a>
 8007380:	9207      	str	r2, [sp, #28]
 8007382:	e014      	b.n	80073ae <_vfiprintf_r+0x13a>
 8007384:	eba0 0308 	sub.w	r3, r0, r8
 8007388:	fa09 f303 	lsl.w	r3, r9, r3
 800738c:	4313      	orrs	r3, r2
 800738e:	9304      	str	r3, [sp, #16]
 8007390:	46a2      	mov	sl, r4
 8007392:	e7d2      	b.n	800733a <_vfiprintf_r+0xc6>
 8007394:	9b03      	ldr	r3, [sp, #12]
 8007396:	1d19      	adds	r1, r3, #4
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	9103      	str	r1, [sp, #12]
 800739c:	2b00      	cmp	r3, #0
 800739e:	bfbb      	ittet	lt
 80073a0:	425b      	neglt	r3, r3
 80073a2:	f042 0202 	orrlt.w	r2, r2, #2
 80073a6:	9307      	strge	r3, [sp, #28]
 80073a8:	9307      	strlt	r3, [sp, #28]
 80073aa:	bfb8      	it	lt
 80073ac:	9204      	strlt	r2, [sp, #16]
 80073ae:	7823      	ldrb	r3, [r4, #0]
 80073b0:	2b2e      	cmp	r3, #46	@ 0x2e
 80073b2:	d10a      	bne.n	80073ca <_vfiprintf_r+0x156>
 80073b4:	7863      	ldrb	r3, [r4, #1]
 80073b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b8:	d132      	bne.n	8007420 <_vfiprintf_r+0x1ac>
 80073ba:	9b03      	ldr	r3, [sp, #12]
 80073bc:	1d1a      	adds	r2, r3, #4
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	9203      	str	r2, [sp, #12]
 80073c2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073c6:	3402      	adds	r4, #2
 80073c8:	9305      	str	r3, [sp, #20]
 80073ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074a0 <_vfiprintf_r+0x22c>
 80073ce:	7821      	ldrb	r1, [r4, #0]
 80073d0:	2203      	movs	r2, #3
 80073d2:	4650      	mov	r0, sl
 80073d4:	f7f8 ff14 	bl	8000200 <memchr>
 80073d8:	b138      	cbz	r0, 80073ea <_vfiprintf_r+0x176>
 80073da:	9b04      	ldr	r3, [sp, #16]
 80073dc:	eba0 000a 	sub.w	r0, r0, sl
 80073e0:	2240      	movs	r2, #64	@ 0x40
 80073e2:	4082      	lsls	r2, r0
 80073e4:	4313      	orrs	r3, r2
 80073e6:	3401      	adds	r4, #1
 80073e8:	9304      	str	r3, [sp, #16]
 80073ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073ee:	4829      	ldr	r0, [pc, #164]	@ (8007494 <_vfiprintf_r+0x220>)
 80073f0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073f4:	2206      	movs	r2, #6
 80073f6:	f7f8 ff03 	bl	8000200 <memchr>
 80073fa:	2800      	cmp	r0, #0
 80073fc:	d03f      	beq.n	800747e <_vfiprintf_r+0x20a>
 80073fe:	4b26      	ldr	r3, [pc, #152]	@ (8007498 <_vfiprintf_r+0x224>)
 8007400:	bb1b      	cbnz	r3, 800744a <_vfiprintf_r+0x1d6>
 8007402:	9b03      	ldr	r3, [sp, #12]
 8007404:	3307      	adds	r3, #7
 8007406:	f023 0307 	bic.w	r3, r3, #7
 800740a:	3308      	adds	r3, #8
 800740c:	9303      	str	r3, [sp, #12]
 800740e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007410:	443b      	add	r3, r7
 8007412:	9309      	str	r3, [sp, #36]	@ 0x24
 8007414:	e76a      	b.n	80072ec <_vfiprintf_r+0x78>
 8007416:	fb0c 3202 	mla	r2, ip, r2, r3
 800741a:	460c      	mov	r4, r1
 800741c:	2001      	movs	r0, #1
 800741e:	e7a8      	b.n	8007372 <_vfiprintf_r+0xfe>
 8007420:	2300      	movs	r3, #0
 8007422:	3401      	adds	r4, #1
 8007424:	9305      	str	r3, [sp, #20]
 8007426:	4619      	mov	r1, r3
 8007428:	f04f 0c0a 	mov.w	ip, #10
 800742c:	4620      	mov	r0, r4
 800742e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007432:	3a30      	subs	r2, #48	@ 0x30
 8007434:	2a09      	cmp	r2, #9
 8007436:	d903      	bls.n	8007440 <_vfiprintf_r+0x1cc>
 8007438:	2b00      	cmp	r3, #0
 800743a:	d0c6      	beq.n	80073ca <_vfiprintf_r+0x156>
 800743c:	9105      	str	r1, [sp, #20]
 800743e:	e7c4      	b.n	80073ca <_vfiprintf_r+0x156>
 8007440:	fb0c 2101 	mla	r1, ip, r1, r2
 8007444:	4604      	mov	r4, r0
 8007446:	2301      	movs	r3, #1
 8007448:	e7f0      	b.n	800742c <_vfiprintf_r+0x1b8>
 800744a:	ab03      	add	r3, sp, #12
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	462a      	mov	r2, r5
 8007450:	4b12      	ldr	r3, [pc, #72]	@ (800749c <_vfiprintf_r+0x228>)
 8007452:	a904      	add	r1, sp, #16
 8007454:	4630      	mov	r0, r6
 8007456:	f3af 8000 	nop.w
 800745a:	4607      	mov	r7, r0
 800745c:	1c78      	adds	r0, r7, #1
 800745e:	d1d6      	bne.n	800740e <_vfiprintf_r+0x19a>
 8007460:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d405      	bmi.n	8007472 <_vfiprintf_r+0x1fe>
 8007466:	89ab      	ldrh	r3, [r5, #12]
 8007468:	059a      	lsls	r2, r3, #22
 800746a:	d402      	bmi.n	8007472 <_vfiprintf_r+0x1fe>
 800746c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800746e:	f7ff fc77 	bl	8006d60 <__retarget_lock_release_recursive>
 8007472:	89ab      	ldrh	r3, [r5, #12]
 8007474:	065b      	lsls	r3, r3, #25
 8007476:	f53f af1f 	bmi.w	80072b8 <_vfiprintf_r+0x44>
 800747a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800747c:	e71e      	b.n	80072bc <_vfiprintf_r+0x48>
 800747e:	ab03      	add	r3, sp, #12
 8007480:	9300      	str	r3, [sp, #0]
 8007482:	462a      	mov	r2, r5
 8007484:	4b05      	ldr	r3, [pc, #20]	@ (800749c <_vfiprintf_r+0x228>)
 8007486:	a904      	add	r1, sp, #16
 8007488:	4630      	mov	r0, r6
 800748a:	f000 f879 	bl	8007580 <_printf_i>
 800748e:	e7e4      	b.n	800745a <_vfiprintf_r+0x1e6>
 8007490:	08008d46 	.word	0x08008d46
 8007494:	08008d50 	.word	0x08008d50
 8007498:	00000000 	.word	0x00000000
 800749c:	0800724f 	.word	0x0800724f
 80074a0:	08008d4c 	.word	0x08008d4c

080074a4 <_printf_common>:
 80074a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a8:	4616      	mov	r6, r2
 80074aa:	4698      	mov	r8, r3
 80074ac:	688a      	ldr	r2, [r1, #8]
 80074ae:	690b      	ldr	r3, [r1, #16]
 80074b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074b4:	4293      	cmp	r3, r2
 80074b6:	bfb8      	it	lt
 80074b8:	4613      	movlt	r3, r2
 80074ba:	6033      	str	r3, [r6, #0]
 80074bc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074c0:	4607      	mov	r7, r0
 80074c2:	460c      	mov	r4, r1
 80074c4:	b10a      	cbz	r2, 80074ca <_printf_common+0x26>
 80074c6:	3301      	adds	r3, #1
 80074c8:	6033      	str	r3, [r6, #0]
 80074ca:	6823      	ldr	r3, [r4, #0]
 80074cc:	0699      	lsls	r1, r3, #26
 80074ce:	bf42      	ittt	mi
 80074d0:	6833      	ldrmi	r3, [r6, #0]
 80074d2:	3302      	addmi	r3, #2
 80074d4:	6033      	strmi	r3, [r6, #0]
 80074d6:	6825      	ldr	r5, [r4, #0]
 80074d8:	f015 0506 	ands.w	r5, r5, #6
 80074dc:	d106      	bne.n	80074ec <_printf_common+0x48>
 80074de:	f104 0a19 	add.w	sl, r4, #25
 80074e2:	68e3      	ldr	r3, [r4, #12]
 80074e4:	6832      	ldr	r2, [r6, #0]
 80074e6:	1a9b      	subs	r3, r3, r2
 80074e8:	42ab      	cmp	r3, r5
 80074ea:	dc26      	bgt.n	800753a <_printf_common+0x96>
 80074ec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074f0:	6822      	ldr	r2, [r4, #0]
 80074f2:	3b00      	subs	r3, #0
 80074f4:	bf18      	it	ne
 80074f6:	2301      	movne	r3, #1
 80074f8:	0692      	lsls	r2, r2, #26
 80074fa:	d42b      	bmi.n	8007554 <_printf_common+0xb0>
 80074fc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007500:	4641      	mov	r1, r8
 8007502:	4638      	mov	r0, r7
 8007504:	47c8      	blx	r9
 8007506:	3001      	adds	r0, #1
 8007508:	d01e      	beq.n	8007548 <_printf_common+0xa4>
 800750a:	6823      	ldr	r3, [r4, #0]
 800750c:	6922      	ldr	r2, [r4, #16]
 800750e:	f003 0306 	and.w	r3, r3, #6
 8007512:	2b04      	cmp	r3, #4
 8007514:	bf02      	ittt	eq
 8007516:	68e5      	ldreq	r5, [r4, #12]
 8007518:	6833      	ldreq	r3, [r6, #0]
 800751a:	1aed      	subeq	r5, r5, r3
 800751c:	68a3      	ldr	r3, [r4, #8]
 800751e:	bf0c      	ite	eq
 8007520:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007524:	2500      	movne	r5, #0
 8007526:	4293      	cmp	r3, r2
 8007528:	bfc4      	itt	gt
 800752a:	1a9b      	subgt	r3, r3, r2
 800752c:	18ed      	addgt	r5, r5, r3
 800752e:	2600      	movs	r6, #0
 8007530:	341a      	adds	r4, #26
 8007532:	42b5      	cmp	r5, r6
 8007534:	d11a      	bne.n	800756c <_printf_common+0xc8>
 8007536:	2000      	movs	r0, #0
 8007538:	e008      	b.n	800754c <_printf_common+0xa8>
 800753a:	2301      	movs	r3, #1
 800753c:	4652      	mov	r2, sl
 800753e:	4641      	mov	r1, r8
 8007540:	4638      	mov	r0, r7
 8007542:	47c8      	blx	r9
 8007544:	3001      	adds	r0, #1
 8007546:	d103      	bne.n	8007550 <_printf_common+0xac>
 8007548:	f04f 30ff 	mov.w	r0, #4294967295
 800754c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007550:	3501      	adds	r5, #1
 8007552:	e7c6      	b.n	80074e2 <_printf_common+0x3e>
 8007554:	18e1      	adds	r1, r4, r3
 8007556:	1c5a      	adds	r2, r3, #1
 8007558:	2030      	movs	r0, #48	@ 0x30
 800755a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800755e:	4422      	add	r2, r4
 8007560:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007564:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007568:	3302      	adds	r3, #2
 800756a:	e7c7      	b.n	80074fc <_printf_common+0x58>
 800756c:	2301      	movs	r3, #1
 800756e:	4622      	mov	r2, r4
 8007570:	4641      	mov	r1, r8
 8007572:	4638      	mov	r0, r7
 8007574:	47c8      	blx	r9
 8007576:	3001      	adds	r0, #1
 8007578:	d0e6      	beq.n	8007548 <_printf_common+0xa4>
 800757a:	3601      	adds	r6, #1
 800757c:	e7d9      	b.n	8007532 <_printf_common+0x8e>
	...

08007580 <_printf_i>:
 8007580:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007584:	7e0f      	ldrb	r7, [r1, #24]
 8007586:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007588:	2f78      	cmp	r7, #120	@ 0x78
 800758a:	4691      	mov	r9, r2
 800758c:	4680      	mov	r8, r0
 800758e:	460c      	mov	r4, r1
 8007590:	469a      	mov	sl, r3
 8007592:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007596:	d807      	bhi.n	80075a8 <_printf_i+0x28>
 8007598:	2f62      	cmp	r7, #98	@ 0x62
 800759a:	d80a      	bhi.n	80075b2 <_printf_i+0x32>
 800759c:	2f00      	cmp	r7, #0
 800759e:	f000 80d2 	beq.w	8007746 <_printf_i+0x1c6>
 80075a2:	2f58      	cmp	r7, #88	@ 0x58
 80075a4:	f000 80b9 	beq.w	800771a <_printf_i+0x19a>
 80075a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075ac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075b0:	e03a      	b.n	8007628 <_printf_i+0xa8>
 80075b2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075b6:	2b15      	cmp	r3, #21
 80075b8:	d8f6      	bhi.n	80075a8 <_printf_i+0x28>
 80075ba:	a101      	add	r1, pc, #4	@ (adr r1, 80075c0 <_printf_i+0x40>)
 80075bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075c0:	08007619 	.word	0x08007619
 80075c4:	0800762d 	.word	0x0800762d
 80075c8:	080075a9 	.word	0x080075a9
 80075cc:	080075a9 	.word	0x080075a9
 80075d0:	080075a9 	.word	0x080075a9
 80075d4:	080075a9 	.word	0x080075a9
 80075d8:	0800762d 	.word	0x0800762d
 80075dc:	080075a9 	.word	0x080075a9
 80075e0:	080075a9 	.word	0x080075a9
 80075e4:	080075a9 	.word	0x080075a9
 80075e8:	080075a9 	.word	0x080075a9
 80075ec:	0800772d 	.word	0x0800772d
 80075f0:	08007657 	.word	0x08007657
 80075f4:	080076e7 	.word	0x080076e7
 80075f8:	080075a9 	.word	0x080075a9
 80075fc:	080075a9 	.word	0x080075a9
 8007600:	0800774f 	.word	0x0800774f
 8007604:	080075a9 	.word	0x080075a9
 8007608:	08007657 	.word	0x08007657
 800760c:	080075a9 	.word	0x080075a9
 8007610:	080075a9 	.word	0x080075a9
 8007614:	080076ef 	.word	0x080076ef
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	1d1a      	adds	r2, r3, #4
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	6032      	str	r2, [r6, #0]
 8007620:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007624:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007628:	2301      	movs	r3, #1
 800762a:	e09d      	b.n	8007768 <_printf_i+0x1e8>
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	6820      	ldr	r0, [r4, #0]
 8007630:	1d19      	adds	r1, r3, #4
 8007632:	6031      	str	r1, [r6, #0]
 8007634:	0606      	lsls	r6, r0, #24
 8007636:	d501      	bpl.n	800763c <_printf_i+0xbc>
 8007638:	681d      	ldr	r5, [r3, #0]
 800763a:	e003      	b.n	8007644 <_printf_i+0xc4>
 800763c:	0645      	lsls	r5, r0, #25
 800763e:	d5fb      	bpl.n	8007638 <_printf_i+0xb8>
 8007640:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007644:	2d00      	cmp	r5, #0
 8007646:	da03      	bge.n	8007650 <_printf_i+0xd0>
 8007648:	232d      	movs	r3, #45	@ 0x2d
 800764a:	426d      	negs	r5, r5
 800764c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007650:	4859      	ldr	r0, [pc, #356]	@ (80077b8 <_printf_i+0x238>)
 8007652:	230a      	movs	r3, #10
 8007654:	e011      	b.n	800767a <_printf_i+0xfa>
 8007656:	6821      	ldr	r1, [r4, #0]
 8007658:	6833      	ldr	r3, [r6, #0]
 800765a:	0608      	lsls	r0, r1, #24
 800765c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007660:	d402      	bmi.n	8007668 <_printf_i+0xe8>
 8007662:	0649      	lsls	r1, r1, #25
 8007664:	bf48      	it	mi
 8007666:	b2ad      	uxthmi	r5, r5
 8007668:	2f6f      	cmp	r7, #111	@ 0x6f
 800766a:	4853      	ldr	r0, [pc, #332]	@ (80077b8 <_printf_i+0x238>)
 800766c:	6033      	str	r3, [r6, #0]
 800766e:	bf14      	ite	ne
 8007670:	230a      	movne	r3, #10
 8007672:	2308      	moveq	r3, #8
 8007674:	2100      	movs	r1, #0
 8007676:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800767a:	6866      	ldr	r6, [r4, #4]
 800767c:	60a6      	str	r6, [r4, #8]
 800767e:	2e00      	cmp	r6, #0
 8007680:	bfa2      	ittt	ge
 8007682:	6821      	ldrge	r1, [r4, #0]
 8007684:	f021 0104 	bicge.w	r1, r1, #4
 8007688:	6021      	strge	r1, [r4, #0]
 800768a:	b90d      	cbnz	r5, 8007690 <_printf_i+0x110>
 800768c:	2e00      	cmp	r6, #0
 800768e:	d04b      	beq.n	8007728 <_printf_i+0x1a8>
 8007690:	4616      	mov	r6, r2
 8007692:	fbb5 f1f3 	udiv	r1, r5, r3
 8007696:	fb03 5711 	mls	r7, r3, r1, r5
 800769a:	5dc7      	ldrb	r7, [r0, r7]
 800769c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076a0:	462f      	mov	r7, r5
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	460d      	mov	r5, r1
 80076a6:	d9f4      	bls.n	8007692 <_printf_i+0x112>
 80076a8:	2b08      	cmp	r3, #8
 80076aa:	d10b      	bne.n	80076c4 <_printf_i+0x144>
 80076ac:	6823      	ldr	r3, [r4, #0]
 80076ae:	07df      	lsls	r7, r3, #31
 80076b0:	d508      	bpl.n	80076c4 <_printf_i+0x144>
 80076b2:	6923      	ldr	r3, [r4, #16]
 80076b4:	6861      	ldr	r1, [r4, #4]
 80076b6:	4299      	cmp	r1, r3
 80076b8:	bfde      	ittt	le
 80076ba:	2330      	movle	r3, #48	@ 0x30
 80076bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076c4:	1b92      	subs	r2, r2, r6
 80076c6:	6122      	str	r2, [r4, #16]
 80076c8:	f8cd a000 	str.w	sl, [sp]
 80076cc:	464b      	mov	r3, r9
 80076ce:	aa03      	add	r2, sp, #12
 80076d0:	4621      	mov	r1, r4
 80076d2:	4640      	mov	r0, r8
 80076d4:	f7ff fee6 	bl	80074a4 <_printf_common>
 80076d8:	3001      	adds	r0, #1
 80076da:	d14a      	bne.n	8007772 <_printf_i+0x1f2>
 80076dc:	f04f 30ff 	mov.w	r0, #4294967295
 80076e0:	b004      	add	sp, #16
 80076e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076e6:	6823      	ldr	r3, [r4, #0]
 80076e8:	f043 0320 	orr.w	r3, r3, #32
 80076ec:	6023      	str	r3, [r4, #0]
 80076ee:	4833      	ldr	r0, [pc, #204]	@ (80077bc <_printf_i+0x23c>)
 80076f0:	2778      	movs	r7, #120	@ 0x78
 80076f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	6831      	ldr	r1, [r6, #0]
 80076fa:	061f      	lsls	r7, r3, #24
 80076fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8007700:	d402      	bmi.n	8007708 <_printf_i+0x188>
 8007702:	065f      	lsls	r7, r3, #25
 8007704:	bf48      	it	mi
 8007706:	b2ad      	uxthmi	r5, r5
 8007708:	6031      	str	r1, [r6, #0]
 800770a:	07d9      	lsls	r1, r3, #31
 800770c:	bf44      	itt	mi
 800770e:	f043 0320 	orrmi.w	r3, r3, #32
 8007712:	6023      	strmi	r3, [r4, #0]
 8007714:	b11d      	cbz	r5, 800771e <_printf_i+0x19e>
 8007716:	2310      	movs	r3, #16
 8007718:	e7ac      	b.n	8007674 <_printf_i+0xf4>
 800771a:	4827      	ldr	r0, [pc, #156]	@ (80077b8 <_printf_i+0x238>)
 800771c:	e7e9      	b.n	80076f2 <_printf_i+0x172>
 800771e:	6823      	ldr	r3, [r4, #0]
 8007720:	f023 0320 	bic.w	r3, r3, #32
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	e7f6      	b.n	8007716 <_printf_i+0x196>
 8007728:	4616      	mov	r6, r2
 800772a:	e7bd      	b.n	80076a8 <_printf_i+0x128>
 800772c:	6833      	ldr	r3, [r6, #0]
 800772e:	6825      	ldr	r5, [r4, #0]
 8007730:	6961      	ldr	r1, [r4, #20]
 8007732:	1d18      	adds	r0, r3, #4
 8007734:	6030      	str	r0, [r6, #0]
 8007736:	062e      	lsls	r6, r5, #24
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	d501      	bpl.n	8007740 <_printf_i+0x1c0>
 800773c:	6019      	str	r1, [r3, #0]
 800773e:	e002      	b.n	8007746 <_printf_i+0x1c6>
 8007740:	0668      	lsls	r0, r5, #25
 8007742:	d5fb      	bpl.n	800773c <_printf_i+0x1bc>
 8007744:	8019      	strh	r1, [r3, #0]
 8007746:	2300      	movs	r3, #0
 8007748:	6123      	str	r3, [r4, #16]
 800774a:	4616      	mov	r6, r2
 800774c:	e7bc      	b.n	80076c8 <_printf_i+0x148>
 800774e:	6833      	ldr	r3, [r6, #0]
 8007750:	1d1a      	adds	r2, r3, #4
 8007752:	6032      	str	r2, [r6, #0]
 8007754:	681e      	ldr	r6, [r3, #0]
 8007756:	6862      	ldr	r2, [r4, #4]
 8007758:	2100      	movs	r1, #0
 800775a:	4630      	mov	r0, r6
 800775c:	f7f8 fd50 	bl	8000200 <memchr>
 8007760:	b108      	cbz	r0, 8007766 <_printf_i+0x1e6>
 8007762:	1b80      	subs	r0, r0, r6
 8007764:	6060      	str	r0, [r4, #4]
 8007766:	6863      	ldr	r3, [r4, #4]
 8007768:	6123      	str	r3, [r4, #16]
 800776a:	2300      	movs	r3, #0
 800776c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007770:	e7aa      	b.n	80076c8 <_printf_i+0x148>
 8007772:	6923      	ldr	r3, [r4, #16]
 8007774:	4632      	mov	r2, r6
 8007776:	4649      	mov	r1, r9
 8007778:	4640      	mov	r0, r8
 800777a:	47d0      	blx	sl
 800777c:	3001      	adds	r0, #1
 800777e:	d0ad      	beq.n	80076dc <_printf_i+0x15c>
 8007780:	6823      	ldr	r3, [r4, #0]
 8007782:	079b      	lsls	r3, r3, #30
 8007784:	d413      	bmi.n	80077ae <_printf_i+0x22e>
 8007786:	68e0      	ldr	r0, [r4, #12]
 8007788:	9b03      	ldr	r3, [sp, #12]
 800778a:	4298      	cmp	r0, r3
 800778c:	bfb8      	it	lt
 800778e:	4618      	movlt	r0, r3
 8007790:	e7a6      	b.n	80076e0 <_printf_i+0x160>
 8007792:	2301      	movs	r3, #1
 8007794:	4632      	mov	r2, r6
 8007796:	4649      	mov	r1, r9
 8007798:	4640      	mov	r0, r8
 800779a:	47d0      	blx	sl
 800779c:	3001      	adds	r0, #1
 800779e:	d09d      	beq.n	80076dc <_printf_i+0x15c>
 80077a0:	3501      	adds	r5, #1
 80077a2:	68e3      	ldr	r3, [r4, #12]
 80077a4:	9903      	ldr	r1, [sp, #12]
 80077a6:	1a5b      	subs	r3, r3, r1
 80077a8:	42ab      	cmp	r3, r5
 80077aa:	dcf2      	bgt.n	8007792 <_printf_i+0x212>
 80077ac:	e7eb      	b.n	8007786 <_printf_i+0x206>
 80077ae:	2500      	movs	r5, #0
 80077b0:	f104 0619 	add.w	r6, r4, #25
 80077b4:	e7f5      	b.n	80077a2 <_printf_i+0x222>
 80077b6:	bf00      	nop
 80077b8:	08008d57 	.word	0x08008d57
 80077bc:	08008d68 	.word	0x08008d68

080077c0 <__sflush_r>:
 80077c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c8:	0716      	lsls	r6, r2, #28
 80077ca:	4605      	mov	r5, r0
 80077cc:	460c      	mov	r4, r1
 80077ce:	d454      	bmi.n	800787a <__sflush_r+0xba>
 80077d0:	684b      	ldr	r3, [r1, #4]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	dc02      	bgt.n	80077dc <__sflush_r+0x1c>
 80077d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077d8:	2b00      	cmp	r3, #0
 80077da:	dd48      	ble.n	800786e <__sflush_r+0xae>
 80077dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077de:	2e00      	cmp	r6, #0
 80077e0:	d045      	beq.n	800786e <__sflush_r+0xae>
 80077e2:	2300      	movs	r3, #0
 80077e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077e8:	682f      	ldr	r7, [r5, #0]
 80077ea:	6a21      	ldr	r1, [r4, #32]
 80077ec:	602b      	str	r3, [r5, #0]
 80077ee:	d030      	beq.n	8007852 <__sflush_r+0x92>
 80077f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077f2:	89a3      	ldrh	r3, [r4, #12]
 80077f4:	0759      	lsls	r1, r3, #29
 80077f6:	d505      	bpl.n	8007804 <__sflush_r+0x44>
 80077f8:	6863      	ldr	r3, [r4, #4]
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077fe:	b10b      	cbz	r3, 8007804 <__sflush_r+0x44>
 8007800:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007802:	1ad2      	subs	r2, r2, r3
 8007804:	2300      	movs	r3, #0
 8007806:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007808:	6a21      	ldr	r1, [r4, #32]
 800780a:	4628      	mov	r0, r5
 800780c:	47b0      	blx	r6
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	d106      	bne.n	8007822 <__sflush_r+0x62>
 8007814:	6829      	ldr	r1, [r5, #0]
 8007816:	291d      	cmp	r1, #29
 8007818:	d82b      	bhi.n	8007872 <__sflush_r+0xb2>
 800781a:	4a2a      	ldr	r2, [pc, #168]	@ (80078c4 <__sflush_r+0x104>)
 800781c:	410a      	asrs	r2, r1
 800781e:	07d6      	lsls	r6, r2, #31
 8007820:	d427      	bmi.n	8007872 <__sflush_r+0xb2>
 8007822:	2200      	movs	r2, #0
 8007824:	6062      	str	r2, [r4, #4]
 8007826:	04d9      	lsls	r1, r3, #19
 8007828:	6922      	ldr	r2, [r4, #16]
 800782a:	6022      	str	r2, [r4, #0]
 800782c:	d504      	bpl.n	8007838 <__sflush_r+0x78>
 800782e:	1c42      	adds	r2, r0, #1
 8007830:	d101      	bne.n	8007836 <__sflush_r+0x76>
 8007832:	682b      	ldr	r3, [r5, #0]
 8007834:	b903      	cbnz	r3, 8007838 <__sflush_r+0x78>
 8007836:	6560      	str	r0, [r4, #84]	@ 0x54
 8007838:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800783a:	602f      	str	r7, [r5, #0]
 800783c:	b1b9      	cbz	r1, 800786e <__sflush_r+0xae>
 800783e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007842:	4299      	cmp	r1, r3
 8007844:	d002      	beq.n	800784c <__sflush_r+0x8c>
 8007846:	4628      	mov	r0, r5
 8007848:	f7ff fa9a 	bl	8006d80 <_free_r>
 800784c:	2300      	movs	r3, #0
 800784e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007850:	e00d      	b.n	800786e <__sflush_r+0xae>
 8007852:	2301      	movs	r3, #1
 8007854:	4628      	mov	r0, r5
 8007856:	47b0      	blx	r6
 8007858:	4602      	mov	r2, r0
 800785a:	1c50      	adds	r0, r2, #1
 800785c:	d1c9      	bne.n	80077f2 <__sflush_r+0x32>
 800785e:	682b      	ldr	r3, [r5, #0]
 8007860:	2b00      	cmp	r3, #0
 8007862:	d0c6      	beq.n	80077f2 <__sflush_r+0x32>
 8007864:	2b1d      	cmp	r3, #29
 8007866:	d001      	beq.n	800786c <__sflush_r+0xac>
 8007868:	2b16      	cmp	r3, #22
 800786a:	d11e      	bne.n	80078aa <__sflush_r+0xea>
 800786c:	602f      	str	r7, [r5, #0]
 800786e:	2000      	movs	r0, #0
 8007870:	e022      	b.n	80078b8 <__sflush_r+0xf8>
 8007872:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007876:	b21b      	sxth	r3, r3
 8007878:	e01b      	b.n	80078b2 <__sflush_r+0xf2>
 800787a:	690f      	ldr	r7, [r1, #16]
 800787c:	2f00      	cmp	r7, #0
 800787e:	d0f6      	beq.n	800786e <__sflush_r+0xae>
 8007880:	0793      	lsls	r3, r2, #30
 8007882:	680e      	ldr	r6, [r1, #0]
 8007884:	bf08      	it	eq
 8007886:	694b      	ldreq	r3, [r1, #20]
 8007888:	600f      	str	r7, [r1, #0]
 800788a:	bf18      	it	ne
 800788c:	2300      	movne	r3, #0
 800788e:	eba6 0807 	sub.w	r8, r6, r7
 8007892:	608b      	str	r3, [r1, #8]
 8007894:	f1b8 0f00 	cmp.w	r8, #0
 8007898:	dde9      	ble.n	800786e <__sflush_r+0xae>
 800789a:	6a21      	ldr	r1, [r4, #32]
 800789c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800789e:	4643      	mov	r3, r8
 80078a0:	463a      	mov	r2, r7
 80078a2:	4628      	mov	r0, r5
 80078a4:	47b0      	blx	r6
 80078a6:	2800      	cmp	r0, #0
 80078a8:	dc08      	bgt.n	80078bc <__sflush_r+0xfc>
 80078aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078b2:	81a3      	strh	r3, [r4, #12]
 80078b4:	f04f 30ff 	mov.w	r0, #4294967295
 80078b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078bc:	4407      	add	r7, r0
 80078be:	eba8 0800 	sub.w	r8, r8, r0
 80078c2:	e7e7      	b.n	8007894 <__sflush_r+0xd4>
 80078c4:	dfbffffe 	.word	0xdfbffffe

080078c8 <_fflush_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	690b      	ldr	r3, [r1, #16]
 80078cc:	4605      	mov	r5, r0
 80078ce:	460c      	mov	r4, r1
 80078d0:	b913      	cbnz	r3, 80078d8 <_fflush_r+0x10>
 80078d2:	2500      	movs	r5, #0
 80078d4:	4628      	mov	r0, r5
 80078d6:	bd38      	pop	{r3, r4, r5, pc}
 80078d8:	b118      	cbz	r0, 80078e2 <_fflush_r+0x1a>
 80078da:	6a03      	ldr	r3, [r0, #32]
 80078dc:	b90b      	cbnz	r3, 80078e2 <_fflush_r+0x1a>
 80078de:	f7ff f827 	bl	8006930 <__sinit>
 80078e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d0f3      	beq.n	80078d2 <_fflush_r+0xa>
 80078ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078ec:	07d0      	lsls	r0, r2, #31
 80078ee:	d404      	bmi.n	80078fa <_fflush_r+0x32>
 80078f0:	0599      	lsls	r1, r3, #22
 80078f2:	d402      	bmi.n	80078fa <_fflush_r+0x32>
 80078f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078f6:	f7ff fa32 	bl	8006d5e <__retarget_lock_acquire_recursive>
 80078fa:	4628      	mov	r0, r5
 80078fc:	4621      	mov	r1, r4
 80078fe:	f7ff ff5f 	bl	80077c0 <__sflush_r>
 8007902:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007904:	07da      	lsls	r2, r3, #31
 8007906:	4605      	mov	r5, r0
 8007908:	d4e4      	bmi.n	80078d4 <_fflush_r+0xc>
 800790a:	89a3      	ldrh	r3, [r4, #12]
 800790c:	059b      	lsls	r3, r3, #22
 800790e:	d4e1      	bmi.n	80078d4 <_fflush_r+0xc>
 8007910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007912:	f7ff fa25 	bl	8006d60 <__retarget_lock_release_recursive>
 8007916:	e7dd      	b.n	80078d4 <_fflush_r+0xc>

08007918 <__swhatbuf_r>:
 8007918:	b570      	push	{r4, r5, r6, lr}
 800791a:	460c      	mov	r4, r1
 800791c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007920:	2900      	cmp	r1, #0
 8007922:	b096      	sub	sp, #88	@ 0x58
 8007924:	4615      	mov	r5, r2
 8007926:	461e      	mov	r6, r3
 8007928:	da0d      	bge.n	8007946 <__swhatbuf_r+0x2e>
 800792a:	89a3      	ldrh	r3, [r4, #12]
 800792c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007930:	f04f 0100 	mov.w	r1, #0
 8007934:	bf14      	ite	ne
 8007936:	2340      	movne	r3, #64	@ 0x40
 8007938:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800793c:	2000      	movs	r0, #0
 800793e:	6031      	str	r1, [r6, #0]
 8007940:	602b      	str	r3, [r5, #0]
 8007942:	b016      	add	sp, #88	@ 0x58
 8007944:	bd70      	pop	{r4, r5, r6, pc}
 8007946:	466a      	mov	r2, sp
 8007948:	f000 f862 	bl	8007a10 <_fstat_r>
 800794c:	2800      	cmp	r0, #0
 800794e:	dbec      	blt.n	800792a <__swhatbuf_r+0x12>
 8007950:	9901      	ldr	r1, [sp, #4]
 8007952:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007956:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800795a:	4259      	negs	r1, r3
 800795c:	4159      	adcs	r1, r3
 800795e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007962:	e7eb      	b.n	800793c <__swhatbuf_r+0x24>

08007964 <__smakebuf_r>:
 8007964:	898b      	ldrh	r3, [r1, #12]
 8007966:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007968:	079d      	lsls	r5, r3, #30
 800796a:	4606      	mov	r6, r0
 800796c:	460c      	mov	r4, r1
 800796e:	d507      	bpl.n	8007980 <__smakebuf_r+0x1c>
 8007970:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	2301      	movs	r3, #1
 800797a:	6163      	str	r3, [r4, #20]
 800797c:	b003      	add	sp, #12
 800797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007980:	ab01      	add	r3, sp, #4
 8007982:	466a      	mov	r2, sp
 8007984:	f7ff ffc8 	bl	8007918 <__swhatbuf_r>
 8007988:	9f00      	ldr	r7, [sp, #0]
 800798a:	4605      	mov	r5, r0
 800798c:	4639      	mov	r1, r7
 800798e:	4630      	mov	r0, r6
 8007990:	f7ff fa62 	bl	8006e58 <_malloc_r>
 8007994:	b948      	cbnz	r0, 80079aa <__smakebuf_r+0x46>
 8007996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800799a:	059a      	lsls	r2, r3, #22
 800799c:	d4ee      	bmi.n	800797c <__smakebuf_r+0x18>
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	f043 0302 	orr.w	r3, r3, #2
 80079a6:	81a3      	strh	r3, [r4, #12]
 80079a8:	e7e2      	b.n	8007970 <__smakebuf_r+0xc>
 80079aa:	89a3      	ldrh	r3, [r4, #12]
 80079ac:	6020      	str	r0, [r4, #0]
 80079ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079b2:	81a3      	strh	r3, [r4, #12]
 80079b4:	9b01      	ldr	r3, [sp, #4]
 80079b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079ba:	b15b      	cbz	r3, 80079d4 <__smakebuf_r+0x70>
 80079bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c0:	4630      	mov	r0, r6
 80079c2:	f000 f837 	bl	8007a34 <_isatty_r>
 80079c6:	b128      	cbz	r0, 80079d4 <__smakebuf_r+0x70>
 80079c8:	89a3      	ldrh	r3, [r4, #12]
 80079ca:	f023 0303 	bic.w	r3, r3, #3
 80079ce:	f043 0301 	orr.w	r3, r3, #1
 80079d2:	81a3      	strh	r3, [r4, #12]
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	431d      	orrs	r5, r3
 80079d8:	81a5      	strh	r5, [r4, #12]
 80079da:	e7cf      	b.n	800797c <__smakebuf_r+0x18>

080079dc <memmove>:
 80079dc:	4288      	cmp	r0, r1
 80079de:	b510      	push	{r4, lr}
 80079e0:	eb01 0402 	add.w	r4, r1, r2
 80079e4:	d902      	bls.n	80079ec <memmove+0x10>
 80079e6:	4284      	cmp	r4, r0
 80079e8:	4623      	mov	r3, r4
 80079ea:	d807      	bhi.n	80079fc <memmove+0x20>
 80079ec:	1e43      	subs	r3, r0, #1
 80079ee:	42a1      	cmp	r1, r4
 80079f0:	d008      	beq.n	8007a04 <memmove+0x28>
 80079f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079fa:	e7f8      	b.n	80079ee <memmove+0x12>
 80079fc:	4402      	add	r2, r0
 80079fe:	4601      	mov	r1, r0
 8007a00:	428a      	cmp	r2, r1
 8007a02:	d100      	bne.n	8007a06 <memmove+0x2a>
 8007a04:	bd10      	pop	{r4, pc}
 8007a06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007a0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007a0e:	e7f7      	b.n	8007a00 <memmove+0x24>

08007a10 <_fstat_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	@ (8007a30 <_fstat_r+0x20>)
 8007a14:	2300      	movs	r3, #0
 8007a16:	4604      	mov	r4, r0
 8007a18:	4608      	mov	r0, r1
 8007a1a:	4611      	mov	r1, r2
 8007a1c:	602b      	str	r3, [r5, #0]
 8007a1e:	f7fe fd7a 	bl	8006516 <_fstat>
 8007a22:	1c43      	adds	r3, r0, #1
 8007a24:	d102      	bne.n	8007a2c <_fstat_r+0x1c>
 8007a26:	682b      	ldr	r3, [r5, #0]
 8007a28:	b103      	cbz	r3, 8007a2c <_fstat_r+0x1c>
 8007a2a:	6023      	str	r3, [r4, #0]
 8007a2c:	bd38      	pop	{r3, r4, r5, pc}
 8007a2e:	bf00      	nop
 8007a30:	200274a8 	.word	0x200274a8

08007a34 <_isatty_r>:
 8007a34:	b538      	push	{r3, r4, r5, lr}
 8007a36:	4d06      	ldr	r5, [pc, #24]	@ (8007a50 <_isatty_r+0x1c>)
 8007a38:	2300      	movs	r3, #0
 8007a3a:	4604      	mov	r4, r0
 8007a3c:	4608      	mov	r0, r1
 8007a3e:	602b      	str	r3, [r5, #0]
 8007a40:	f7fe fecc 	bl	80067dc <_isatty>
 8007a44:	1c43      	adds	r3, r0, #1
 8007a46:	d102      	bne.n	8007a4e <_isatty_r+0x1a>
 8007a48:	682b      	ldr	r3, [r5, #0]
 8007a4a:	b103      	cbz	r3, 8007a4e <_isatty_r+0x1a>
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	bd38      	pop	{r3, r4, r5, pc}
 8007a50:	200274a8 	.word	0x200274a8

08007a54 <_sbrk_r>:
 8007a54:	b538      	push	{r3, r4, r5, lr}
 8007a56:	4d06      	ldr	r5, [pc, #24]	@ (8007a70 <_sbrk_r+0x1c>)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	4604      	mov	r4, r0
 8007a5c:	4608      	mov	r0, r1
 8007a5e:	602b      	str	r3, [r5, #0]
 8007a60:	f7fb fab8 	bl	8002fd4 <_sbrk>
 8007a64:	1c43      	adds	r3, r0, #1
 8007a66:	d102      	bne.n	8007a6e <_sbrk_r+0x1a>
 8007a68:	682b      	ldr	r3, [r5, #0]
 8007a6a:	b103      	cbz	r3, 8007a6e <_sbrk_r+0x1a>
 8007a6c:	6023      	str	r3, [r4, #0]
 8007a6e:	bd38      	pop	{r3, r4, r5, pc}
 8007a70:	200274a8 	.word	0x200274a8

08007a74 <_realloc_r>:
 8007a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a78:	4680      	mov	r8, r0
 8007a7a:	4615      	mov	r5, r2
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	b921      	cbnz	r1, 8007a8a <_realloc_r+0x16>
 8007a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a84:	4611      	mov	r1, r2
 8007a86:	f7ff b9e7 	b.w	8006e58 <_malloc_r>
 8007a8a:	b92a      	cbnz	r2, 8007a98 <_realloc_r+0x24>
 8007a8c:	f7ff f978 	bl	8006d80 <_free_r>
 8007a90:	2400      	movs	r4, #0
 8007a92:	4620      	mov	r0, r4
 8007a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a98:	f000 f81a 	bl	8007ad0 <_malloc_usable_size_r>
 8007a9c:	4285      	cmp	r5, r0
 8007a9e:	4606      	mov	r6, r0
 8007aa0:	d802      	bhi.n	8007aa8 <_realloc_r+0x34>
 8007aa2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aa6:	d8f4      	bhi.n	8007a92 <_realloc_r+0x1e>
 8007aa8:	4629      	mov	r1, r5
 8007aaa:	4640      	mov	r0, r8
 8007aac:	f7ff f9d4 	bl	8006e58 <_malloc_r>
 8007ab0:	4607      	mov	r7, r0
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d0ec      	beq.n	8007a90 <_realloc_r+0x1c>
 8007ab6:	42b5      	cmp	r5, r6
 8007ab8:	462a      	mov	r2, r5
 8007aba:	4621      	mov	r1, r4
 8007abc:	bf28      	it	cs
 8007abe:	4632      	movcs	r2, r6
 8007ac0:	f7ff f94f 	bl	8006d62 <memcpy>
 8007ac4:	4621      	mov	r1, r4
 8007ac6:	4640      	mov	r0, r8
 8007ac8:	f7ff f95a 	bl	8006d80 <_free_r>
 8007acc:	463c      	mov	r4, r7
 8007ace:	e7e0      	b.n	8007a92 <_realloc_r+0x1e>

08007ad0 <_malloc_usable_size_r>:
 8007ad0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007ad4:	1f18      	subs	r0, r3, #4
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	bfbc      	itt	lt
 8007ada:	580b      	ldrlt	r3, [r1, r0]
 8007adc:	18c0      	addlt	r0, r0, r3
 8007ade:	4770      	bx	lr

08007ae0 <_init>:
 8007ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ae2:	bf00      	nop
 8007ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ae6:	bc08      	pop	{r3}
 8007ae8:	469e      	mov	lr, r3
 8007aea:	4770      	bx	lr

08007aec <_fini>:
 8007aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aee:	bf00      	nop
 8007af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af2:	bc08      	pop	{r3}
 8007af4:	469e      	mov	lr, r3
 8007af6:	4770      	bx	lr
